{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/SICPの備忘録/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sititou70.github.io"}},"markdownRemark":{"excerpt":"これはSICPの読書ノートであり備忘録です。SICPを読む上で私が重要だと感じた単語、読んで理解、解釈したことを記録し、あとで簡単に振り返られるようにします。 また、SICP…","html":"<p>これはSICPの読書ノートであり備忘録です。SICPを読む上で私が重要だと感じた単語、読んで理解、解釈したことを記録し、あとで簡単に振り返られるようにします。</p>\n<p>また、SICPの簡単な要約としても読めるようにしたいと思います。ただし、基本的に私なりの解釈で書いていますので、もし間違っていたらご指摘ください。</p>\n<p><a href=\"/SICP%E3%81%AE%E6%84%9F%E6%83%B3%E6%96%87/\">感想文</a>は別に書きました。</p>\n<h2 id=\"1-手続きを用いた抽象化の構築\" style=\"position:relative;\"><a href=\"#1-%E6%89%8B%E7%B6%9A%E3%81%8D%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E6%8A%BD%E8%B1%A1%E5%8C%96%E3%81%AE%E6%A7%8B%E7%AF%89\" aria-label=\"1 手続きを用いた抽象化の構築 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 手続きを用いた抽象化の構築</h2>\n<p>この本では計算プロセスを学びます。プロセスとは計算過程のことです。プロセスはデータを操作します。プロセスはプログラム（計画）にしたがって計算を進めていきます。プログラムを記述する言語はプログラミング言語と呼ばれます。</p>\n<p>この本では、Lispの方言であるSchemeというプログラミング言語を使用します。なぜなら、Lispが持つ特徴がこれからの学習にとても都合が良いからです。その中でも最も重要なのは、Lispで書かれたプロセスが、それ自体データでもあり操作可能だということです。（これは4章で特に強く実感することになります）</p>\n<h3 id=\"11-プログラミングの要素\" style=\"position:relative;\"><a href=\"#11-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E8%A6%81%E7%B4%A0\" aria-label=\"11 プログラミングの要素 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 プログラミングの要素</h3>\n<p>プログラミングの2大要素は、手続きとデータです。手続きは、言語によって記述されたプロセスです。データは、私達が操作したい物です。</p>\n<h4 id=\"111-式\" style=\"position:relative;\"><a href=\"#111-%E5%BC%8F\" aria-label=\"111 式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.1 式</h4>\n<p><code class=\"language-text\">123</code>や<code class=\"language-text\">”hello”</code>は、基本的な式です。</p>\n<p><code class=\"language-text\">+</code>や<code class=\"language-text\">*</code>は、基本的な手続きです。</p>\n<p>式を組み合わせると複合式になります。<code class=\"language-text\">(+ 1 2 3)</code>は複合式です。一番左の要素<code class=\"language-text\">+</code>は演算子と呼ばれます。その他の要素は被演算子と呼ばれます。演算子（手続き）を被演算子に適用する、という言い方もします。</p>\n<p><code class=\"language-text\">(+ 1 2 3)</code>は、評価（evaluation）されると<code class=\"language-text\">6</code>になります。</p>\n<h4 id=\"114-複合手続き\" style=\"position:relative;\"><a href=\"#114-%E8%A4%87%E5%90%88%E6%89%8B%E7%B6%9A%E3%81%8D\" aria-label=\"114 複合手続き permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.4 複合手続き</h4>\n<p>複合手続きは、複数の手続きによって構成される手続きです。これは抽象化のテクニックで、プログラムの複雑さを軽減するのに役立ちます。</p>\n<p>例えば、<code class=\"language-text\">(define (square x) (* x x))</code>は、基本手続き<code class=\"language-text\">*</code>によって構成される複合手続き<code class=\"language-text\">square</code>を作成します。<code class=\"language-text\">square</code>によって更に複合手続きを作ることもできます。</p>\n<p>特殊形式とは、適用の評価規則以外によって評価される文法形式のことを言います。defineの評価は適用規則を使わないので、defineは特殊形式です。<code class=\"language-text\">(define (square x) (* x x))</code>は「defineを<code class=\"language-text\">(square x)</code>と<code class=\"language-text\">(* x x)</code>に適用する」という意味ではないからです。</p>\n<h4 id=\"115-手続き適用の置換モデル\" style=\"position:relative;\"><a href=\"#115-%E6%89%8B%E7%B6%9A%E3%81%8D%E9%81%A9%E7%94%A8%E3%81%AE%E7%BD%AE%E6%8F%9B%E3%83%A2%E3%83%87%E3%83%AB\" aria-label=\"115 手続き適用の置換モデル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.5 手続き適用の置換モデル</h4>\n<p>手続きの適用がどのように起こるかを考えるために以下のような置換モデルを導入します。</p>\n<blockquote>\n<p>複合手続きを引数に適用するには、手続きの本体に出てくる仮引数を対応する引数で置き換えて、それを評価する。</p>\n<p>出典：<a href=\"http://vocrf.net/docs_ja/jsicp.pdf\">SICP 非公式日本語版 翻訳改訂版</a>、以降同じものについて出典略</p>\n</blockquote>\n<p>例えば、<code class=\"language-text\">(square 2)</code>は<code class=\"language-text\">(* 2 2)</code>に置換されます。</p>\n<p>しかし、置換モデルはSchemeインタプリタの正確な動作を表してはいません。このあとの章では、このモデルを更に進化させていきます。しかし、現段階ではこれで十分です。</p>\n<p>また、適用順序と正規順序について学びます。適用順序では、インタプリタは演算子と被演算子をすべて評価してから、演算子を被演算子に適用します。正規順序では、インタプリタは被演算子の値が必要になるまでそれを評価しません。つまり、演算子を評価し、被演算子を評価せずに演算子を適用します。被演算子は、基本的な手続き（足し算や標準出力への表示など）で必要になったときに、はじめて評価されます。</p>\n<p>Lispは適用順序を採用しています。正規順序は、置換モデルを超える範囲では複雑になるからです。一方で、あとの章で登場する無限ストリームが自然に記述できるなどといった利点もあります。</p>\n<h4 id=\"117-例-ニュートン法による平根\" style=\"position:relative;\"><a href=\"#117-%E4%BE%8B-%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%88%E3%83%B3%E6%B3%95%E3%81%AB%E3%82%88%E3%82%8B%E5%B9%B3%E6%A0%B9\" aria-label=\"117 例 ニュートン法による平根 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.7 例: ニュートン法による平⽅根</h4>\n<blockquote>\n<p>数学では普通、宣⾔的な (何であるか) 記述が関⼼の対象ですが、コンピュータサイエンスでは普通、命令的な（どうやるか）記述が関⼼の対象です。</p>\n</blockquote>\n<p>例えば、2の平方根を計算したいとします。数学では、「<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span>の平方根<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span>とは、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≦</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">0 \\leqq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0117em;vertical-align:-0.2558em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel amsrm\">≦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span>かつ<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">y^2 = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span>であるようなもの」と宣言的知識として定義されます。</p>\n<p>一方で、プログラムで実際に平方根を計算するには、2分法やニュートン法などの命令的知識（手続き的知識とも）が必要になります。</p>\n<h3 id=\"12-手続きとそれが成するプロセス\" style=\"position:relative;\"><a href=\"#12-%E6%89%8B%E7%B6%9A%E3%81%8D%E3%81%A8%E3%81%9D%E3%82%8C%E3%81%8C%E6%88%90%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9\" aria-label=\"12 手続きとそれが成するプロセス permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 手続きとそれが⽣成するプロセス</h3>\n<p>プロセスが手続きによってどのように生成され、変化していくのかを学びます。</p>\n<h4 id=\"121-線形再帰と反復\" style=\"position:relative;\"><a href=\"#121-%E7%B7%9A%E5%BD%A2%E5%86%8D%E5%B8%B0%E3%81%A8%E5%8F%8D%E5%BE%A9\" aria-label=\"121 線形再帰と反復 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.1 線形再帰と反復</h4>\n<p>自分自身を呼び出す手続きを再帰手続きといいます。</p>\n<p>プロセスには形があります。プロセスは、その形によって再帰プロセスと反復プロセスに分けられます。</p>\n<p>再帰プロセスは山なりの形になります。以下は再帰プロセスを生成する手続きと、そのプロセスです。</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">=</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> n <span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(factorial 6)\n(* 6 (factorial 5))\n(* 6 (* 5 (factorial 4)))\n(* 6 (* 5 (* 4 (factorial 3))))\n(* 6 (* 5 (* 4 (* 3 (factorial 2)))))\n(* 6 (* 5 (* 4 (* 3 (* 2 (factorial 1))))))\n(* 6 (* 5 (* 4 (* 3 (* 2 1)))))\n(* 6 (* 5 (* 4 (* 3 2))))\n(* 6 (* 5 (* 4 6)))\n(* 6 (* 5 24))\n(* 6 120)\n720</code></pre></div>\n</blockquote>\n<p>線形プロセスは平らな形になります。以下は再帰プロセスを生成する手続きと、そのプロセスです。</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">fact-iter</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">fact-iter</span> product counter max-count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">></span> counter max-count<span class=\"token punctuation\">)</span>\n    product\n    <span class=\"token punctuation\">(</span><span class=\"token function\">fact-iter</span>\n \t <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> counter product<span class=\"token punctuation\">)</span>\n \t <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> counter <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n \t max-count\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(factorial 6)\n(fact-iter 1 1 6)\n(fact-iter 1 2 6)\n(fact-iter 2 3 6)\n(fact-iter 6 4 6)\n(fact-iter 24 5 6)\n(fact-iter 120 6 6)\n(fact-iter 720 7 6)\n720</code></pre></div>\n</blockquote>\n<p>再帰プロセスでは、呼び出し回数が増加すると必要なメモリも増加します。手続きは、<code class=\"language-text\">(factorial (- n 1))</code>を計算した後で、それにnを掛けます。つまり、各再帰呼び出しの際に、インタプリタは後で実行する計算（継続）を何らかの方法で覚えておく必要があるということです。</p>\n<p>一方、反復プロセスでは、呼び出し回数が増加しても必要なメモリは、少なくともSchemeでは増加しません。計算を進めていく上で、インタプリタは<code class=\"language-text\">product</code>、<code class=\"language-text\">counter</code>、<code class=\"language-text\">max-count</code>の3変数を覚えておくだけで十分です。<code class=\"language-text\">fact-iter</code>の呼び出しが、<code class=\"language-text\">fact-iter</code>の最後（末尾）の処理であることにも注目します。ここには後で実行すべき計算がありません。したがって、各再帰呼び出しの際に、インタプリタが追加で覚えておくべき情報もありません。</p>\n<p>しかし、一般的な言語のほとんどの実装では、手続きが原理的に反復プロセスであっても、呼び出し回数に応じたメモリが必要になります。一般的な言語について、本文ではAdaやPascal、C⾔語を例に挙げています。したがって、これらの言語で反復手続きを記述するには、そのための専用の構文（do、repeat、until、for、whileなど）に頼る場合があります。</p>\n<p>反復プロセスを固定の空間で実行できるという性質は、末尾再帰（tail-recursive）や、末尾呼び出しの最適化とも呼ばれます。Schemeは言語仕様として末尾再帰であることを要求しているため、反復のための専用構文は必要ないか、シンタックスシュガー程度で十分です。</p>\n<p>プロセスの形（再帰プロセス、反復プロセス）と、再帰手続きという概念を混同しないように気をつけます。前述した2つ階乗計算は、どちらも再帰手続きです。これは、<code class=\"language-text\">factorial</code>および<code class=\"language-text\">fact-iter</code>が自分自身を呼び出すという構文的特徴によります。しかし、それらが生成するプロセスの形は全く異なります。</p>\n<h4 id=\"123-増加オーダー\" style=\"position:relative;\"><a href=\"#123-%E5%A2%97%E5%8A%A0%E3%82%AA%E3%83%BC%E3%83%80%E3%83%BC\" aria-label=\"123 増加オーダー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.3 増加オーダー</h4>\n<blockquote>\n<p>問題の⼤きさを測るパラメータを n として、⼤きさ n の問題についてプロセスが必要とするリソースの量をR(n)とします。</p>\n</blockquote>\n<p>例えば、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span></span>の階乗計算であれば、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>がパラメータとして適切でしょう。</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">Θ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span></span>（シータ）記法は、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>に対するリソース<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>の増加の程度を表す記法で、以下のようなものです。</p>\n<blockquote>\n<p>任意の⼗分に⼤きなnに対して、nと独⽴な正の定数k1とk2が存在し、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mn>1</mn><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>R</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>k</mi><mn>2</mn><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k1 f(n) \\leq R(n) \\leq k2 f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>を満たすとき、R(n)は増加オーダーがΘ(f(n))であると⾔い、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(n) = Θ(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span>（シータf(n)と読む）と書きます。</p>\n<p>（別の⾔い⽅をすると、⼤きなnに対して、R(n)の値はk1 f(n)とk2 f(n)で挟まれるということです）</p>\n</blockquote>\n<p>補足：他に<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span></span>（ビッグオー）記法というのもあります。これは<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">Θ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span></span>記法とは別物です。<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(n) = Θ(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span>は、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>を<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>の定数倍で上下からはさみます。一方で、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(n) = O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span>は、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>を<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>の定数倍で上からしか抑えません。私見ですが、世間的には<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span></span>記法が有名で、<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">Θ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span></span>記法の意味で<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span></span>記法が用いられていることも多いため、2つを混同しないように注意します。（実際に私は混同していました）</p>\n<h3 id=\"13-階手続きによる抽象の定式化\" style=\"position:relative;\"><a href=\"#13-%E9%9A%8E%E6%89%8B%E7%B6%9A%E3%81%8D%E3%81%AB%E3%82%88%E3%82%8B%E6%8A%BD%E8%B1%A1%E3%81%AE%E5%AE%9A%E5%BC%8F%E5%8C%96\" aria-label=\"13 階手続きによる抽象の定式化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 ⾼階手続きによる抽象の定式化</h3>\n<p>高階手続きは、手続きを操作する手続きです。これは抽象化のテクニックの1つです。</p>\n<h4 id=\"131-引数としての手続き\" style=\"position:relative;\"><a href=\"#131-%E5%BC%95%E6%95%B0%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%89%8B%E7%B6%9A%E3%81%8D\" aria-label=\"131 引数としての手続き permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3.1 引数としての手続き</h4>\n<p>手続きは引数として渡せます。</p>\n<p>例えば、以下の<code class=\"language-text\">double</code>手続きはprocを引数として受け取り、argに2回適用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">double</span> proc arg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">proc</span> <span class=\"token punctuation\">(</span><span class=\"token function\">proc</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">inc</span> arg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> arg <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">double</span> inc <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 3</span></code></pre></div>\n<h4 id=\"132-lambda-を使って手続きを構築する\" style=\"position:relative;\"><a href=\"#132-lambda-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E6%89%8B%E7%B6%9A%E3%81%8D%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B\" aria-label=\"132 lambda を使って手続きを構築する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3.2 lambda を使って手続きを構築する</h4>\n<p>lambdaを使用すると、手続きをその場で作れます。特に名前をつけるまでもない手続きを定義する場合に便利です。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">double</span> proc arg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">proc</span> <span class=\"token punctuation\">(</span><span class=\"token function\">proc</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">double</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> arg <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 3</span></code></pre></div>\n<p><code class=\"language-text\">2</code>が数値のリテラル、<code class=\"language-text\">”abc”</code>が文字列のリテラルであるのと同じように、lambdaは手続きのリテラルです。したがって次のように書けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> one <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\none\n<span class=\"token comment\">; 1</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> inc <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> arg <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">inc</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 2</span></code></pre></div>\n<h4 id=\"134-返り値としての手続き\" style=\"position:relative;\"><a href=\"#134-%E8%BF%94%E3%82%8A%E5%80%A4%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%89%8B%E7%B6%9A%E3%81%8D\" aria-label=\"134 返り値としての手続き permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3.4 返り値としての手続き</h4>\n<p>手続きは、返り値として返すこともできます。例えば以下のようにできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make-plus-n</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> arg n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> plus-two <span class=\"token punctuation\">(</span><span class=\"token function\">make-plus-n</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">plus-two</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 3</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">plus-two</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 4</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">plus-two</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 5</span></code></pre></div>\n<h5 id=\"抽象化とファーストクラス手続き\" style=\"position:relative;\"><a href=\"#%E6%8A%BD%E8%B1%A1%E5%8C%96%E3%81%A8%E3%83%95%E3%82%A1%E3%83%BC%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9%E6%89%8B%E7%B6%9A%E3%81%8D\" aria-label=\"抽象化とファーストクラス手続き permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>抽象化とファーストクラス手続き</h5>\n<blockquote>\n<p>⼀般的に、プログラミング⾔語は計算要素の操作⽅法に制約を課すものです。制約が最も少ない要素は、「ファーストクラス (first-class、または第一級) の地位を持つ」と言います。</p>\n</blockquote>\n<p>ファーストクラスの要素は、（制約が少ないため）例えば以下のようなことができます。</p>\n<blockquote>\n<ul>\n<li>変数によって名前をつけることができる。</li>\n<li>手続きに引数として渡すことができる。</li>\n<li>手続きの返り値になることができる。</li>\n<li>データ構造に組み込むことができる。</li>\n</ul>\n</blockquote>\n<p>Lispにおいて手続きはファーストクラスです。</p>\n<h2 id=\"2-データを用いた抽象化の構築\" style=\"position:relative;\"><a href=\"#2-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E6%8A%BD%E8%B1%A1%E5%8C%96%E3%81%AE%E6%A7%8B%E7%AF%89\" aria-label=\"2 データを用いた抽象化の構築 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2 データを用いた抽象化の構築</h2>\n<p>複合データは、複数のデータの組み合わせです。</p>\n<h3 id=\"21-データ抽象化\" style=\"position:relative;\"><a href=\"#21-%E3%83%87%E3%83%BC%E3%82%BF%E6%8A%BD%E8%B1%A1%E5%8C%96\" aria-label=\"21 データ抽象化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 データ抽象化⼊⾨</h3>\n<p>Lispにはペアという複合構造があります。ペアは2つのデータの順序対です。</p>\n<p><code class=\"language-text\">cons</code>、<code class=\"language-text\">car</code>、<code class=\"language-text\">cdr</code>はペアに関する基本手続きです。<code class=\"language-text\">cons</code>はペアを生成します。<code class=\"language-text\">car</code>はペアの1つ目のデータを取り出します。<code class=\"language-text\">cdr</code>はペアの2つ目のデータを取り出します。</p>\n<p>データ抽象化は、抽象化のテクニックです。データ抽象化は、複合データがどのように構築されるかということを、その利用者から隠蔽します。</p>\n<p>コンストラクタは複合データを作成する手続きです。例えば有理数を複合データと表す場合は以下のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make-rat</span> n d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> n d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>セレクタは複合データからデータを取り出す手続きです。有理数のセレクタは以下のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">numer</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">denom</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">cons</code>はペアのコンストラクタ、<code class=\"language-text\">car</code>と<code class=\"language-text\">cdr</code>はペアのセレクタです。</p>\n<h4 id=\"212-抽象化の壁\" style=\"position:relative;\"><a href=\"#212-%E6%8A%BD%E8%B1%A1%E5%8C%96%E3%81%AE%E5%A3%81\" aria-label=\"212 抽象化の壁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1.2 抽象化の壁</h4>\n<p>例えば、有理数の加算手続きは、<code class=\"language-text\">make-rat</code>、<code class=\"language-text\">numer</code>、<code class=\"language-text\">denom</code>だけで作成できます。加算手続きの作者は、有理数の複合データオブジェクトの構成方法や、<code class=\"language-text\">cons</code>、<code class=\"language-text\">car</code>、<code class=\"language-text\">cdr</code>については何も知らなくて良いことに注目します。</p>\n<p>また、有理数を使って数学の宿題を解きたいとします。その場合、有理数の加算、減算、乗算、除算などの手続きだけでプログラムを書けるはずです。ここで、加算や減算が内部でどのように行われているのかを知る必要はありません。</p>\n<p>振り返ると、私達が<code class=\"language-text\">make-rat</code>を作成したとき、<code class=\"language-text\">cons</code>によってペアがSchemeの内部でどのように実現されているのかを知る必要はありませんでした。</p>\n<p>このように、コンストラクタとセレクタによって抽象化の壁ができていることに注目します。抽象化の壁は、異なる抽象レベルをつなぐためのインターフェースです。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/5aa9526333aefb455c6fc10a2be17041/89ed4/fig2.1.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 77.33516483516483%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'309\\'%20viewBox=\\'0%200%20400%20309\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M71%2018l-2%206v5H44l-25%201%2025%201h25v4l1%206c1%202%204%202%20131%202l132-1%201-6v-5h25l26-1-25-1h-26v-5l-1-5v10l-1%2012-131%201H72V19l130-1a3166%203166%200%20000-2C78%2016%2072%2016%2071%2018m193%2037c-2%201-2%202-1%202v5c0%202%200%202%201%201l1%201c-1%201%202%202%204%201h5l-1-2c-1%200-1-2%201-6l-1-1-2-2-1%201h-2l-1-1h-1c0-1-1-1-2%201m-122%202l1%203v1l-1%202%201%202%206%201h5V54h-6c-6%200-6%200-6%203m108-2v4l-1%204v1c2%200%203-2%203-3l1-1c0%202%202%201%202-1%201-1%201-1%201%201l-1%202v1c2%200%201%202-1%202-1%201%200%201%203%201l4-1-1-1h-3l2-1c1%200%202-1%202-5v-4h-5l-6%201M118%2079c-2%201-2%202-2%207v5H68a457%20457%200%20000%202h48v5l1%206%2085%201h84l-83-1-85-1-1-12%201-10h168v23l1-5v-6h49a467%20467%200%20000-2h-49v-5l-1-7H118m153%2037l-1%202v5c0%202%206%204%207%204h4l-1-2-1-2a516%20516%200%20011-5c-1%200-2%200-2-2h-7m-158%2025c-2%201-2%202-2%207v5H65l-46%201%2046%201h46v5l1-6%201-11h178v23h-89l-89%201h89c101%200%2091%201%2091-8v-4h46l46-1-46-1h-46v-4l-2-7-1-2h-88l-89%201m138%2037c-2%201-2%204-1%205v1l-1%202%201%201v3l2-1h8c1%201%202%200%200-2v-4c1-2%201-3-1-3l-1-2c0-2-2%200-2%203-1%201-1%201-1-1s-2-3-4-2m-113%2026l-2%206v5H78a634%20634%200%20000%202h58v4c0%209-6%208%2066%208%2071%200%2065%201%2065-8v-4h59a641%20641%200%20000-2h-59v-5l-1-5c-1-1-1%203-1%2011v12H139v-23l63-1a745%20745%200%20000-2c-59%200-63%200-64%202m12%2074h-1l-1%202v4h2l-1%201-1%203c0%203%201%204%203%202h7c2%202%203%201%202-1-2-1-2-2-1-5l1-4-1%201-2-1-1-2-1%201h-2c-1-2-3-2-3-1m178%200h-9v4c-1%204%200%204%203%204l2%201-2%201c-2%200-2%200%200%201l3%201h-3c-2%200-1%201%203%201h7l-2-3v-5c2-1%202-2%201-2v-2l-1-1h-2m-256%207v6h13v-13H72v7m63-6c-2%200-2%201-1%201v8c-1%201-1%201%201%201l1-3%201-2%201%201%202%201h1l-2%201v1c3%200%202%202%200%202-1%201%200%201%202%201l5-1-1-1h-2l2-1%201-1-1-1h-2l2-1%201-3v-4h-5l-6%201m128%200v3c1%201%201%202-1%203v1c1%200%202%201%201%203l1%202%201-3%201-3v3c0%202%200%203%204%203h4v-5c0-5%200-6-2-5l-1-2h-1c-2%202-5%202-5%200h-2\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/5aa9526333aefb455c6fc10a2be17041/f4a91/fig2.1.webp 728w,\n/static/5aa9526333aefb455c6fc10a2be17041/2e1e9/fig2.1.webp 1043w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/5aa9526333aefb455c6fc10a2be17041/beb58/fig2.1.png 728w,\n/static/5aa9526333aefb455c6fc10a2be17041/89ed4/fig2.1.png 1043w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/5aa9526333aefb455c6fc10a2be17041/beb58/fig2.1.png\"\n            alt=\"図2.1: 有理数パッケージ内の抽象化の壁\"\n            title=\"図2.1: 有理数パッケージ内の抽象化の壁\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>抽象化の壁により、複雑性が隠蔽されます。詳細の実装を後回しにして抽象的な設計に集中できます。各レベルの手続きは、1つ下のレベルの壁（インターフェース）に依存しています。したがって、あとから詳細の実装を変えたくなったとしても、（インターフェースを変更しない限り）修正は壁の内側だけで済みます。</p>\n<h4 id=\"213-データとは何か\" style=\"position:relative;\"><a href=\"#213-%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\" aria-label=\"213 データとは何か permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1.3 データとは何か</h4>\n<p>データとは、「コンストラクタ、セレクタ、満たさなければならない条件」によって定義されるものです。</p>\n<p>例えばペアの場合、コンストラクタは<code class=\"language-text\">cons</code>、セレクタは<code class=\"language-text\">car</code>と<code class=\"language-text\">cdr</code>、満たさなければならない条件は以下の2つです。</p>\n<ul>\n<li><code class=\"language-text\">(car (cons a b))</code>は<code class=\"language-text\">a</code>を返す</li>\n<li><code class=\"language-text\">(cdr (cons a b))</code>は<code class=\"language-text\">b</code>を返す</li>\n</ul>\n<p>このような性質を持つものなら、それがどのような詳細な実装を隠蔽していたとしても「ペア」データとして見えるでしょう。</p>\n<p>例えば、手続きだけでペアを実装する方法があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> x y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">m</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">z</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">p q</span><span class=\"token punctuation\">)</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">z</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">p q</span><span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">cons</code>、<code class=\"language-text\">car</code>、<code class=\"language-text\">cdr</code>を使う限り、ペアの利用者は、ここで定義されているペアと、Schemeが用意している本物のペアを区別できません。どちらも同じように振る舞い、問題なく利用できます。</p>\n<h4 id=\"221-列の表現\" style=\"position:relative;\"><a href=\"#221-%E5%88%97%E3%81%AE%E8%A1%A8%E7%8F%BE\" aria-label=\"221 列の表現 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.1 列の表現</h4>\n<p>列（sequence）は、データの順序付き集合です。</p>\n<p>リスト（list）は列の一種で、ペアによって構成されます。</p>\n<p>例えば、1、2、3、4というリストは以下のように構成できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">4</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">null</code>または<code class=\"language-text\">nil</code>はリストを終端します。または、空リストと考えることもできます。一般に、リストの先頭にhogeデータを追加するときは<code class=\"language-text\">(cons hoge list)</code>とします。ここで<code class=\"language-text\">(cons hoge null)</code>は、hogeのみを要素とする長さ1のリストになります。したがって、nullは空のリストであったと考えるのが自然です。</p>\n<p>リストの構造を「箱とポインタ表現」で表すと次のようになります。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/94b0e958dabd7312cfe0f009b4817a74/25304/fig2.4.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 42.30769230769231%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'169\\'%20viewBox=\\'0%200%20400%20169\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M64%2020h28v29H78v-5c0-4%200-6%202-6%202-1%201-5-2-6-3%200-4%202-2%205l1%207v5H64l7%201h6v7l-1%208v4c1%204%202%203%203-1v-3c-1%201-1-2-1-7v-8h21c24%200%2024%200%2024-9v-5h10c9%200%2012%200%2011-2h-21v-5l-1-7c-1-1-1%201-1%205v7h-5l-7-1c-2-2-5%200-5%203%200%202%204%203%205%201l7-1h5v5c0%208%200%208-15%208H93V20H64m83%200l-1%2015c0%2015%200%2015%209%2015h6v9c0%2012%200%2014%201%2012l1-6-1-7v-8h21l21-1h-27V20h14c7%200%201-1-15-1l-29%201m84%200l-1%2015c0%2015%200%2015%209%2015h6v10c0%2010%200%2013%202%2012V50h20l21-1h-27V20h14c7%200%201-1-15-1l-29%201m84%200l-1%2014v14l1-13%201-14%2015-1h13v29h-13v-5l2-7c1-1%201-3-1-4-3-2-6%201-4%204l1%207v5h-6l-6%201h12v22c2%201%202-2%202-12V50h21c15%200%2017-1%208-1h-13l13-14%2014-15c-1-2-57-1-59%200m-167%201v27l7%201h6v-5l-1-7c-2-2-1-5%202-5s4%203%202%205l-1%207v5h13V20h-13l-15%201m84%200v27l7%201h6v-5l-1-7c-2-2-1-5%202-5s4%203%202%205l-1%207v5h13V20h-13l-15%201m57%201l1%207v5h-6l-7-1c-3-2-6%201-3%204%201%202%201%202%204%201l7-2h5v11l1-6v-5h10c10%200%2013%200%2012-2h-22v-5c0-6-1-9-2-9v2m56%2012v14l14-13%2013-14-13-1h-14v14m-139-6v6h-5l-8-1c-2-2-5%200-5%203%200%202%204%203%205%201l8-1h5v11l1-6v-5h22c1-2-2-2-12-2h-10v-6l-1-6v6M30%20140v8h14v-16H30v8m193-7c-4%200-6%200-5%201v6c1%202%201%203-1%204h2c1%200%202-1%201-2l1-3v-1l-1-2%202-2c1%200%202%204%201%2011%200%202%202%201%203-1s1-2%201%200%200%203%203%203l2-1h-2c-2%200-3-2%200-3%201-1%202-10%200-10h-7\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/94b0e958dabd7312cfe0f009b4817a74/f4a91/fig2.4.webp 728w,\n/static/94b0e958dabd7312cfe0f009b4817a74/39634/fig2.4.webp 963w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/94b0e958dabd7312cfe0f009b4817a74/beb58/fig2.4.png 728w,\n/static/94b0e958dabd7312cfe0f009b4817a74/25304/fig2.4.png 963w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/94b0e958dabd7312cfe0f009b4817a74/beb58/fig2.4.png\"\n            alt=\"図2.4: ペアの鎖として表現された列1, 2, 3, 4\"\n            title=\"図2.4: ペアの鎖として表現された列1, 2, 3, 4\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<h3 id=\"23-記号データ\" style=\"position:relative;\"><a href=\"#23-%E8%A8%98%E5%8F%B7%E3%83%87%E3%83%BC%E3%82%BF\" aria-label=\"23 記号データ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 記号データ</h3>\n<p>クォート（quote）は、データオブジェクトそのものを表現するための特殊形式です。<code class=\"language-text\">a</code>は、「変数aの値」に評価されます。一方で<code class=\"language-text\">'a</code>はシンボル<code class=\"language-text\">a</code>そのものに評価されます。<code class=\"language-text\">(+ 1 2)</code>は<code class=\"language-text\">3</code>に評価されます。一方で<code class=\"language-text\">'(+ 1 2)</code>は、シンボル<code class=\"language-text\">+</code>と<code class=\"language-text\">1</code>と<code class=\"language-text\">2</code>のリストである、<code class=\"language-text\">(+ 1 2)</code>に評価されます。</p>\n<p><code class=\"language-text\">'a</code>は<code class=\"language-text\">(quote a)</code>を短く書く記法で、どちらも同じ意味です。</p>\n<h3 id=\"24-抽象データの多重表現\" style=\"position:relative;\"><a href=\"#24-%E6%8A%BD%E8%B1%A1%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%A4%9A%E9%87%8D%E8%A1%A8%E7%8F%BE\" aria-label=\"24 抽象データの多重表現 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 抽象データの多重表現</h3>\n<p>システムへの要求が多い場合、複数のデータ表現を1つのシステム内で同時に扱いたいことがあります。</p>\n<p>例えば、複素数は直交形式でも極座標形式でも表せます。さらに、どちらの形式が良いかは、それをどのような計算で利用するかによって変わります。したがって、1つのシステムで両方の形式を同時に扱えると便利です。</p>\n<p>タイプタグは、データオブジェクトの型（タイプ）を見分けるためのタグです。例えば、直交形式の複素数は<code class=\"language-text\">'(rectangular (1 2))</code>、極座標形式の複素数は<code class=\"language-text\">(polar (4 5))</code>のように表せます。</p>\n<p>ジェネリック演算とは、複数の型のデータを扱える手続きです。例えば、ジェネリックな実部セレクタ<code class=\"language-text\">real-part</code>があるとします。これは直交形式の複素数に適用されると、単にその実部成分を返します。極座標形式の複素数に適用されると、三角関数を駆使して実部を計算して返します。</p>\n<p>ジェネリック演算を実装する3つのスタイルがあります。</p>\n<p>明示的なディスパッチスタイルは、各ジェネリック演算が、渡されたデータの種類（タイプタグ）によって処理を分岐するスタイルです。プログラムを演算の種類によってグループ化しているといえます。</p>\n<p>メッセージパッシングスタイルは、各データオブジェクトが、渡された演算の種類（メッセージ）によって処理を分岐するスタイルです。プログラムをデータの種類によってグループ化しているといえます。これはOOPに繋がります。</p>\n<p>データ主導スタイルは、以下のようなテーブルを内部に持つことで、適切な手続きを適用するスタイルです。このスタイルでは、手続きの集合をパッケージと呼びます。パッケージは、自身が公開したい手続きをテーブルに登録します。データ主導スタイルでは、パッケージを演算の種類によっても、データの種類によってもグループ化できます。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/48102386fdfcca2c1ad537b87df7e197/b20c8/fig2.22.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 45.604395604395606%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'183\\'%20viewBox=\\'0%200%20400%20183\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M224%2038v7h-60l-60%201h120v43l1%2044V46h79l79-1H225v-7l-1-7v7M75%20161v6h12v-12H75v6\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/48102386fdfcca2c1ad537b87df7e197/f4a91/fig2.22.webp 728w,\n/static/48102386fdfcca2c1ad537b87df7e197/5bfdb/fig2.22.webp 1209w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/48102386fdfcca2c1ad537b87df7e197/beb58/fig2.22.png 728w,\n/static/48102386fdfcca2c1ad537b87df7e197/b20c8/fig2.22.png 1209w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/48102386fdfcca2c1ad537b87df7e197/beb58/fig2.22.png\"\n            alt=\"図2.22: 複素数システム演算のテーブル\"\n            title=\"図2.22: 複素数システム演算のテーブル\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>新しいデータの種類が頻繁に追加される場合、データの種類によってプログラムをグループ化している方が有利です。演算の種類によってプログラムをグループ化している場合、追加するコードが散らばってしまうことになります。新しい演算の種類が頻繁に追加される場合は逆になります。</p>\n<h2 id=\"3-モジュール性オブジェクト状態\" style=\"position:relative;\"><a href=\"#3-%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%80%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%8A%B6%E6%85%8B\" aria-label=\"3 モジュール性オブジェクト状態 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3 モジュール性、オブジェクト、状態</h2>\n<h3 id=\"31-代と局所状態\" style=\"position:relative;\"><a href=\"#31-%E4%BB%A3%E3%81%A8%E5%B1%80%E6%89%80%E7%8A%B6%E6%85%8B\" aria-label=\"31 代と局所状態 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 代⼊と局所状態</h3>\n<blockquote>\n<p>オブジェクトのふるまいがその過去に影響されるとき、そのオブジェクトは“状態を持つ”と⾔います。</p>\n</blockquote>\n<h4 id=\"311-局所状態変数\" style=\"position:relative;\"><a href=\"#311-%E5%B1%80%E6%89%80%E7%8A%B6%E6%85%8B%E5%A4%89%E6%95%B0\" aria-label=\"311 局所状態変数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.1 局所状態変数</h4>\n<p><code class=\"language-text\">set!</code>、<code class=\"language-text\">set-car!</code>、<code class=\"language-text\">set-cdr!</code>は代入のための特殊形式です。</p>\n<p><code class=\"language-text\">(set! a 1)</code>は、変数<code class=\"language-text\">a</code>に<code class=\"language-text\">1</code>を代入します。</p>\n<p><code class=\"language-text\">(set-car! pair 1)</code>は、<code class=\"language-text\">pair</code>のcarに<code class=\"language-text\">1</code>を代入します。</p>\n<p><code class=\"language-text\">(set-cdr! pair 1)</code>は、<code class=\"language-text\">pair</code>のcdrに<code class=\"language-text\">1</code>を代入します。</p>\n<h4 id=\"312-代を導する利点\" style=\"position:relative;\"><a href=\"#312-%E4%BB%A3%E3%82%92%E5%B0%8E%E3%81%99%E3%82%8B%E5%88%A9%E7%82%B9\" aria-label=\"312 代を導する利点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.2 代⼊を導⼊する利点</h4>\n<p>反復版の階乗計算では、状態を表す3つの変数を毎回<code class=\"language-text\">fact-iter</code>に渡していました。</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">fact-iter</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">fact-iter</span> product counter max-count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">></span> counter max-count<span class=\"token punctuation\">)</span>\n    product\n    <span class=\"token punctuation\">(</span><span class=\"token function\">fact-iter</span>\n \t <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> counter product<span class=\"token punctuation\">)</span>\n \t <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> counter <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n \t max-count\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</blockquote>\n<p>代入を用いることで、毎回変数を渡す必要はなくなり、代わりに<code class=\"language-text\">fact-iter</code>を呼び出す前に変数を変更するだけで良くなります。</p>\n<h4 id=\"313-代を導することのコスト\" style=\"position:relative;\"><a href=\"#313-%E4%BB%A3%E3%82%92%E5%B0%8E%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AE%E3%82%B3%E3%82%B9%E3%83%88\" aria-label=\"313 代を導することのコスト permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.3 代⼊を導⼊することのコスト</h4>\n<p>代入を導入することのコストは、それによって単純な置換モデルが使用できなくなることです。例えば、導入前は、変数<code class=\"language-text\">a</code>の値が常に一定であったため、いつでも<code class=\"language-text\">a</code>を<code class=\"language-text\">1</code>に置換できました。導入後は、変数<code class=\"language-text\">a</code>の値が代入の前後で変化するかもしれず、単純に置換できなくなります。</p>\n<p>この前後を考えるために、計算モデルに時間の概念が必要になりました。置換モデルには時間の概念はありませんでした。時間は、並行プログラミングを考える上でさらに難しい問題となります。</p>\n<p>参照透明性、または参照透過性（referentially transparent）とは、ある式のある部分Aを、Aの値で置換してもプログラム全体の動作が変わらないことです。代入は、参照透過性を破る代表的な機能の1つです。例えば、グローバル変数を参照している手続きがあるとします。代入がない場合は、手続き内の変数を、その値で置換できます。代入がある場合は、変数を参照するタイミングによって、その値が異なります。したがって、単一の値に置換できません。</p>\n<p>関数型プログラミング（functional programming）とは、参照透過性を維持するプログラミングスタイルです。本文では、代入を使用しないプログラミングスタイルと説明されます。これは、1章と2章でやってきたようなことです。</p>\n<p>命令型プログラミング（imperative programming）とは、参照透過性を維持しないプログラミングスタイルです。本文では、代入を使用するプログラミングスタイルと説明されます。</p>\n<h3 id=\"32-評価の環境モデル\" style=\"position:relative;\"><a href=\"#32-%E8%A9%95%E4%BE%A1%E3%81%AE%E7%92%B0%E5%A2%83%E3%83%A2%E3%83%87%E3%83%AB\" aria-label=\"32 評価の環境モデル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 評価の環境モデル</h3>\n<p>代入の導入により、新たに環境モデルを導入します。</p>\n<p>環境とは、フレームの順序付き集合です。ある環境Aの次にある環境Bは、Aの外側の環境（enclosing environment）です。</p>\n<p>フレームとは、束縛の集合です。</p>\n<p>束縛とは、変数と値の対です。</p>\n<p>注意：4章の実装にもとづいた記述になっているため、本文のニュアンスと若干違うかもしれません。</p>\n<p>グローバル環境は、一番外側の環境です。基本手続きなどの束縛を持っています。</p>\n<p>（ある時点で）ある環境の変数を参照するには、その環境の先頭のフレームから始めて、外に向かって束縛を探索していきます。束縛が見つからない場合、その変数は未束縛（unbound）であるといいます。</p>\n<h4 id=\"321-評価規則\" style=\"position:relative;\"><a href=\"#321-%E8%A9%95%E4%BE%A1%E8%A6%8F%E5%89%87\" aria-label=\"321 評価規則 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1 評価規則</h4>\n<p>環境モデルの評価規則は、置換モデルと似ています。</p>\n<blockquote>\n<p>組み合わせを評価するには、</p>\n<ol>\n<li>組み合わせ演算子の部分式を評価する。</li>\n<li>演算子となっている部分式の値を、被演算子となっている部分式の値に適用する。</li>\n</ol>\n</blockquote>\n<p>ただし、複合手続きのモデルと適用の方法が異なります。</p>\n<p>複合手続きは、環境と本体の対です。これはクロージャとも呼ばれます。複合手続きが定義される際、そのときの環境を自身に記録します。</p>\n<p>複合手続きの適用は次の手順によって実行されます。</p>\n<ol>\n<li>演算子の環境を外側に持つ、新しい環境を作成します。これは環境の継承（extend）とも呼ばれます。</li>\n<li>新しい環境の最初のフレームに引数の束縛を作成します。例えば、<code class=\"language-text\">(square 5)</code>の場合は<code class=\"language-text\">x</code>と<code class=\"language-text\">5</code>の束縛を作成します。</li>\n<li>新しい環境で演算子の本体を評価します。</li>\n</ol>\n<p>環境を図に描くと以下のようになります。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/abf7cba16dfe4e2bb29899961006b5a3/0fe32/fig3.3.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 60.43956043956044%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'242\\'%20viewBox=\\'0%200%20400%20242\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M176%2057l6%201%205%201v12h-73l36%201%2037%201v19l1%206%201-15V72h82a500%20500%200%2000-1-1h-81v-5c0-8-2-10-9-10-3%200-5%200-4%201m46%2018v17c0%2017%200%2018-6%2018-3%200-4%200-4-2l-1-2v2c0%202-1%202-4%202l-4-1c-1-2-5-1-6%201s3%204%205%202c3-2%209-1%209%201l1%203v-3c0-2%201-2%204-2%207%200%207-1%207-17l1-15-1-6-1%202M16%20198v13h12v-13H16m87%2018c-2%200-2%201-2%203a215%20215%200%20011%206v-2l1-2%201%202%202%204c1%201%202%201%202-1l1-1c1%201%202-1%203-6v-4h-4l-5%201\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/abf7cba16dfe4e2bb29899961006b5a3/f4a91/fig3.3.webp 728w,\n/static/abf7cba16dfe4e2bb29899961006b5a3/3f1f8/fig3.3.webp 1144w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/abf7cba16dfe4e2bb29899961006b5a3/beb58/fig3.3.png 728w,\n/static/abf7cba16dfe4e2bb29899961006b5a3/0fe32/fig3.3.png 1144w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/abf7cba16dfe4e2bb29899961006b5a3/beb58/fig3.3.png\"\n            alt=\"図3.3: グローバル環境で(square 5)を評価することによって作られる環境\"\n            title=\"図3.3: グローバル環境で(square 5)を評価することによって作られる環境\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>2つの円が<code class=\"language-text\">square</code>のクロージャです。<code class=\"language-text\">square</code>はグローバル環境で定義されたと仮定しています。そのため、クロージャの環境ポインタはグローバルを指しています。E1は<code class=\"language-text\">(square 5)</code>によって継承された新しい環境です。この環境は、2つのフレームの順序集合です。</p>\n<h3 id=\"34-並性-期限厳守\" style=\"position:relative;\"><a href=\"#34-%E4%B8%A6%E6%80%A7-%E6%9C%9F%E9%99%90%E5%8E%B3%E5%AE%88\" aria-label=\"34 並性 期限厳守 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4 並⾏性: 期限厳守</h3>\n<p>シリアライザ（serializer）は、手続きをとり、シリアル化された手続きを返す手続きです。同じシリアライザによってシリアライズされた手続きは、それが直列に実行される（並行に実行されることはない）ことが保証されます。シリアライザはミューテックスによって実装できます。</p>\n<p>ミューテックス（mutex）は、獲得（acquire）と解放（release）によって操作するデータオブジェクトです。1度ミューテックスが獲得されると、他の獲得は、それが解放されるまで待たされます。</p>\n<p>セマフォ（semaphore）は、ミューテックスを同時にn回まで獲得できるようにしたものです。</p>\n<p>ミューテックスおよびセマフォは、<code class=\"language-text\">test-and-set!</code>によって実装できます。</p>\n<p><code class=\"language-text\">test-and-set!</code>は、変数の参照（test）と代入（set）を一括で直列に（アトミックに）行う基本演算です。これがどのように実現されるかはシステムによります。</p>\n<p>アービタ（arbiter）は、<code class=\"language-text\">test-and-set!</code>のようなアトミックな演算が同時刻に発生した場合に、どの演算を優先させるかを決定するメカニズムです。</p>\n<p>最新のマルチプロセスシステムでは、シリアライザは、より新しいバリア同期（barrier synchronization）などの仕組みに取って代わられつつあることにも注意します。</p>\n<h3 id=\"35-ストリーム\" style=\"position:relative;\"><a href=\"#35-%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0\" aria-label=\"35 ストリーム permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.5 ストリーム</h3>\n<p>ストリームとは、遅延リストです。</p>\n<p>遅延リストとは、リストの一部が遅延オブジェクトであるリストです。</p>\n<p>遅延オブジェクトとは、あるデータオブジェクトの評価を任意の時点まで遅延させることのできるオブジェクトです。遅延オブジェクトは、基本手続きである<code class=\"language-text\">delay</code>と<code class=\"language-text\">force</code>によって操作されます。遅延オブジェクトは、Alogolコミュニティではサンク（thunk）とも呼ばれます。式の評価を遅らせることは遅延評価とも呼ばれます。</p>\n<p><code class=\"language-text\">(delay a)</code>は、<code class=\"language-text\">a</code>を評価する代わりに遅延オブジェクトを返します。</p>\n<p><code class=\"language-text\">(force [delayed object])</code>は、遅延オブジェクトの内容を評価して返します。</p>\n<p>遅延オブジェクトはメモ化による最適化ができます。最初に<code class=\"language-text\">force</code>された値をオブジェクトがメモしておき、2回目以降の<code class=\"language-text\">force</code>ではメモの値を返します。この最適化は必要呼びとも呼ばれます。</p>\n<p>無限ストリームは、無限の要素を持つストリームです。ただし、実際は遅延オブジェクトによって必要な要素のみが計算されます。</p>\n<h2 id=\"4-メタ語抽象化\" style=\"position:relative;\"><a href=\"#4-%E3%83%A1%E3%82%BF%E8%AA%9E%E6%8A%BD%E8%B1%A1%E5%8C%96\" aria-label=\"4 メタ語抽象化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4 メタ⾔語抽象化</h2>\n<p>メタ⾔語抽象化とは、問題解決のために、それに適した新しい言語を構築することです。</p>\n<blockquote>\n<p>あるプログラミング⾔語の評価器（evaluator）（インタプリタ（interpreter）とも）とは、その⾔語の式に適用されたとき、その式\nを評価するのに必要なアクションを実⾏するような手続きを指します。</p>\n</blockquote>\n<h3 id=\"41-メタ循環評価器\" style=\"position:relative;\"><a href=\"#41-%E3%83%A1%E3%82%BF%E5%BE%AA%E7%92%B0%E8%A9%95%E4%BE%A1%E5%99%A8\" aria-label=\"41 メタ循環評価器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 メタ循環評価器</h3>\n<blockquote>\n<p>評価する⾔語と同じ⾔語で書かれた評価器は、メタ循環（metacircular）であると⾔われます。</p>\n</blockquote>\n<blockquote>\n<p>メタ循環評価器は、本質的には3.2節で記述した評価の環境モデルをSchemeによって形式化したものです。モデルには、以下の二つの基本部品があったことを思い出しましょう。</p>\n<ol>\n<li>組み合わせ（特殊形式以外の複合式）を評価するには、部分式をすべて評価し、それから演算子となる部分式の値を被演算子となる部分式の値に適用する。</li>\n<li>複合式を引数の集合に適用するには、手続きの本体を新しい環境で評価する。この環境を構築するには、手続きオブジェクトの環境部分にフレームをひとつ加えて拡張し、その中で手続きの仮引数を手続き適用対象の引数に束縛する。</li>\n</ol>\n<p>これら二つの規則は、評価プロセスの本質を記述したものです。環境の中で評価する式は引数に適用する手続きに帰着し、それが今度は新しい環境の中で評価する新しい式に帰着し…を繰り返し、環境の中で値が見つかる記号や直接適用する基本手続きにたどり着くまで続けるというのが、評価プロセスの基本サイクルです。</p>\n</blockquote>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/4aab038aa16736d98005dcbf8a1dbc44/6cf5a/fig4.1.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 59.75274725274725%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'239\\'%20viewBox=\\'0%200%20400%20239\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M177%2029c-7%201-17%206-24%2010l-15%2014%207-5c15-14%2028-19%2049-19%2020-1%2034%205%2049%2019l8%206c0-2-15-15-23-19-15-8-36-10-51-6m-73%205c-28%2037-28%2093%201%20132%205%207%205%207%202%207-1%200%200%202%204%203l5%203-2-6c-1-4-2-5-3-4-1%202-2%201-9-8-24-37-24-86%201-123%204-7%205-10%201-4m178-2l5%208c12%2019%2017%2036%2016%2060%200%2021-2%2031-10%2048-6%2012-7%2013-4%2011%203-4%2010-20%2012-29%209-29%204-62-11-88l-8-10M135%2057a75%2075%200%2000-8%2071%2073%2073%200%2000111%2030c0-2-1-1-4%201a74%2074%200%2001-74%203c-15-7-31-28-35-42%200-3%200-3%203%201%204%205%209%209%2015%2012s20%204%2027%202c5-2%2015-9%2015-11l-4%202a35%2035%200%2001-56-14c-5-14%200-39%2011-54l2-4-3%203m116-2l3%206c4%205%209%2017%209%2019s0%202-2%200c-2-4-8-10-9-10l3%205c8%208%2010%2015%2010%2026%200%2018-6%2034-19%2048-5%204-8%208-7%208%202%200%2015-15%2019-21%207-13%208-21%208-36%200-13%200-15-2-22-3-10-13-27-13-23M24%20196v6l1%205h5l6%201v-13h-6l-6%201\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/4aab038aa16736d98005dcbf8a1dbc44/f4a91/fig4.1.webp 728w,\n/static/4aab038aa16736d98005dcbf8a1dbc44/2cb6c/fig4.1.webp 1211w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/4aab038aa16736d98005dcbf8a1dbc44/beb58/fig4.1.png 728w,\n/static/4aab038aa16736d98005dcbf8a1dbc44/6cf5a/fig4.1.png 1211w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/4aab038aa16736d98005dcbf8a1dbc44/beb58/fig4.1.png\"\n            alt=\"図4.1: eval-applyサイクルが明らかにするコンピュータ⾔語の本質\"\n            title=\"図4.1: eval-applyサイクルが明らかにするコンピュータ⾔語の本質\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<blockquote>\n<p>eval は、引数として式と環境を取り、式を分類して評価を振り分けます。</p>\n</blockquote>\n<p>applyは、引数として手続きと、それを適用する引数リストを取り、環境をextendして手続きを適用します。基本手続きと複合手続きの2種類を扱います。</p>\n<p>メモ：あまりにも重要なので、ほぼそのまま抜き出しています。</p>\n<h3 id=\"42-schemeの変異版--遅延評価\" style=\"position:relative;\"><a href=\"#42-scheme%E3%81%AE%E5%A4%89%E7%95%B0%E7%89%88--%E9%81%85%E5%BB%B6%E8%A9%95%E4%BE%A1\" aria-label=\"42 schemeの変異版  遅延評価 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 Schemeの変異版 — 遅延評価</h3>\n<p>メタ循環評価器を拡張して、正規順序であり、引数の評価が基本手続きで必要になるまで遅延されるSchemeを作成します。</p>\n<p>まず、メタ循環評価器に遅延オブジェクト（サンク）を組み込みます。</p>\n<p>複合手続きの適用の際に引数を評価するのをやめて、代わりに<code class=\"language-text\">delay</code>によって式を遅延オブジェクトで包みます。</p>\n<p>基本手続きの適用や<code class=\"language-text\">if</code>の条件部、REPLの表示部分など、実際の値が必要である場合に<code class=\"language-text\">force</code>するようにします。</p>\n<p>遅延評価を導入することで、無限ストリームを素直に表現できるようになります。</p>\n<p>4.3 Schemeの変異版 — ⾮決定性計算</p>\n<p>メタ循環評価器を拡張して、非決定性計算と呼ばれるプログラミングパラダイムを導入します。それは以下のようなものです。</p>\n<p><code class=\"language-text\">amb</code>は非決定性計算のための特殊形式であり、式を曖昧に返します。</p>\n<p>例えば、<code class=\"language-text\">(amb 1 2 3)</code>を評価し、1が選択されたとします。そのまま計算が進められていき、<code class=\"language-text\">(amb)</code>を評価するとします。<code class=\"language-text\">(amb)</code>は、返せる式がないため失敗を意味します。したがって、評価器は<code class=\"language-text\">(amb 1 2 3)</code>で1を選択したのが間違いだったと判断し、時間を<code class=\"language-text\">(amb 1 2 3)</code>の時点に巻き戻し、今度は2を選択します。更に失敗すると同様に3が選択され、さらに失敗すると<code class=\"language-text\">(amb 1 2 3)</code>自体も失敗し、それ以前の<code class=\"language-text\">amb</code>に時間が巻き戻ります。すべての<code class=\"language-text\">amb</code>が失敗するとそれ以上やることはなくなります。</p>\n<p>評価機は、evalとapplyで環境に加えて継続を渡し合います。</p>\n<p>継続とは、ある時点での残りの計算（をするために必要なデータ）です。</p>\n<p>本実装では、継続は複合手続き（ラムダ式によって作られるクロージャ）です。</p>\n<p>evalとapplyは、成功継続と失敗継続を渡し合います。成功継続とは、評価が成功した場合に呼ばれる継続です。失敗継続とは、評価が失敗したときに呼ばれる継続で、その場合変数の代入などが復元され、直前の<code class=\"language-text\">amb</code>の選択に処理が巻き戻ります。</p>\n<h4 id=\"441-推論的情報検索\" style=\"position:relative;\"><a href=\"#441-%E6%8E%A8%E8%AB%96%E7%9A%84%E6%83%85%E5%A0%B1%E6%A4%9C%E7%B4%A2\" aria-label=\"441 推論的情報検索 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4.1 推論的情報検索</h4>\n<p>メタ循環評価器を拡張して、論理プログラミングパラダイムを導入し、情報検索のためのデータベースインターフェースを実現します。ここで実装する言語は、クエリ言語（query language）と呼ぶことにします。</p>\n<p>表明（assertion）は、データベースにおけるデータです。<code class=\"language-text\">(job (Hacker Alyssa P) (computer programmer))</code>は表明です。</p>\n<p>クエリは、ユーザーからのシステムへの問い合わせです。<code class=\"language-text\">(job ?x ( computer programmer ))</code>はクエリです。<code class=\"language-text\">?x</code>はパターン変数です。ここでは<code class=\"language-text\">(job (Hacker Alyssa P) (computer programmer))</code>がヒットします。また、<code class=\"language-text\">and</code>や<code class=\"language-text\">or</code>、<code class=\"language-text\">not</code>を使って複数のクエリをつなげた複合クエリも作成できます。</p>\n<p>規則は、クエリの抽象です。以下は規則です。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">rule</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">computer-programmer</span> ?who<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">job</span> ?who <span class=\"token punctuation\">(</span><span class=\"token function\">computer</span> programmer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">(computer-programmer ?who)</code>は規則の結論です。<code class=\"language-text\">(job ?who (computer programmer))</code>は規則の本体です。ここで<code class=\"language-text\">(computer-programmer ?x)</code>を入力すると<code class=\"language-text\">(computer-programmer (Hacker Alyssa P))</code>がヒットします。</p>\n<p>規則は、Schemeにおける手続きに似ていますが、規則を適用する際の引数に変数が現れうるという特徴があります。</p>\n<p>パターンマッチングは、2つのパターンマッチするかを検証し、変数と値の束縛を作成することです。主にクエリと表明に対して使用されます。</p>\n<blockquote>\n<p>例えば、データリスト<code class=\"language-text\">((a b) c (a b))</code>は、パターン<code class=\"language-text\">(?x c ?x)</code>にマッチし、このときパターン変数<code class=\"language-text\">?x</code>は<code class=\"language-text\">(a b)</code>に束縛されます。</p>\n</blockquote>\n<p>ユニフィケーションまたは単一化とは、2つのパターンがマッチするかを検証し、束縛を作成することです。ここで、クエリと表明のどちらにも変数や値が現れうるのが難しいところです。束縛は変数と値、変数と変数になる場合があります。値と値の束縛は自明なので作成されません。したがって、ユニフィケーションは、パターンマッチングの一般化でもあります。主に規則の適用時に、クエリと規則の結論部分に対して使われます。</p>\n<p>この言語の強力な点は、規則に対して多方向の計算ができるというところです。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token comment\">; 以下の規則を定義する</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">rule</span> <span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ?y ?y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">rule</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">?u</span> . ?v<span class=\"token punctuation\">)</span> ?y <span class=\"token punctuation\">(</span><span class=\"token function\">?u</span> . ?z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> ?v ?y ?z<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;;; Query input:</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">c</span> d<span class=\"token punctuation\">)</span> ?z<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; Query results:</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">c</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;;; Query input:</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b<span class=\"token punctuation\">)</span> ?y <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; Query results:</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">c</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;;; Query input:</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> ?x ?y <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; Query results:</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">b</span> c d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">c</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">append-to-form</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"5-レジスタマシンによる計算\" style=\"position:relative;\"><a href=\"#5-%E3%83%AC%E3%82%B8%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AB%E3%82%88%E3%82%8B%E8%A8%88%E7%AE%97\" aria-label=\"5 レジスタマシンによる計算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5 レジスタマシンによる計算</h2>\n<p>Schemeで抽象的なレジスタマシンを定義し、その上にSchemeを実装します。これにより、例えば反復プロセスと再帰プロセスの違いについて明確になります。</p>\n<p>レジスタ（register）は、記憶素子です。</p>\n<p>スタック（stack）は、後入れ先出しのデータ構造です。任意のレジスタの値をpushしたりpopしたりできます。例えば、マシンがサブルーチンを呼び出すとき、レジスタの内容を後で復元するために使用されます。</p>\n<p>マシンは、一連の命令（instruction）を実行します。これはレジスタマシンの機械語にあたります。以下のような命令があります。</p>\n<ul>\n<li>goto：特定のラベルにジャンプします。</li>\n<li>assign：特定のレジスタへ値をセットします。値はレジスタまたはマシンの基本演算の結果です。</li>\n<li>perform：マシンの基本演算を実行します。</li>\n<li>test：マシンの基本演算を実行し、その結果が真であったかどうかを記憶します。</li>\n<li>branch：直前のtestの結果が真であれば特定のラベルにジャンプします。</li>\n<li>save：特定のレジスタをスタックにpushします。</li>\n<li>restore：スタックから値をpopし、特定のレジスタにセットします。</li>\n</ul>\n<p>マシンはGC（ガベージコレクション）を持つものとします。GCは不要になった（レジスタやスタックから到達できない）データオブジェクトを破棄する仕組みです。GCを実現するいくつかのアルゴリズムがあります。ストップ＆コピーは、本文で紹介されているアルゴリズムで、実行後に必要なデータオブジェクトの位置を圧縮（compacting）できるという利点があります。</p>\n<p>明示的制御評価器（explicit-control evaluator）は、Schemeのメタ循環評価器をレジスタマシンに実装したものです。簡単のために、ここではevalとapplyのみを実装し、それ以外はマシンの基本演算とします。</p>\n<p>明示的制御評価器では、ある手続きの最後（末尾）の処理が手続きの適用である場合、スタックに何も保存せず適用を処理できることを示します。これは、反復プロセスがメモリを消費せずに自身を再帰的に呼び出せる理由です。</p>\n<p>コンパイラ（compiler）は、ソース言語で書かれたプログラムを、そのマシンのネイティブ言語（機械語）で書かれたプログラムに変換します。ここでは、Schemeで書かれたプログラムを、レジスタマシンの命令列に変換します。コンパイラの構造はインタプリタに似ていますが、式をその場で評価するのではなく、評価のための等価な命令列を生成し、それらを集積するというところが違います。</p>\n<blockquote>\n<p>インタプリタはマシンをユーザープログラムのレベルに上げるもので、コンパイラはユーザープログラムを機械語のレベルに落とすものです。</p>\n</blockquote>\n<p>つまり、この章で実装したSchemeインタプリタがなければ、私達はレジスタマシンの機械語（命令列）でプログラミングすることになります。インタプリタのおかげで、マシンがユーザープログラムのレベルに引き上げられ、Schemeでプログラミングできるようになります。対象的に、コンパイラは私達が書くSchemeのプログラムをレジスタマシンの機械語に変換します。</p>\n<blockquote>\n<p>Scheme⾔語は（Scheme⾔語だけでなく、どんなプログラミング⾔語でも）、機械語の上に建てられた⼀貫性のある抽象化の⼀族と見なすことができます。</p>\n</blockquote>\n<blockquote>\n<p>インタプリタは、プログラム実⾏のステップがこれらの抽象化によって構成されていて、そのことによってプログラマに理解しやすくなっているため、対話的プログラム開発やデバッグに向いています。コンパイル済みコードは、プログラム実⾏のステップが機械語によって構成されており、またコンパイラは⾼レベルの抽象化の壁を越えて最適化を⾃由に⾏えるため、実⾏速度が速くなります。</p>\n</blockquote>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><code class=\"language-text\">'done</code>です。おつかれさまでした。もしこのノートが何かの役に立つのならうれしいです。</p>\n<p>ありがとうございました。</p>","frontmatter":{"title":"SICPの備忘録","date":"2023/07/29"},"fields":{"slug":"/SICPの備忘録/"},"id":"5dba01b8-593d-5295-b135-16df1c6295e5"},"firstImage":{"imageFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/5aa9526333aefb455c6fc10a2be17041/01c62/fig2.1.png","srcSet":"/static/5aa9526333aefb455c6fc10a2be17041/fb6b2/fig2.1.png 261w,\n/static/5aa9526333aefb455c6fc10a2be17041/52763/fig2.1.png 522w,\n/static/5aa9526333aefb455c6fc10a2be17041/01c62/fig2.1.png 1043w","sizes":"(min-width: 1043px) 1043px, 100vw"},"sources":[{"srcSet":"/static/5aa9526333aefb455c6fc10a2be17041/2c7e3/fig2.1.webp 261w,\n/static/5aa9526333aefb455c6fc10a2be17041/0010b/fig2.1.webp 522w,\n/static/5aa9526333aefb455c6fc10a2be17041/99ce7/fig2.1.webp 1043w","type":"image/webp","sizes":"(min-width: 1043px) 1043px, 100vw"}]},"width":1043,"height":806}}}},"relatedMarkdownRemarks":{"posts":[{"id":"3c14921d-1ba3-5a7a-93a2-757f3a03ee3a","frontmatter":{"draft":null}},{"id":"50d3cc2a-de7a-5b9a-a8d8-754415fe4d94","frontmatter":{"draft":null}},{"id":"0116f663-28d1-507a-b5ab-b189801dd408","frontmatter":{"draft":true}},{"id":"75696ec6-74a3-5046-8a3c-f39b36d92311","frontmatter":{"draft":null}},{"id":"7d6499d9-277c-5f07-b8b1-98ae40c50c42","frontmatter":{"draft":null}},{"id":"84bf9a79-dd68-55d1-a1b3-60ffd3784554","frontmatter":{"draft":null}},{"id":"f49ce388-e81c-5425-af59-9902f125c20f","frontmatter":{"draft":null}},{"id":"63f3c7ad-6c59-52b5-9816-78fd348955ff","frontmatter":{"draft":true}},{"id":"50951bb1-eb92-5663-a3d8-8f35f73a1322","frontmatter":{"draft":null}},{"id":"d29b4513-0609-5cfc-af49-817467dbed1f","frontmatter":{"draft":null}},{"id":"4d43646f-8aa6-52b6-b0b6-5160f0be2b05","frontmatter":{"draft":null}},{"id":"29b79017-f96d-5b04-8d01-5b8ee761ebed","frontmatter":{"draft":null}},{"id":"9f02de74-61a0-5daf-a048-1c1022e08fe4","frontmatter":{"draft":null}},{"id":"871ac696-39ea-5c64-94f3-5dc4b73b5770","frontmatter":{"draft":true}},{"id":"ebae7878-c4ee-505e-81e2-3d3fc47ea826","frontmatter":{"draft":true}},{"id":"e376b2d4-df91-5b82-af7a-a8d02763e922","frontmatter":{"draft":true}},{"id":"49cf25c1-03f6-575e-8c2f-638ccd6198ea","frontmatter":{"draft":null}},{"id":"73ab4455-f04d-5320-bf3a-90b9f7441d13","frontmatter":{"draft":null}},{"id":"a091877c-69b8-59f9-8963-1af334fd573c","frontmatter":{"draft":null}},{"id":"c7a5adfb-149b-5469-ba35-7421e2101951","frontmatter":{"draft":null}},{"id":"7d79eb4b-cd4a-5621-a67a-91d9a24dce05","frontmatter":{"draft":null}},{"id":"89ddbcc0-ed71-5a69-9d55-9677eab3e6cf","frontmatter":{"draft":null}},{"id":"ed7af7f9-75f5-59be-9063-de564576eed7","frontmatter":{"draft":true}},{"id":"eba9aa6a-6e21-5f1b-a0eb-7b6bfb1e04f1","frontmatter":{"draft":null}},{"id":"4edc1b46-b395-5783-af6a-818b8fc9c2dc","frontmatter":{"draft":null}},{"id":"a190aac4-0483-5e02-b1d3-261f3b5f313a","frontmatter":{"draft":null}},{"id":"7a8fc278-a847-5b68-8b74-a83193ba3f55","frontmatter":{"draft":null}},{"id":"73d6ab42-b3e6-5663-a175-b1f3d69c29e1","frontmatter":{"draft":null}},{"id":"48c65a15-67ca-57d0-9edc-ebcb868f7ad2","frontmatter":{"draft":true}},{"id":"be594923-185e-5cca-95b6-5267b3c9fc8c","frontmatter":{"draft":null}},{"id":"3a3c4125-9986-53bb-8b96-ae29936c96ab","frontmatter":{"draft":null}},{"id":"01deffb8-0d62-54c6-9e41-20832cbc3c6e","frontmatter":{"draft":null}},{"id":"067a602f-4581-5707-b896-73190dd8c889","frontmatter":{"draft":null}},{"id":"0c5568c9-6d87-56ed-ab0e-caeb9c1aafa4","frontmatter":{"draft":null}},{"id":"1086a735-7173-58cc-a813-c540a563aedf","frontmatter":{"draft":false}},{"id":"1162dccb-e1bf-576d-a5c6-0993394feb0a","frontmatter":{"draft":true}},{"id":"12222bfa-2e8e-51ee-99d8-8a19902351f5","frontmatter":{"draft":null}},{"id":"1509de3c-7308-5e40-a885-f5ebdb089774","frontmatter":{"draft":null}},{"id":"2239c111-61d9-556e-9045-9e3707553db4","frontmatter":{"draft":true}},{"id":"27f10a38-0ecb-539f-a717-7e40a41bbd10","frontmatter":{"draft":null}},{"id":"2cfd9e33-b4e1-53e4-884d-d8a6760f3387","frontmatter":{"draft":true}},{"id":"2f30c3f1-0d66-590b-8dba-7836df701d46","frontmatter":{"draft":null}},{"id":"3908aafc-c8d3-5c67-821f-0866592449f2","frontmatter":{"draft":true}},{"id":"3b696b96-130d-50de-a673-dc1367f32387","frontmatter":{"draft":null}},{"id":"46a22c41-5455-557c-85d4-973a6e2220ee","frontmatter":{"draft":null}},{"id":"4ed3b747-2001-54f4-9661-3acab89ce275","frontmatter":{"draft":null}},{"id":"5888c50d-8414-5e8f-b0dc-28a31b29053d","frontmatter":{"draft":null}},{"id":"69a4aa90-b728-522c-b34f-abee49825c45","frontmatter":{"draft":true}},{"id":"75550af2-8134-5467-a07d-abbb5a4f6b7c","frontmatter":{"draft":true}},{"id":"7778d041-a5bf-536a-a36f-c0dbc5e08ac7","frontmatter":{"draft":true}},{"id":"78349b16-6e41-5fef-ae38-bcdc5ff297ef","frontmatter":{"draft":true}},{"id":"82d43655-ea2a-52cd-97a3-16b7b28ad150","frontmatter":{"draft":null}},{"id":"8b3e46c2-1a1e-5af0-8900-7972c7285d15","frontmatter":{"draft":null}},{"id":"8f7b1b24-7738-5b97-bfb6-fd763f11a664","frontmatter":{"draft":true}},{"id":"961ec1e6-3f2b-59d9-a33f-dad76cf67f47","frontmatter":{"draft":null}},{"id":"97f01467-e3a1-58e1-b2a4-db77354cc1a3","frontmatter":{"draft":null}},{"id":"9f24363b-ee3e-54bf-8a18-46ea3b269bea","frontmatter":{"draft":null}},{"id":"a6c64123-b824-5224-8027-90eb12040396","frontmatter":{"draft":null}},{"id":"b4251348-b618-5b5b-a2c8-e4c6b2431b83","frontmatter":{"draft":true}},{"id":"bfee69af-7d7f-5d87-9680-d2e9b60f8416","frontmatter":{"draft":null}},{"id":"c2249b7b-b97e-5cf4-8ea9-8024e96851b7","frontmatter":{"draft":true}},{"id":"c2db052c-95c6-5094-935b-9eb39f5c762a","frontmatter":{"draft":null}},{"id":"c5e2431a-cf05-5024-b833-e1c69f680d44","frontmatter":{"draft":null}},{"id":"c6def021-b8da-5dbe-ad3e-811d9286424d","frontmatter":{"draft":true}},{"id":"cbdf3192-973c-5d87-9cf1-bb9110e9a169","frontmatter":{"draft":null}},{"id":"d4d1afa4-f2f9-5942-ae36-2826fb938af5","frontmatter":{"draft":null}},{"id":"db26c6b9-37b4-5cc4-b1ec-c61dc667863e","frontmatter":{"draft":null}},{"id":"dd0c41cf-0a03-5b89-b5a2-f64859aeae63","frontmatter":{"draft":null}},{"id":"e322eac2-bd89-5347-b20d-d050d303a6be","frontmatter":{"draft":null}},{"id":"e4fb8478-b1ad-59eb-95e8-8c5e0500d3f4","frontmatter":{"draft":true}},{"id":"e83330dc-2312-5ae6-95fa-53e86909f42b","frontmatter":{"draft":true}},{"id":"f06a6ae0-e961-504c-8dab-a60489c0557a","frontmatter":{"draft":true}},{"id":"f5a25ce1-67a6-51b2-9bf1-f9fbacb41ad1","frontmatter":{"draft":true}},{"id":"fd6eab68-17d3-5395-8b2b-54a6efe43ebb","frontmatter":{"draft":null}}]}},"pageContext":{"id":"5dba01b8-593d-5295-b135-16df1c6295e5"}},"staticQueryHashes":["1530353647","2576926420","63159454"]}