{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/TypeScriptの型で素数を求めたい/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sititou70.github.io"}},"markdownRemark":{"excerpt":"初心者ながら急にTSの型で遊びたくなり，エラトステネスのふるいを使って素数を求めました． リポジトリ：sititou70/ts-prime-number-type TypeScriptとは TypeScript，あるいはTSとはプログラミング言語の一種であり，JavaScript…","html":"<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 256px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/bd6cef6475b68f2223800108dc5ec50c/8f3ef/ts-logo.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 100%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'400\\'%20viewBox=\\'0%200%20400%20400\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20200v200h401V0H0v200m307-13l-24%205-15%207c-7%205-14%2013-14%2016l-1%201c-1%200-4%209-5%2017-3%2016%207%2037%2023%2048a124%20124%200%200024%2011l9%205c10%204%2012%205%2016%209%2013%2013%206%2027-14%2030a82%2082%200%2001-32-3c-3%200-11-4-17-8l-7-4c-2%200-1%2037%200%2038l13%205c15%205%2056%205%2069%200%2012-5%2016-7%2022-13%2010-10%2013-17%2014-33%200-18-6-31-21-42l-25-14-27-14c-4-4-4-5-5-11%200-7%202-12%207-14l6-3c7-3%2032-2%2044%203l10%205%202%201%201-18c0-17%200-18-2-18l-3-1c-3-3-37-6-48-5M93%20207l1%2015h24l25%201v143h40v-72l1-71%2024-1h25v-31H93v16\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/bd6cef6475b68f2223800108dc5ec50c/f7232/ts-logo.webp 256w\"\n              sizes=\"(max-width: 256px) 100vw, 256px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/bd6cef6475b68f2223800108dc5ec50c/8f3ef/ts-logo.png 256w\"\n            sizes=\"(max-width: 256px) 100vw, 256px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/bd6cef6475b68f2223800108dc5ec50c/8f3ef/ts-logo.png\"\n            alt=\"ts logo\"\n            title=\"ts logo\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>初心者ながら急にTSの型で遊びたくなり，エラトステネスのふるいを使って素数を求めました．</p>\n<p>リポジトリ：<a href=\"https://github.com/sititou70/ts-prime-number-type\">sititou70/ts-prime-number-type</a></p>\n<h2 id=\"typescriptとは\" style=\"position:relative;\"><a href=\"#typescript%E3%81%A8%E3%81%AF\" aria-label=\"typescriptとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScriptとは</h2>\n<p>TypeScript，あるいはTSとはプログラミング言語の一種であり，JavaScriptと型システムの悪魔合体です．以下のコードを見てください．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"sititou70\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span></code></pre></div>\n<p>下線がついていない部分は通常のJavaScriptであり，下線の部分は <strong>型</strong> を表します．この例では<code class=\"language-text\">string</code>型の<code class=\"language-text\">name</code>変数に<code class=\"language-text\">\"sititou70\"</code>を代入しています．</p>\n<p>そして今回の記事では， <strong>JavaScriptを一切書かず，型システム（下線の部分）だけでプログラミングしよう</strong> と思います． <em>「何言ってんだコイツ」</em> と感じたあなたは正常です．感じなかったあなたはTSの変態です．</p>\n<h3 id=\"tsの型はチューリング完全\" style=\"position:relative;\"><a href=\"#ts%E3%81%AE%E5%9E%8B%E3%81%AF%E3%83%81%E3%83%A5%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0%E5%AE%8C%E5%85%A8\" aria-label=\"tsの型はチューリング完全 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TSの型はチューリング完全</h3>\n<p>もう数億回言われていることですが，<a href=\"https://github.com/microsoft/TypeScript/issues/14833\">TSの型システムはチューリング完全です</a>．これは簡単に言い換えると，我々はTSの型だけで何でも作れるということです．つまり，型だけで<a href=\"https://quramy.medium.com/%E3%83%8D%E3%82%BF-typescript-%E5%9E%8B%E3%83%91%E3%82%BA%E3%83%AB%E3%81%A7%E4%BD%9C%E3%82%8Bmini-interpreter-f21854cf3189\">ミニ電卓</a>も作れるし，<a href=\"https://github.com/jamiebuilds/json-parser-in-typescript-very-bad-idea-please-dont-use\">JSONパーサー</a>も作れるし，<a href=\"https://susisu.hatenablog.com/entry/2020/03/10/125000\">Brainfuckインタプリタ</a>も作れる．そして究極的には，TypeScriptもTSの型だけで作れるということになります（本末転倒）</p>\n<p>私も何か作ってみたい，とはいえ型初心者なので手頃な課題は無いかと考えた結果，エラトステネスのふるいで素数を求めることにしました．</p>\n<p>このような型パズル系の記事は既に2589番煎じだと思うので，本記事ではオリジナルな部分だけを詳しく書くように努めます．</p>\n<h2 id=\"step-1型のテスト環境を整える\" style=\"position:relative;\"><a href=\"#step-1%E5%9E%8B%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E3%81%88%E3%82%8B\" aria-label=\"step 1型のテスト環境を整える permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1：型のテスト環境を整える</h2>\n<p>私のような初心者にこそ，テストは重要だと思っています．TSの型をテストするには<a href=\"https://qiita.com/kgtkr/items/2a8290d1b1314063a524\">@kgtkrさんのアサーション型</a>や<a href=\"https://github.com/SamVerschueren/tsd\">SamVerschueren/tsd</a>などの方法がありますが，今回は<a href=\"https://github.com/dsherret/conditional-type-checks\">dsherret/conditional-type-checks</a>を使いました．好きなのを選べばいいと思います．</p>\n<p>これにより，次のようにテストが書けます．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token generic-function\"><span class=\"token function\">assert</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IsExact<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> hoge<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→<code class=\"language-text\">{ hoge: string }[\"hoge\"]</code>型は<code class=\"language-text\">string</code>型に評価されるべき．</p>\n<h2 id=\"step-2自然数を作る\" style=\"position:relative;\"><a href=\"#step-2%E8%87%AA%E7%84%B6%E6%95%B0%E3%82%92%E4%BD%9C%E3%82%8B\" aria-label=\"step 2自然数を作る permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2：自然数を作る</h2>\n<p>最終的には素数を求めたいのですが，型の世界には自然数すらありません．</p>\n<p><em>「いやいや，<code class=\"language-text\">1</code>型とか<code class=\"language-text\">2</code>型とかあるじゃん」</em></p>\n<p>と思われるかもしれませんが，それは単にリテラル型があるだけで，型同士の関係性が定義されていません．このままでは「1の次の数」すらわからないため，<code class=\"language-text\">1 + 1</code>すら計算できないのです．</p>\n<p>では他の人はどうしているのかというと，<a href=\"https://quramy.medium.com/%E3%83%8D%E3%82%BF-typescript-%E5%9E%8B%E3%83%91%E3%82%BA%E3%83%AB%E3%81%A7%E4%BD%9C%E3%82%8Bmini-interpreter-f21854cf3189\">こちらの記事</a>では<a href=\"https://ja.wikipedia.org/wiki/%E3%83%9A%E3%82%A2%E3%83%8E%E3%81%AE%E5%85%AC%E7%90%86\">ペアノの公理</a>を使っていました．なるほど，自然数といえばペアノさんですね．大学の講義でやったような，やってないような…</p>\n<p>Wikipedia君に聞いてみました．ペアノの公理とは，簡単に言えば<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X, x, f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span></span>によって自然数を定義するための条件です．ここで，<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span>は数の集合，<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span>はいかなる数の「後者」でもないもの（つまり一番はじめの数），そして<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">f: X \\rightarrow X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span>はある数の「後者」を一意に決める関数（つまり<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">1</span></span></span></span></span>の意味）です．公理の内容は割愛しますが，ともかく<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X, x, f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span></span>をうまく定義することで以下のような自然数の構造が得られるといいます．</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>↦</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>↦</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>↦</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">x \\mapsto f(x) \\mapsto f(f(x)) \\mapsto f(f(f(x))) \\mapsto \\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.313em;\"></span><span class=\"minner\">⋯</span></span></span></span></span></div>\n<p>なるほどね．まぁ <strong>論よりRUN</strong> ．難しい話は置いといて，とりあえず<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>N</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo separator=\"true\">,</mo><mi>Z</mi><mi>e</mi><mi>r</mi><mi>o</mi><mo separator=\"true\">,</mo><mi>S</mi><mi>u</mi><mi>c</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Natural, Zero, Succ)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mord mathnormal\">ero</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">cc</span><span class=\"mclose\">)</span></span></span></span></span>を以下のように実装してみます．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Natural</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Zero</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Succ<span class=\"token operator\">&lt;</span><span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> Natural<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>はい！自然数できました！わーい！🎉</p>\n<p><code class=\"language-text\">Natural</code>は自然数の集合で，お手製の自然数型です．<strong>自然数は0の配列型とし，その要素数によって数を表す</strong> ことにしました．<code class=\"language-text\">[0]</code>は1，<code class=\"language-text\">[0, 0]</code>は2，<code class=\"language-text\">[]</code>は0という具合です．</p>\n<p>この手の型パズルにおける自然数の定義方法は様々あるのですが，今回は扱いやすさの関係で配列型を用いました．（例えば，<code class=\"language-text\">Natural</code>型から<code class=\"language-text\">number</code>型への変換が，<code class=\"language-text\">['length']</code>プロパティで簡単に実現できる…など．）また，配列の中身の型は特に<code class=\"language-text\">0</code>でなくても良かったのですが， <em>打ちやすい</em> という理由から<code class=\"language-text\">0</code>を採用しました．ボタンを一個押すだけで打てますからね．テストコードで<code class=\"language-text\">Natural</code>型をたくさん書いたので，この点は結構重要でした．</p>\n<p><code class=\"language-text\">Zero</code>はゼロです．ゼロを自然数に含めたほうが後々便利なのでゼロは自然数です．数学あるある．</p>\n<p><code class=\"language-text\">Succ&lt;N></code>（サック）はNの「後者（successor）」に評価される型です．特に難しくないのでサックリと実装できました（激ウマギャグ）</p>\n<h2 id=\"step-3自然数ユーティリティ\" style=\"position:relative;\"><a href=\"#step-3%E8%87%AA%E7%84%B6%E6%95%B0%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3\" aria-label=\"step 3自然数ユーティリティ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3：自然数ユーティリティ</h2>\n<p><code class=\"language-text\">Natural</code>，<code class=\"language-text\">Zero</code>，<code class=\"language-text\">Succ</code>だけではあまりに不便なので，自然数に関するユーティリティを色々定義します．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Add<span class=\"token operator\">&lt;</span><span class=\"token constant\">N1</span> <span class=\"token keyword\">extends</span> Natural<span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span> <span class=\"token keyword\">extends</span> Natural<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">N1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">N2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NaturalToNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> Natural<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NumberToNatural<span class=\"token operator\">&lt;</span><span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"language-text\">Add</code>は足し算を計算する型です．数学的な定義にしたがえば<code class=\"language-text\">N1</code>に<code class=\"language-text\">Succ</code>を<code class=\"language-text\">N2</code>回適用するのが王道です．しかしここは<a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-rc/#variadic-tuple-types\">Variadic Tuple Types</a>でラクをしました．</p>\n<p><code class=\"language-text\">NaturalToNumber</code>は，<code class=\"language-text\">Natural</code>を<code class=\"language-text\">number</code>に変換するユーティリティです．前述したとおり<code class=\"language-text\">['length']</code>でサックリと書けました．</p>\n<p>そして問題の<code class=\"language-text\">NumberToNatural&lt;N extends number></code>についてです．これは，<code class=\"language-text\">number</code>を<code class=\"language-text\">Natural</code>に変換するユーティリティなのですが，ここでは，与えられた<code class=\"language-text\">N</code>と同じになるまで<code class=\"language-text\">Zero</code>に<code class=\"language-text\">Succ</code>を適用していくという愚直な方法しかとれません．つまり，<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mo>⋯</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f( \\cdots f(x) \\cdots )</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mclose\">)</span></span></span></span></span>を<code class=\"language-text\">N</code>と等しくなるまで行うということで，型の再帰をたくさんする必要があります．しかしTSには <strong>TS2589</strong> という再帰回数の制限があり，ナイーブな実装だと<code class=\"language-text\">NumberToNatural&lt;50></code>くらいでギブアップされます．TSくんさぁ…</p>\n<h3 id=\"型ハック1再帰呼び出しによるts2589の回避\" style=\"position:relative;\"><a href=\"#%E5%9E%8B%E3%83%8F%E3%83%83%E3%82%AF1%E5%86%8D%E5%B8%B0%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%AB%E3%82%88%E3%82%8Bts2589%E3%81%AE%E5%9B%9E%E9%81%BF\" aria-label=\"型ハック1再帰呼び出しによるts2589の回避 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>型ハック1：再帰呼び出しによるTS2589の回避</h3>\n<p>この制限を回避するには，<a href=\"https://qiita.com/kgtkr/items/eff20225e4bf9b159110\">TSのコードを改変したり</a>，<a href=\"https://qiita.com/kazatsuyu/items/44c1b012d66aae1dc2c0\">再帰を再帰して再帰したり（？）</a>といった方法があります．今回は一番シンプルな，<a href=\"https://susisu.hatenablog.com/entry/2020/09/12/214343\">オブジェクトのプロパティ内で再帰する</a>方法をとりました．@susisuさんありがとうございます．</p>\n<p>これはひとことで言えば，とっても <del>闇</del> ネストが深いオブジェクトに計算結果をくるんで後から取り出すという，一見して何の意味があるのかわからない操作でTS2589を回避するというものです．回避できる理由は割愛しますが，興味がある方は先程のリンク先を読んでください．</p>\n<p>というわけでTS2589回避のためのユーティリティも作ります．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ResultContainer<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> _<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ExtractResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">CONTAINER</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>くるまれた計算結果をコンテナと呼ぶことにしました．コンテナを表す<code class=\"language-text\">ResultContainer</code>型と，コンテナから計算結果を取り出す<code class=\"language-text\">ExtractResult&lt;CONTAINER></code>型を<a href=\"https://github.com/sititou70/ts-prime-number-type/blob/master/src/result_container.ts\">実装しました</a>．これで再帰し放題です！</p>\n<h2 id=\"step-4エラトステネスのふるいを実装する\" style=\"position:relative;\"><a href=\"#step-4%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E3%81%B5%E3%82%8B%E3%81%84%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\" aria-label=\"step 4エラトステネスのふるいを実装する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4：エラトステネスのふるいを実装する</h2>\n<p>この時点で我々ができる操作は，</p>\n<ul>\n<li>数の等価 / 不等価比較（<code class=\"language-text\">extends</code>で最初からできる）</li>\n<li>自然数（<code class=\"language-text\">Natural</code>）の表現と足し算</li>\n<li>配列への値の追加（Variadic Tuple Typesで最初からできる）</li>\n<li><code class=\"language-text\">Natural</code>と<code class=\"language-text\">number</code>の相互変換</li>\n<li>ループ（無制限の再帰呼び出し）</li>\n</ul>\n<p>くらいなものです．減算，乗算，除算もできませんし，剰余も求められませんし，数の大小比較も行えません．定義していませんから．</p>\n<p><em>「こんなんでエラトステネスのふるいが実装できるのか？」</em></p>\n<p>と思われるかもしれませんが，結論から言うと<a href=\"https://github.com/sititou70/ts-prime-number-type/blob/master/src/eratosthenes.ts\">できました</a>．おおまかにだけ説明すると，肝となるのは<code class=\"language-text\">StepFill</code>という型です．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">StepFill<span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">ARRAY</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">START</span> <span class=\"token keyword\">extends</span> Natural<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STEP</span> <span class=\"token keyword\">extends</span> Natural<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">VALUE</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">unknown</span>\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>この型は，配列<code class=\"language-text\">ARRAY</code>において，<code class=\"language-text\">START</code>番目の要素から<code class=\"language-text\">STEP</code>ごとに<code class=\"language-text\">VALUE</code>を代入するものです．これは，エラトステネスのふるいにおいて合成数をふるい落とす操作に相当し，アルゴリズム全体で最も難しい部分です．つまりこれが実装できればほとんど優勝なわけですが，配列を線形に走査しながら新しい配列へ適切な値を追加していくだけで<a href=\"https://github.com/sititou70/ts-prime-number-type/blob/28f860de19a483d1f4b1183e25e5c23dfa23cd79/src/eratosthenes.ts#L37\">実装できる</a>ので優勝しました 🏆</p>\n<h2 id=\"完成primenumbers型\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%88%90primenumbers%E5%9E%8B\" aria-label=\"完成primenumbers型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成！<code class=\"language-text\">PrimeNumbers</code>型！</h2>\n<p>愚直にエラトステネスのふるいを実装した結果，<code class=\"language-text\">PrimeNumbers&lt;MAX extends number></code>ができました．これは，<code class=\"language-text\">MAX</code>までの素数のリストに評価される型です．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> primes<span class=\"token operator\">:</span> PrimeNumbers<span class=\"token operator\">&lt;</span><span class=\"token number\">300</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>として<code class=\"language-text\">tsc --noEmit</code>すると…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/index.ts:3:7 - error TS2322: Type 'string' is not assignable to type '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293]'.\n\n12 const primes: PrimeNumbers = 'string';\n         ~~~~~~\n\n\nFound 1 error.</code></pre></div>\n<p>やった！<code class=\"language-text\">PrimeNumbers&lt;300></code>が<code class=\"language-text\">[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293]</code>型に評価されています！</p>\n<h2 id=\"細かいこと\" style=\"position:relative;\"><a href=\"#%E7%B4%B0%E3%81%8B%E3%81%84%E3%81%93%E3%81%A8\" aria-label=\"細かいこと permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>細かいこと</h2>\n<h3 id=\"error型\" style=\"position:relative;\"><a href=\"#error%E5%9E%8B\" aria-label=\"error型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error型</h3>\n<p>型を書いていると，エラーを投げたい場面があると思います．そのような場合に<code class=\"language-text\">never</code>としても良いのですが，次のような<code class=\"language-text\">Error</code>型を定義しました．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Error<span class=\"token operator\">&lt;</span><span class=\"token constant\">REASON</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span> reason<span class=\"token operator\">:</span> <span class=\"token constant\">REASON</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これにより，エラーの理由もわかるようになるので，デバッグが捗りました．</p>\n<h3 id=\"型ハック2型のキャスト\" style=\"position:relative;\"><a href=\"#%E5%9E%8B%E3%83%8F%E3%83%83%E3%82%AF2%E5%9E%8B%E3%81%AE%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88\" aria-label=\"型ハック2型のキャスト permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>型ハック2：型のキャスト</h3>\n<p>あまり複雑な型を書くとTSの推論がうまく効かず，自分は正しいコードを書いているのに型エラーが発生してしまう場合があります．そんなときは<a href=\"https://kgtkr.net/blog/2019/04/15/typescript-typelevelprogramming-error-suppression\">@kgtkrさんのCast型</a>が使えます．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Cast<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">P</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これにより，TSに<code class=\"language-text\">T</code>型を<code class=\"language-text\">P</code>型として推論させられます．<code class=\"language-text\">T extends P</code>することでTSくんをわからせるという感じでしょうか．詳しくは元記事をどうぞ．</p>\n<h3 id=\"型ハック3未解決な型によるts2589の回避\" style=\"position:relative;\"><a href=\"#%E5%9E%8B%E3%83%8F%E3%83%83%E3%82%AF3%E6%9C%AA%E8%A7%A3%E6%B1%BA%E3%81%AA%E5%9E%8B%E3%81%AB%E3%82%88%E3%82%8Bts2589%E3%81%AE%E5%9B%9E%E9%81%BF\" aria-label=\"型ハック3未解決な型によるts2589の回避 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>型ハック3：未解決な型によるTS2589の回避</h3>\n<p>複雑な型を組み合わせ，かつ未解決な型引数を扱っているとTS2589が発生することがあるようです．理由は謎です 😟</p>\n<p>この解決にも<a href=\"https://kgtkr.net/blog/2019/04/15/typescript-typelevelprogramming-error-suppression\">先程の記事</a>が役立ちました．@kgtkrさん，ありがとうございました．</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>型パズル初心者が型だけで素数を求めてみました．いろいろハードロックな型を書いたせいで，TSの言語サーバーがメモリを食いつぶして爆発するというのも何度か見ました．</p>\n<p>今回の開発を通して，TSの変なテクニックをいくつか習得し，型パズルの楽しさも分かってきました．また，型の素振りにもなりましたので，何かの業務に活かせると良いなと思います．</p>","frontmatter":{"title":"TypeScriptの型で素数を求めたい","date":"2021/01/19"},"fields":{"slug":"/TypeScriptの型で素数を求めたい/"},"id":"3a3c4125-9986-53bb-8b96-ae29936c96ab"},"firstImage":{"imageFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#3878c8","images":{"fallback":{"src":"/static/bd6cef6475b68f2223800108dc5ec50c/acb7c/ts-logo.png","srcSet":"/static/bd6cef6475b68f2223800108dc5ec50c/1c9ce/ts-logo.png 64w,\n/static/bd6cef6475b68f2223800108dc5ec50c/bf8e1/ts-logo.png 128w,\n/static/bd6cef6475b68f2223800108dc5ec50c/acb7c/ts-logo.png 256w","sizes":"(min-width: 256px) 256px, 100vw"},"sources":[{"srcSet":"/static/bd6cef6475b68f2223800108dc5ec50c/8257c/ts-logo.webp 64w,\n/static/bd6cef6475b68f2223800108dc5ec50c/6766a/ts-logo.webp 128w,\n/static/bd6cef6475b68f2223800108dc5ec50c/22bfc/ts-logo.webp 256w","type":"image/webp","sizes":"(min-width: 256px) 256px, 100vw"}]},"width":256,"height":256}}}},"relatedMarkdownRemarks":{"posts":[{"id":"29b79017-f96d-5b04-8d01-5b8ee761ebed","frontmatter":{"draft":null}},{"id":"82d43655-ea2a-52cd-97a3-16b7b28ad150","frontmatter":{"draft":null}},{"id":"f49ce388-e81c-5425-af59-9902f125c20f","frontmatter":{"draft":null}},{"id":"73d6ab42-b3e6-5663-a175-b1f3d69c29e1","frontmatter":{"draft":null}},{"id":"27f10a38-0ecb-539f-a717-7e40a41bbd10","frontmatter":{"draft":null}},{"id":"c2db052c-95c6-5094-935b-9eb39f5c762a","frontmatter":{"draft":null}},{"id":"75696ec6-74a3-5046-8a3c-f39b36d92311","frontmatter":{"draft":null}},{"id":"d29b4513-0609-5cfc-af49-817467dbed1f","frontmatter":{"draft":null}},{"id":"8f7b1b24-7738-5b97-bfb6-fd763f11a664","frontmatter":{"draft":true}},{"id":"c2249b7b-b97e-5cf4-8ea9-8024e96851b7","frontmatter":{"draft":true}},{"id":"c6def021-b8da-5dbe-ad3e-811d9286424d","frontmatter":{"draft":true}},{"id":"12222bfa-2e8e-51ee-99d8-8a19902351f5","frontmatter":{"draft":null}},{"id":"871ac696-39ea-5c64-94f3-5dc4b73b5770","frontmatter":{"draft":true}},{"id":"c5e2431a-cf05-5024-b833-e1c69f680d44","frontmatter":{"draft":null}},{"id":"46a22c41-5455-557c-85d4-973a6e2220ee","frontmatter":{"draft":null}},{"id":"fd6eab68-17d3-5395-8b2b-54a6efe43ebb","frontmatter":{"draft":null}},{"id":"be594923-185e-5cca-95b6-5267b3c9fc8c","frontmatter":{"draft":null}},{"id":"0116f663-28d1-507a-b5ab-b189801dd408","frontmatter":{"draft":true}},{"id":"01deffb8-0d62-54c6-9e41-20832cbc3c6e","frontmatter":{"draft":null}},{"id":"067a602f-4581-5707-b896-73190dd8c889","frontmatter":{"draft":null}},{"id":"0c5568c9-6d87-56ed-ab0e-caeb9c1aafa4","frontmatter":{"draft":null}},{"id":"1086a735-7173-58cc-a813-c540a563aedf","frontmatter":{"draft":false}},{"id":"1162dccb-e1bf-576d-a5c6-0993394feb0a","frontmatter":{"draft":true}},{"id":"1509de3c-7308-5e40-a885-f5ebdb089774","frontmatter":{"draft":null}},{"id":"2239c111-61d9-556e-9045-9e3707553db4","frontmatter":{"draft":true}},{"id":"2cfd9e33-b4e1-53e4-884d-d8a6760f3387","frontmatter":{"draft":true}},{"id":"2f30c3f1-0d66-590b-8dba-7836df701d46","frontmatter":{"draft":null}},{"id":"3908aafc-c8d3-5c67-821f-0866592449f2","frontmatter":{"draft":true}},{"id":"3b696b96-130d-50de-a673-dc1367f32387","frontmatter":{"draft":null}},{"id":"48c65a15-67ca-57d0-9edc-ebcb868f7ad2","frontmatter":{"draft":true}},{"id":"49cf25c1-03f6-575e-8c2f-638ccd6198ea","frontmatter":{"draft":null}},{"id":"4ed3b747-2001-54f4-9661-3acab89ce275","frontmatter":{"draft":null}},{"id":"4edc1b46-b395-5783-af6a-818b8fc9c2dc","frontmatter":{"draft":null}},{"id":"50951bb1-eb92-5663-a3d8-8f35f73a1322","frontmatter":{"draft":null}},{"id":"50d3cc2a-de7a-5b9a-a8d8-754415fe4d94","frontmatter":{"draft":null}},{"id":"5888c50d-8414-5e8f-b0dc-28a31b29053d","frontmatter":{"draft":null}},{"id":"63f3c7ad-6c59-52b5-9816-78fd348955ff","frontmatter":{"draft":true}},{"id":"69a4aa90-b728-522c-b34f-abee49825c45","frontmatter":{"draft":true}},{"id":"73ab4455-f04d-5320-bf3a-90b9f7441d13","frontmatter":{"draft":null}},{"id":"75550af2-8134-5467-a07d-abbb5a4f6b7c","frontmatter":{"draft":true}},{"id":"7778d041-a5bf-536a-a36f-c0dbc5e08ac7","frontmatter":{"draft":true}},{"id":"78349b16-6e41-5fef-ae38-bcdc5ff297ef","frontmatter":{"draft":true}},{"id":"7a8fc278-a847-5b68-8b74-a83193ba3f55","frontmatter":{"draft":null}},{"id":"7d6499d9-277c-5f07-b8b1-98ae40c50c42","frontmatter":{"draft":null}},{"id":"7d79eb4b-cd4a-5621-a67a-91d9a24dce05","frontmatter":{"draft":null}},{"id":"8b3e46c2-1a1e-5af0-8900-7972c7285d15","frontmatter":{"draft":null}},{"id":"961ec1e6-3f2b-59d9-a33f-dad76cf67f47","frontmatter":{"draft":null}},{"id":"97f01467-e3a1-58e1-b2a4-db77354cc1a3","frontmatter":{"draft":null}},{"id":"9f02de74-61a0-5daf-a048-1c1022e08fe4","frontmatter":{"draft":null}},{"id":"9f24363b-ee3e-54bf-8a18-46ea3b269bea","frontmatter":{"draft":null}},{"id":"a091877c-69b8-59f9-8963-1af334fd573c","frontmatter":{"draft":null}},{"id":"a190aac4-0483-5e02-b1d3-261f3b5f313a","frontmatter":{"draft":null}},{"id":"a6c64123-b824-5224-8027-90eb12040396","frontmatter":{"draft":true}},{"id":"b4251348-b618-5b5b-a2c8-e4c6b2431b83","frontmatter":{"draft":true}},{"id":"bfee69af-7d7f-5d87-9680-d2e9b60f8416","frontmatter":{"draft":null}},{"id":"c7a5adfb-149b-5469-ba35-7421e2101951","frontmatter":{"draft":null}},{"id":"cbdf3192-973c-5d87-9cf1-bb9110e9a169","frontmatter":{"draft":null}},{"id":"d4d1afa4-f2f9-5942-ae36-2826fb938af5","frontmatter":{"draft":null}},{"id":"db26c6b9-37b4-5cc4-b1ec-c61dc667863e","frontmatter":{"draft":null}},{"id":"dd0c41cf-0a03-5b89-b5a2-f64859aeae63","frontmatter":{"draft":null}},{"id":"e322eac2-bd89-5347-b20d-d050d303a6be","frontmatter":{"draft":null}},{"id":"e376b2d4-df91-5b82-af7a-a8d02763e922","frontmatter":{"draft":true}},{"id":"e4fb8478-b1ad-59eb-95e8-8c5e0500d3f4","frontmatter":{"draft":null}},{"id":"e83330dc-2312-5ae6-95fa-53e86909f42b","frontmatter":{"draft":true}},{"id":"eba9aa6a-6e21-5f1b-a0eb-7b6bfb1e04f1","frontmatter":{"draft":null}},{"id":"ebae7878-c4ee-505e-81e2-3d3fc47ea826","frontmatter":{"draft":null}},{"id":"ed7af7f9-75f5-59be-9063-de564576eed7","frontmatter":{"draft":true}},{"id":"f06a6ae0-e961-504c-8dab-a60489c0557a","frontmatter":{"draft":true}},{"id":"f5a25ce1-67a6-51b2-9bf1-f9fbacb41ad1","frontmatter":{"draft":true}}]}},"pageContext":{"id":"3a3c4125-9986-53bb-8b96-ae29936c96ab"}},"staticQueryHashes":["1530353647","2576926420","63159454"]}