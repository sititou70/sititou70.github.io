{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/プロトコルスタックを写経してネットワークを完全に理解したかった日記/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sititou70.github.io"}},"markdownRemark":{"excerpt":"Webページはどうやって表示されるのでしょうか． 「ブラウザでアドレスバーにURLを入力してEnter…","html":"<p>Webページはどうやって表示されるのでしょうか．</p>\n<p><a href=\"https://togetter.com/li/1265988\">「ブラウザでアドレスバーにURLを入力してEnter押してからページが表示されるまでに何が起きているか説明してください」面接で使っていた質問が面白いと話題に</a></p>\n<p>上記の質問には様々なレイヤーでの回答があると思うのですが，私はネットワークの動作に興味を持ちました．というのも，TCP，IP，ARP，Ethernetといったキーワードが関連しているのは教科書や講義で聞いた気がするのですが，それ以上のことはうまく説明できなかったからです．</p>\n<p>これらのプロトコルは，普段はカーネル内部に隠れていてあまり意識できません．</p>\n<p>しかし，以下の資料を参考にプロトコルスタックを写経すれば，少しは身近に感じられるかもしれないと思いました．</p>\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\">\n  <p lang=\"ja\" dir=\"ltr\">\n    3月に開催したプロトコルスタック自作キャンプの講義資料を公開しました。1週間でTCP/IPのプロトコルスタックを自作してUDPやTCPで通信するアプリケーションを動かすという内容で300ページくらいのスライドです。これがあれば一人で自作できますよ！\n    <a href=\"https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;ref_src=twsrc%5Etfw\">\n      #KLabExpertCamp\n    </a>\n    <a href=\"https://t.co/4sUTh2MAk6\">https://t.co/4sUTh2MAk6</a>\n  </p>\n  &mdash; YAMAMOTO Masaya (@pandax381) <a href=\"https://twitter.com/pandax381/status/1384491632540753921?ref_src=twsrc%5Etfw\">April 20, 2021</a>\n</blockquote>\n<p>そして完成したものがこちらです．</p>\n<ul>\n<li>リポジトリ：<a href=\"https://github.com/sititou70/klab-protocol-stack-tutorial\">https://github.com/sititou70/klab-protocol-stack-tutorial</a></li>\n<li>言語：C</li>\n</ul>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/_1QN1BjFCwk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>この動画では，次のようなユーザープログラムを自作プロトコルスタック上で動作させています．</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 接続を開き</span>\n  <span class=\"token keyword\">int</span> soc <span class=\"token operator\">=</span> <span class=\"token function\">tcp_open_rfc793</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* ...略... */</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// リクエストを受け取ったら</span>\n  <span class=\"token class-name\">uint8_t</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">tcp_receive</span><span class=\"token punctuation\">(</span>soc<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// それを無視して固定レスポンスを返し</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>response <span class=\"token operator\">=</span>\n      <span class=\"token string\">\"HTTP/1.1 200 OK\\r\\n\"</span>\n      <span class=\"token string\">\"\\r\\n\"</span>\n      <span class=\"token string\">\"&lt;html>&lt;head>&lt;title>hello&lt;/title>&lt;/head>&lt;body>world&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">tcp_send</span><span class=\"token punctuation\">(</span>soc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>response<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 一方的に接続を切って</span>\n  <span class=\"token function\">tcp_close</span><span class=\"token punctuation\">(</span>soc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 落ちる</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>はい．<strong>カスのWebサーバー</strong> です．</p>\n<p>しかしカスであっても <em>「ブラウザでアドレスバーにURLを入力してEnter押してからページが表示される」</em> ことは確かです．</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 277px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/1ed3223e44a9aea52daac185130e5f3c/b4e7c/simple_page.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 73.64620938628158%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'295\\'%20viewBox=\\'0%200%20400%20295\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20146v120l3%202c2%202%203%204%201%204s-1%205%200%206c3%201%201%202-2%202-2-1-2-1-2%207v8h64v-11c0-10%200-10-1-7-2%204-5%206-4%202%202-7%202-8%200-8l-2-1%203-1h3v-19l-2-27c0-8-1-8%2015-7l40%202a16068%2016068%200%2001275%2013h9v17a6500%206500%200%20000-206v18h-4a1351%201351%200%2000-70-7A10277%2010277%200%200093%2034a14041%2014041%200%2000-89-8H0v120m61-21v19c1%2021%201%2021%2012%2021l39%202c31%201%2036%201%2031-2h-7l7-1%206-1v-2l2-4c1-4%203-5%205-2h3v-3l1-1c0-1%201-2%203-2l3-1%202-1%202-2c0-3-2-5-2-3h-1l-1-3c-2-2-2-2%201-2%203-1%208%202%206%204-1%201-1%201%201%201s3%200%202-1l2-3c1-2%204-3%204-1h3c1-1%201-1-1-1l-2-1h29l-11-1a1274%201274%200%2001-70-6%2017382%2017382%200%2001-69-3m18%208l-3%203c-3%202-4%204-1%205l3%202h8l1-2c1-6%203-5%203%203v7l1-7c0-5%200-6%202-6l2%204c0%204%200%204%202%202%202-4%206-2%208%204%200%203-3%208-6%206h-6c-5%200-5%200-6-3l-1-3v3c0%203-3%204-5%201h-2c-2%202-4%201-4-1v-2l-1%202-3%202c-2%200%203%205%207%205l5%203c3%202%205%202%2010%201h6c1%202%202%202%202%201l3-1c2%200%203-2%201-4v-3l1-2%202%201-1-2c-1-1-1-1%203-2l3-2-1-1h-2c-1-1-2-2-3-1v-2c1-4%201-5-5-8l-7-3c-2-1-10%200-11%201h-2c0-2-3-3-3-1m2%2056c-4%205-4%205%200%2010%203%203%204%203%205%202l-1-3c-1-2%200-2%204-2%207-1%206-3%200-4l-4-1%201-3c0-3-2-2-5%201m74%202c-6%205-2%2016%205%2016%203%200%207-3%207-6%201-3-2-4-2-1-3%207-11%203-10-5%201-2%206-3%206%200%200%202%201%202%203%202%203%200%203%200%203-3s0-4-2-4h-5c-2-1-3-1-5%201m74%202c-4%203-4%2010%201%2014%203%204%206%204%209-1s3-10-2-13c-4-3-5-3-8%200m59%206c-3%202-3%206%200%207%202%200%202%200%200%202v2c2%201%206-4%206-6s0-3%202-2c3%200%203%202%200%205l-1%203h6l-1-1c-2%200-2-1%200-3s1-6-2-7l-3%201h-3c-1-2-2-2-4-1m28%203l-2%204c0%205%205%208%207%204l2%201c3%203%207%201%207-4-1-4-2-7-4-7s-4%203-3%205l-1%202-1-1-2-2v-2l1-2-4%202\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/1ed3223e44a9aea52daac185130e5f3c/153c7/simple_page.webp 277w\"\n              sizes=\"(max-width: 277px) 100vw, 277px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/1ed3223e44a9aea52daac185130e5f3c/b4e7c/simple_page.png 277w\"\n            sizes=\"(max-width: 277px) 100vw, 277px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/1ed3223e44a9aea52daac185130e5f3c/b4e7c/simple_page.png\"\n            alt=\"カスサーバーからのレスポンスがブラウザに表示されている\"\n            title=\"カスサーバーからのレスポンスがブラウザに表示されている\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>この間にプロトコルスタック内部では何が起こっていたのでしょうか．それは画面左側のログにすべて出ているのですが，</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/bb2584ea79bcb75817aca8f467848783/03eda/simple_page_log.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 122.66483516483517%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'491\\'%20viewBox=\\'0%200%20400%20491\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%2058c0%2053%201%2057%202%2057%203%200%203%201%204%2016%202%2032%202%2050%201%2048H3l-1-1c1-1%200-2-1-2-1-1-1%203-1%2025v26l5-2c6-3%206-3%206-1%200%201-2%203-5%204l-6%203v260h401V360c0-72-1-90-1-40v90h-4l-7%202h-3v-13a26147%2026147%200%2001-13-294v-9h8l14%201h5v9a1264%201264%200%20000-88v18l-44-4a43719%2043719%200%2001-245-20C48%207%2053%208%2053%203l-1-3v4c-1%203%200%203-16%202-11-1-12-1-13-4-1-2-1-2-12-2H0v58m24-13v5h8c13%202%2013%202%2013-3v-5h-5l-11-1h-5v4m53%2010c-1%203%202%204%2012%205h10c1%201%202%200%202-3%200-2%200-2-4-2h-8c-1-1-1-1-2%201h-2l-1-1-4-1-3%201m296%2016l1%207%2013%201%2013%201V67h-5l-13-2h-9v6M49%2070c-3%200-4%203-2%204h3l1-1c0%202%201%202%206%202h7l2-2%201-2v2l2%203v-3c0-4-1-5-2-3H53l-1-1-3%201m29%2011c0%202%201%203%203%203h12c9%201%209%201%209-2l-1-2c-1%200-2%201-1%202l-1%201-1-2c-1-2-1-2-2-1h-2c-2-2-3-1-2%201l-1%202-1-2c0-2-11-2-12%200m29%20229h-4l-5%201-4%201c-4-1-4-1-4%201%200%203%200%203%205%202h11c6-1%208-2%207-4%200-2-2-2-3-1h-3m139%2042h-3l-4%201-3%201h-4l-5%201-5%201h-4c-2-1-2-1-2%201l1%203%201-1v-2l1%202%201%202%201-2h3l3-1h1l4-1h10l9-1c3-1%202-4-1-5l-4%201m18%206h-5l-6%201-4%201h-2l-6%201-5%201h-4c-2-1-2-1-2%201l1%203%201-1c0-1%200-2%201-1l1%202v1l1-2h4l9-2a82%2082%200%200016-1l2-2c0-2-1-3-2-2m-155%2042h-4l-3%201-3%201c-4-1-6%201-4%203%201%201%202%202%203%201h3l1-1h7l4-1h3l2-2c0-3-4-3-9-2m77%2029c1%201%200%201-3%201h-3v1h-4l-4%201c-3-1-3-1-3%201l1%203c1%201%206%200%206-2h1c0%202%202%203%202%201h3c2%200%203%200%203-2%201-2%201-2%202-1l4%202c4%200%204%200%203-2-1-3-4-4-4-1-1%201-1%201-1-1l-2-2c-2%200-2%200-1%201m-25%204l-6%202a34%2034%200%2000-6%200l-2%201-2%201-2%201%202%201c1-1%202%200%202%201%200%202%202%201%203-2l1-2v2c1%202%201%202%204%201l11-1c4%200%204%200%202-1l-2-1%202-1-2-1-3-1h-2m-91%205l-1%202c0%202%201%203%202%203l1-2%201-2%201%202c0%202-1%203-10%204a534%20534%200%2000-17%201l-1-5-1%203v12l16-1c14-2%2016-3%2019-5%203-3%203-3-1-5-3-2-4-3-3-5%200-3%200-3-3-3l-3%201m64%200h-6l-4%201-2%201-11%202c-2%201-3%201-4-1h-3l-2%201-1%202-1%201-1-2-1-2-1%203c0%202%200%202-1%200s-3-3-5-1l-4%202-2%202-2%202c-1%201-1%201%201%201l3-1v-1l2%201c0%202%202%201%203-1l1-1c0%202%201%202%203%200h2c0%201%208%200%2010-2%202-1%203-1%205%201h1l2-1%202-1c0-2%202-2%202-1%201%202%204%201%204-1h1c0%202%200%202%203%201h5l2-1%202-1%202-1c0-3-2-3-5-2\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/bb2584ea79bcb75817aca8f467848783/f4a91/simple_page_log.webp 728w,\n/static/bb2584ea79bcb75817aca8f467848783/373da/simple_page_log.webp 811w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/bb2584ea79bcb75817aca8f467848783/beb58/simple_page_log.png 728w,\n/static/bb2584ea79bcb75817aca8f467848783/03eda/simple_page_log.png 811w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/bb2584ea79bcb75817aca8f467848783/beb58/simple_page_log.png\"\n            alt=\"プロトコルスタックのログ\"\n            title=\"プロトコルスタックのログ\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>さすがに分かりづらいので，以下会話形式<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>でお送りします</p>\n<h2 id=\"1-プロトコルスタックのセットアップ\" style=\"position:relative;\"><a href=\"#1-%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\" aria-label=\"1 プロトコルスタックのセットアップ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. プロトコルスタックのセットアップ</h2>\n<p>先程は割愛していたのですが，Webサーバーの起動前に以下のセットアップ処理を行っていました．</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Step 1: プロトコルスタック初期化</span>\n<span class=\"token function\">net_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 2: ネットワークデバイスのセットアップ</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>dev <span class=\"token operator\">=</span> <span class=\"token function\">ether_tap_init</span><span class=\"token punctuation\">(</span>ETHER_TAP_NAME<span class=\"token punctuation\">,</span> ETHER_TAP_HW_ADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 3: IPアドレスの登録</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_iface</span> <span class=\"token operator\">*</span>iface <span class=\"token operator\">=</span> <span class=\"token function\">ip_iface_alloc</span><span class=\"token punctuation\">(</span>ETHER_TAP_IP_ADDR<span class=\"token punctuation\">,</span> ETHER_TAP_NETMASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ip_iface_register</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">,</span> iface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 4: プロトコルスタックの開始</span>\n<span class=\"token function\">net_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"step-1-プロトコルスタック初期化\" style=\"position:relative;\"><a href=\"#step-1-%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E5%88%9D%E6%9C%9F%E5%8C%96\" aria-label=\"step 1 プロトコルスタック初期化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: プロトコルスタック初期化</h3>\n<p>ユーザープログラム「プロトコルスタック初期化してくれ」</p>\n<p>net「ワイはプロトコルスタック全体を管理するリーダーやで．よっしゃ，まずはintr君を初期化するで」</p>\n<p>net「intr君は割り込みやタイマーでワイを呼び出してくれるんや．例えば，通信をスムーズに処理するためには受信と解析を非同期に処理することが重要なんやけど，そこで彼が役立つで」</p>\n<p>net「intr君，初期化してくれ」</p>\n<p>intr「各種シグナルを受信できるように設定しました」（今回のプロトコルスタックは簡単のためにユーザーランドで実装されているので，ここではシグナルを使って割り込みを再現します）</p>\n<p>net「よし，次にarp，ip，tcp君，初期化してくれ」</p>\n<p>arp「netさんに自身を登録するやで．プロトコルは以下のような構造体で表されているんや．まぁnetさんに管理してもらうための申請用紙みたいなもんやな」</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_protocol</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_protocol</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 複数のプロトコルを単方向リストで保持する</span>\n  <span class=\"token class-name\">uint16_t</span> type<span class=\"token punctuation\">;</span> <span class=\"token comment\">// プロトコルタイプ．ARPなら0x0806（https://ja.wikipedia.org/wiki/EtherType）</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">queue_head</span> queue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受信キュー</span>\n  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受信時に呼び出してほしい処理</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 受信キューの中身</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_protocol_queue_entry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受信したネットワークデバイス（後述）</span>\n  <span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受信データの長さ</span>\n  <span class=\"token class-name\">uint8_t</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受信データ</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>arp「必要な欄を埋めてnetさんに渡したら登録完了や．ARPパケットが来たら呼んでや．あと，ARPキャッシュ（後述）を掃除するタイマーも開始したで」</p>\n<p>ip「netさんに自身を登録したで．IPパケットが来たら呼んでや」</p>\n<p>tcp「<strong>ipさんに</strong> 自身を登録したで．TCPセグメントが来たら呼んでや．あと，セグメントの再送タイマーも開始したで」</p>\n<p>net「初期化完了や」</p>\n<h3 id=\"step-2-ネットワークデバイスのセットアップ\" style=\"position:relative;\"><a href=\"#step-2-%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\" aria-label=\"step 2 ネットワークデバイスのセットアップ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: ネットワークデバイスのセットアップ</h3>\n<p>ユーザープログラム「ネットワークデバイスを初期化してくれ．デバイス名は<code class=\"language-text\">tap0</code>，ハードウェアアドレスは<code class=\"language-text\">00:00:5e:00:53:01</code>」</p>\n<p>ether_tapデバイスドライバ「環境依存の処理はワイが担当するで．今回はユーザーランドでの実装やから，<a href=\"https://ja.wikipedia.org/wiki/TUN/TAP\">TAPデバイス</a>を使ってパケットを受け取るで．intrさん，パケットが来たらワイを呼び出してくれ」</p>\n<p>ether_tapデバイスドライバ「環境依存な情報は設定したから，あとはetherさん頼むわ」</p>\n<p>ether「よし，以下のようなネットワークデバイス構造体を初期化するで」</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 次のネットワークデバイス．単方向リスト</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_iface</span> <span class=\"token operator\">*</span>ifaces<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上位プロトコルによって定義されるアドレス情報（後述）</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 連番，1, 2, 3, 4...</span>\n  <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span>IFNAMSIZ<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// デバイス名，tap0</span>\n  <span class=\"token class-name\">uint16_t</span> type<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 種別．今回はEthernet</span>\n  <span class=\"token class-name\">uint16_t</span> mtu<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一度に送信できるペイロードの長さ．Ethernetでは1500．ジャンボフレームなどは割愛</span>\n  <span class=\"token class-name\">uint16_t</span> flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状態．UPとかDONWとか</span>\n  <span class=\"token class-name\">uint16_t</span> hlen<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ヘッダの長さ．Ethernetでは14</span>\n  <span class=\"token class-name\">uint16_t</span> alen<span class=\"token punctuation\">;</span> <span class=\"token comment\">// アドレスの長さ．Ethernetでは6</span>\n  <span class=\"token class-name\">uint8_t</span> addr<span class=\"token punctuation\">[</span>NET_DEVICE_ADDR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ハードウェアアドレス．00:00:5e:00:53:01</span>\n  <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">uint8_t</span> peer<span class=\"token punctuation\">[</span>NET_DEVICE_ADDR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// P2Pの相手．今回は関係ない</span>\n    <span class=\"token class-name\">uint8_t</span> broadcast<span class=\"token punctuation\">[</span>NET_DEVICE_ADDR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ブロードキャストアドレス．FF:FF:FF:FF:FF:FF</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device_ops</span> <span class=\"token operator\">*</span>ops<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各種ハンドラ</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>priv<span class=\"token punctuation\">;</span> <span class=\"token comment\">// プライベートデータ．TAPのファイルディスクリプタとか</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device_ops</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>open<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 起動処理</span>\n  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 終了処理</span>\n  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>transmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信関数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ether「これは，普段<code class=\"language-text\">ip a</code>コマンドなどで見る<code class=\"language-text\">eth0</code>や<code class=\"language-text\">wlan0</code>といった物理のデバイスに対応するものやな」</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># ip aコマンドの例</span>\n$ <span class=\"token function\">ip</span> a\n<span class=\"token comment\"># ↓ここに対応する</span>\n<span class=\"token number\">1</span>: wlan0: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default qlen <span class=\"token number\">1000</span>\n    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\n    inet <span class=\"token number\">192.168</span>.0.123/24 brd <span class=\"token number\">192.168</span>.0.255 scope global dynamic noprefixroute wlan0\n       valid_lft 12345sec preferred_lft 12345sec\n    inet6 xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/64 scope global temporary dynamic\n       valid_lft 12345sec preferred_lft 12345sec</code></pre></div>\n<p>ether「必要な情報埋めたで」</p>\n<p>ether_tapデバイスドライバ「netさん，デバイス作ったから報告します」</p>\n<p>net「了解，覚えとくで」</p>\n<h3 id=\"step-3-ipアドレスの登録\" style=\"position:relative;\"><a href=\"#step-3-ip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E7%99%BB%E9%8C%B2\" aria-label=\"step 3 ipアドレスの登録 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: IPアドレスの登録</h3>\n<p>ユーザープログラム「さっきのデバイスにIPアドレス<code class=\"language-text\">192.168.70.2/24</code>を登録してくれ」</p>\n<p>ip「net_iface構造体を設定するやで．これは以下のような定義で」</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_iface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_iface</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 次のnet_iface．単方向リスト</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 対応するネットワークデバイス</span>\n  <span class=\"token keyword\">int</span> family<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ファミリ．IPv4とかIPv6とか</span>\n  <span class=\"token comment\">/* depends on implementation of protocols. */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ipでは以下のように拡張して使う</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token class-name\">ip_addr_t</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_iface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_iface</span> iface<span class=\"token punctuation\">;</span> <span class=\"token comment\">// net_iface</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_iface</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 次のip_iface．単方向リスト</span>\n  <span class=\"token class-name\">ip_addr_t</span> unicast<span class=\"token punctuation\">;</span> <span class=\"token comment\">// アドレス</span>\n  <span class=\"token class-name\">ip_addr_t</span> netmask<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ネットワークアドレス</span>\n  <span class=\"token class-name\">ip_addr_t</span> broadcast<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ブロードキャストアドレス</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ip「これをネットワークデバイスのifacesにつなぐから」</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_device</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">net_iface</span> <span class=\"token operator\">*</span>ifaces<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上位プロトコルによって定義されるアドレス情報</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ip「ネットワークデバイスは，複数の『IPアドレス，ネットワークアドレス，ブロードキャストアドレスの組』を持つことになるわけや．<code class=\"language-text\">ip a</code>コマンドでも見たことあるやつやな」</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># ip aコマンドの例</span>\n$ <span class=\"token function\">ip</span> a\n<span class=\"token comment\"># 各ネットワークデバイスが</span>\n<span class=\"token number\">1</span>: wlan0: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default qlen <span class=\"token number\">1000</span>\n    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\n    <span class=\"token comment\"># 複数のIPアドレス，ネットワークアドレス，ブロードキャストアドレスをもつ</span>\n    inet <span class=\"token number\">192.168</span>.0.123/24 brd <span class=\"token number\">192.168</span>.0.255 scope global dynamic noprefixroute wlan0\n       valid_lft 12345sec preferred_lft 12345sec\n    <span class=\"token comment\"># 複数のIPアドレス，ネットワークアドレス，ブロードキャストアドレスをもつ</span>\n    inet6 xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/64 scope global temporary dynamic\n       valid_lft 12345sec preferred_lft 12345sec</code></pre></div>\n<p>ip「最後に，今回登録された内容からわかるルート情報をルーティングテーブルに書くで．ルーティングテーブルとは，パケットを送信したい時にどのデバイスからどこ向けに送り出すかをメモした表なんや．以下のような構造になっとる」</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_route</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_route</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 次のルート情報．単方向リスト</span>\n  <span class=\"token class-name\">ip_addr_t</span> network<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ネットワークアドレス</span>\n  <span class=\"token class-name\">ip_addr_t</span> netmask<span class=\"token punctuation\">;</span> <span class=\"token comment\">// サブネットマスク</span>\n  <span class=\"token class-name\">ip_addr_t</span> nexthop<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信すべき宛先アドレス</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_iface</span> <span class=\"token operator\">*</span>iface<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信すべきデバイス（ip_ifaceのdevからnet_deviceが取れる）</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_route</span> <span class=\"token operator\">*</span>routes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ルーティングテーブル．ルートの単方向リスト</span></code></pre></div>\n<p>ip「この表の使い方は『<code class=\"language-text\">送信したいIPアドレス &amp; netmask</code>が<code class=\"language-text\">network</code>とマッチしたら，<code class=\"language-text\">ip_iface</code>のデバイスから<code class=\"language-text\">nexthop</code>向けに送り出す』といったかんじやな」</p>\n<p>ip「今回は，<code class=\"language-text\">tap0</code>に<code class=\"language-text\">192.168.70.2/24</code>が登録されたわけや．ということは，<code class=\"language-text\">tap0</code>は<code class=\"language-text\">192.168.70.0/24</code>のネットワークに接続されていることになる．当たり前やけどな」</p>\n<p>ip「したがって，今後これらのネットワークに属するホスト，例えば<code class=\"language-text\">192.168.70.123</code>などと通信するときは，<code class=\"language-text\">tap0</code>から送信すれば直接やり取りできるのが自明や．したがってルーティングテーブルにそのことをメモしておくで」</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">network</th>\n<th align=\"center\">netmask</th>\n<th align=\"center\">nexthop</th>\n<th align=\"center\">デバイス</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">192.168.70.0</td>\n<td align=\"center\">255.255.255.0</td>\n<td align=\"center\">255.255.255.255</td>\n<td align=\"center\">tap0</td>\n</tr>\n</tbody>\n</table>\n<p>ip「nexthopは直接通信に必要ないから，適当に<code class=\"language-text\">255.255.255.255</code>にしといたで」</p>\n<p>ip「このように，ネットワークデバイスにIPを設定しただけで自動的に登録されるルート情報の種類は <strong>直接接続</strong> と呼ばれるで」</p>\n<p>ip「ちなみに他の種類は以下のとおりや」</p>\n<ul>\n<li>直接接続：デバイスにIPを割り当てたら自動的に設定される情報</li>\n<li>スタティック：ユーザーが手動で追加した情報</li>\n<li>ダイナミック：ルーティングプロトコルによって追加された情報（本実装では割愛）</li>\n</ul>\n<h3 id=\"step-4-プロトコルスタックの開始\" style=\"position:relative;\"><a href=\"#step-4-%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%81%AE%E9%96%8B%E5%A7%8B\" aria-label=\"step 4 プロトコルスタックの開始 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: プロトコルスタックの開始</h3>\n<p>ユーザープログラム「いろいろ設定が終わったから，プロトコルスタックを開始してくれ」</p>\n<p>net「まずは，intr君を開始するで」</p>\n<p>intr「無限ループでシグナルを処理するスレッドを開始します．これは，シグナルがあればその番号に対応する処理を呼び出し，それが終わるとまた即座にシグナルを待ちます」</p>\n<p>net「次に，すべてのネットワークデバイスを立ち上げるで．<code class=\"language-text\">tap0</code>の<code class=\"language-text\">net_device_ops->open</code>を呼ぶで」</p>\n<p>ether_tapデバイスドライバ「<code class=\"language-text\">net_device_ops->open</code>はTAPの初期化処理になるようにさっき設定しといたから，ここでワイが呼ばれたで．初期化完了や」</p>\n<p>net「よし，<code class=\"language-text\">tap0</code>のフラグを起動中にして…」</p>\n<p>net「プロトコルスタック開始完了や」</p>\n<h2 id=\"2-webサーバーの処理\" style=\"position:relative;\"><a href=\"#2-web%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E5%87%A6%E7%90%86\" aria-label=\"2 webサーバーの処理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Webサーバーの処理</h2>\n<p>以下のことを行っていました</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Step 1: TCP OPEN Call</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_endpoint</span> local<span class=\"token punctuation\">;</span>\n<span class=\"token function\">ip_endpoint_pton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.70.2:80\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> soc <span class=\"token operator\">=</span> <span class=\"token function\">tcp_open_rfc793</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 2: TCP RECEIVE Call</span>\n<span class=\"token class-name\">uint8_t</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">tcp_receive</span><span class=\"token punctuation\">(</span>soc<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 3: TCP SEND Call</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>response <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"HTTP/1.1 200 OK\\r\\n\"</span>\n    <span class=\"token string\">\"\\r\\n\"</span>\n    <span class=\"token string\">\"&lt;html>&lt;head>&lt;title>hello&lt;/title>&lt;/head>&lt;body>world&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">tcp_send</span><span class=\"token punctuation\">(</span>soc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>response<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 4: TCP CLOSE Call</span>\n<span class=\"token function\">tcp_close</span><span class=\"token punctuation\">(</span>soc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"step-1-tcp-open-call\" style=\"position:relative;\"><a href=\"#step-1-tcp-open-call\" aria-label=\"step 1 tcp open call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: TCP OPEN Call</h3>\n<p>ユーザープログラム「接続をパッシブオープン（相手からの接続を待つ）するよ．自分は<code class=\"language-text\">192.168.70.2:80</code>，相手は誰でも良いよ」</p>\n<p>tcp「PCBを初期化するやで．PCB（Protocol Control Block）またはTCB（Transmission Control Block）とは，接続情報を管理するための以下のような構造体や」</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tcp_pcb</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状態．例えば外部からの接続を待っている，接続の確立が完了しているなど</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_endpoint</span> local<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自分側のアドレスとポート</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_endpoint</span> foreign<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相手側のアドレスとポート</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 送信に関する情報</span>\n    <span class=\"token class-name\">uint32_t</span> nxt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信すべき次のシーケンス番号（シーケンス番号：扱っているデータの位置のようなもの，詳しくは後述）</span>\n    <span class=\"token class-name\">uint32_t</span> una<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信したが受信を確認していない最も古いシーケンス番号</span>\n    <span class=\"token class-name\">uint16_t</span> wnd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信ウィンドウ，相手側の受信能力</span>\n    <span class=\"token class-name\">uint16_t</span> up<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 緊急ポインタ．よくわかっていない．Telnetなどで使われるらしい：https://segmentation-fault.xyz/2017/10/14/25/</span>\n    <span class=\"token class-name\">uint32_t</span> wl1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直近のウインドウ更新でのシーケンス番号</span>\n    <span class=\"token class-name\">uint32_t</span> wl2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直近のウインドウ更新での確認番号</span>\n  <span class=\"token punctuation\">}</span> snd<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">uint32_t</span> iss<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初期送信シーケンス番号（initial send sequence number）．自分側が決めるランダムな値</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 受信に関する情報</span>\n    <span class=\"token class-name\">uint32_t</span> nxt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 次に受信するべきシーケンス番号</span>\n    <span class=\"token class-name\">uint16_t</span> wnd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受信ウインドウ．自分側の受信能力</span>\n    <span class=\"token class-name\">uint16_t</span> up<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 緊急ポインタ</span>\n  <span class=\"token punctuation\">}</span> rcv<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">uint32_t</span> irs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初期受信シーケンス番号（initial receive sequence number）．相手側が決めるランダムな値</span>\n  <span class=\"token class-name\">uint16_t</span> mtu<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一度に送信できるIPヘッダ + TCPヘッダ + ペイロードのバイト数</span>\n  <span class=\"token class-name\">uint16_t</span> mss<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一度に送信できるペーロードのバイト数</span>\n  <span class=\"token class-name\">uint8_t</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">65535</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受信バッファ</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sched_ctx</span> ctx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// スケジューリングに必要な情報．例えばデータが来るまで待つときに使う</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">queue_head</span> queue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信キュー</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sched_ctxは環境によって異なるが，Linuxだと</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sched_ctx</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">pthread_cond_t</span> cond<span class=\"token punctuation\">;</span> <span class=\"token comment\">// pthreadの条件変数</span>\n  <span class=\"token keyword\">int</span> interrupted<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 割り込みがあったか</span>\n  <span class=\"token keyword\">int</span> wc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 待っている処理の数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>tcp「今回はパッシブオープンやから，初期値は以下のようになる」</p>\n<ul>\n<li>state: LISTEN</li>\n<li>local: <code class=\"language-text\">192.168.70.2:80</code></li>\n</ul>\n<p>tcp「LISTENは接続を待っている状態やで．あとは接続要求あるまでやることないな．<code class=\"language-text\">ctx</code>を使って一旦眠るで……」</p>\n<h4 id=\"arp解決\" style=\"position:relative;\"><a href=\"#arp%E8%A7%A3%E6%B1%BA\" aria-label=\"arp解決 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARP解決</h4>\n<p>ぼく「<code class=\"language-text\">http://192.168.70.2/</code>にアクセスしよ（ブラウザにURLを入力してEnter）」</p>\n<p>Firefox「tcpで<code class=\"language-text\">192.168.70.2:80</code>をアクティブオープンするよ」</p>\n<p>Linuxのプロトコルスタック「<code class=\"language-text\">192.168.70.2:80</code>を開きたいんだね．通信するならまずハードウェアアドレスが必要だ」</p>\n<p>Linuxのプロトコルスタック「ARPキャッシュには……無いみたいだからARPで問い合わせよう」</p>\n<p>Linuxのプロトコルスタック「『宛先はFF:FF:FF:FF:FF:FF（ブロードキャスト）．どなたか，192.168.70.2さんのハードウェアアドレスを教えてください．私のプロトコルアドレスはxxx.xxx.xxx.xxx，ハードウェアアドレスはxx:xx:xx:xx:xx:xxです』っと…」</p>\n<p>〜〜〜</p>\n<p>今回は，TAP（192.168.70.1）にIPフォワーディングを設定しています．そのため，自分側のプロトコルスタックには192.168.70.1から通信が届きます．</p>\n<p>〜〜〜</p>\n<p>TAP「通信が来た．プロトコルスタックさんを起こすか」</p>\n<p>intr「シグナルで起こされました．シグナル番号に対応する処理は……ether_tapさんですね」</p>\n<p>ether_tapデバイスドライバ「お，tap0に通信が来たな．TAPから読み込んだフレームをetherさんに渡すで」</p>\n<p>ether「フレームを解析するで．<a href=\"https://www.ieee802.org/3/\">IEEE 802.3</a>によればL2のフレーム構造は以下のようになっとる．カッコの中はオクテット数や」</p>\n<ul>\n<li>送信先アドレス(6)：xx:xx:xx:xx:xx:xx</li>\n<li>送信元アドレス(6)：xx:xx:xx:xx:xx:xx</li>\n<li>上位プロトコルのタイプ(2)：<a href=\"https://ja.wikipedia.org/wiki/EtherType\">EtherType</a>\n<ul>\n<li>厳密にはEthernet II（DIX）とIEEE 802.3で意味が異なるらしい．今回は割愛</li>\n</ul>\n</li>\n<li>データ(46〜1500)</li>\n<li>フレームチェックシーケンス(4)：CRC</li>\n</ul>\n<p>ether「送信先アドレスと自身のアドレス（tap0）を比較するで．お，一致するからワイらが処理すべきフレームやな」</p>\n<p>ether「CRCの検証などは割愛や」</p>\n<p>ether「netさん，処理すべきフレームが届きましたやで．上位プロトコルのタイプは<code class=\"language-text\">0x0806</code>やったわ」</p>\n<p>net「了解や．登録されているプロトコルの中で<code class=\"language-text\">0x0806</code>は……ARP君やな．彼の受信キューにデータを積んだで」</p>\n<p>net「受信の仕事はここで一旦終わりや．以降の処理をシグナルハンドラや割り込みサービスルーチンで行うと，その間は他の通信を受信できなくなる」</p>\n<p>net「したがって，受信処理は必要なことだけやってさっさと終了することで，スムーズに他の通信もさばけるってわけや」</p>\n<p>net「最後に上位プロトコルを起こすシグナルを発して終わりやで〜」</p>\n<p>〜〜〜</p>\n<p>intr「シグナルで起こされました．シグナル番号に対応する処理は……netさんですね」</p>\n<p>net「お，上位プロトコルを起こすか」</p>\n<p>net「ARP君が受信キューを持っとるな．受信ハンドラを呼び出すで」</p>\n<p>arp「ARPパケットを処理するやで．<a href=\"https://datatracker.ietf.org/doc/rfc826/\">RFC 826</a>によれば，IPv4のARPパケットは以下のような構造になっとる」</p>\n<ul>\n<li>ハードウェアタイプ(2)：Ethernetの場合は1</li>\n<li>プロトコルタイプ(2)：上位プロトコルの種類．IPは0x0800</li>\n<li>ハードウェアアドレスサイズ(1)：Ethernetは6</li>\n<li>プロトコルアドレスサイズ(1)：IPは4</li>\n<li>オペレーション(2)：送信者の動作．要求は1，返信は2</li>\n<li>送信先ハードウェアアドレス(6)</li>\n<li>送信元プロトコルアドレス(4)</li>\n<li>送信先ハードウェアアドレス(6)</li>\n<li>送信元プロトコルアドレス(4)</li>\n</ul>\n<p>arp「今回のパケットを見る限り，相手さんもワイらと同じくIPとEthernetを使っとるみたいや．互いに通信できそうやな」</p>\n<p>arp「せっかく相手さんの情報を得たことやし，これをARPキャッシュにメモっとくで．今後も通信のたびにARP解決するのは非効率やからな」</p>\n<p>arp「そしたらARPリプライを返すやで．『プロトコルアドレスxxx.xxx.xxx.xxx / ハードウェアアドレスxx:xx:xx:xx:xx:xxさん，お返事します．ワイらのプロトコルアドレスは192.168.70.2，ハードウェアアドレスは00:00:5e:00:53:01です』っと……．netさん，送信お願いやで」</p>\n<p>net「デバイスの送信処理を呼ぶで」</p>\n<p>ether_tapデバイスドライバ「ワイが呼ばれたで．etherさん，Ethernetフレームの構築を頼みます」</p>\n<p>ether「Ethernetフレームを構築するで．とはいっても，さっきのEthernetフレームの構造にしたがって，必要な場所を埋めるだけや」</p>\n<p>ether「ちょっとめんどくさいのは，データの最小サイズがあるから，必要に応じてパディングする処理くらいやな」</p>\n<p>ether「ether_tapさん．フレームできたで」</p>\n<p>ether_tap「よし，TAPに送信するで」</p>\n<p>TAP「おｋやで」</p>\n<p>〜〜〜</p>\n<p>Linuxのプロトコルスタック「お，ARPの返信だ．ふむふむ．相手さんの情報をARPキャッシュにメモしよ」</p>\n<p>Linuxのプロトコルスタック「これで<code class=\"language-text\">192.168.70.2:80</code>をアクティブオープンするためのTCPセグメントを送れるようになったな」</p>\n<h4 id=\"コネクション確立編\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E7%A2%BA%E7%AB%8B%E7%B7%A8\" aria-label=\"コネクション確立編 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コネクション確立編</h4>\n<p>Linuxのプロトコルスタック「それでは<code class=\"language-text\">192.168.70.2:80</code>をアクティブオープンしよう．コネクションは3ウェイハンドシェイクによって，お互いに通信可能であることを確かめることで確立するよ」</p>\n<p>Linuxのプロトコルスタック「もう少し詳しくいうと，ここでお互いの初期シーケンス番号を伝え合うんだ．シーケンス番号とは，ざっくりいうと送っているデータの位置なんだけど，これが第三者に偽造されると危険なデータを差し込まれてしまう場合がある（<a href=\"https://ja.wikipedia.org/wiki/TCP%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E7%95%AA%E5%8F%B7%E4%BA%88%E6%B8%AC%E6%94%BB%E6%92%83\">シーケンス番号予測攻撃</a>）．そのため，初期のシーケンス番号を乱数で決めて最初だけ伝え合うことで，安全性を高めることになってるんだ」</p>\n<p>Linuxのプロトコルスタック「通信に必要なPCBを用意して，セグメントを構築するよ．<a href=\"https://datatracker.ietf.org/doc/html/rfc9293\">RFC 9293</a>によれば，TCPセグメントの構造は以下のようになってる」</p>\n<ul>\n<li>送信元ポート番号(2)</li>\n<li>送信先ポート番号(2)：80など</li>\n<li>シーケンス番号(4)：初期シーケンス番号 + 送っているデータの位置\n<ul>\n<li>※ただし，SYNやFINなど他の要因でもシーケンス番号は消費されるため，データ位置とは単純には一致しない．</li>\n</ul>\n</li>\n<li>確認番号(4)：このセグメントの送信者が次に受信すると予想しているシーケンス番号\n<ul>\n<li>言い換えると，（初期シーケンス番号を差し引けば）相手が次に欲しいデータの位置</li>\n<li>確認番号がxxxだとすると「xxx - 1バイトまでのデータは受信したよ，次はxxxバイトからのデータくれるんだよね？」というかんじ</li>\n</ul>\n</li>\n<li>データのオフセット(4ビット)：セグメントの先頭からデータまでの長さ（ヘッダの長さとも呼ばれる）</li>\n<li>予約領域(3ビット)：なぞ</li>\n<li>フラグ(9ビット)：例えば以下のようなフラグがある\n<ul>\n<li>SYN：初期シーケンス番号を送るよ</li>\n<li>ACK：確認番号入れといたよ</li>\n<li>FIN：通信終了したいよ</li>\n<li>RST：問題が起きたから通信リセットしたいよ</li>\n</ul>\n</li>\n<li>ウインドウサイズ(2)：このセグメントの送信者が受信可能なデータのサイズ\n<ul>\n<li>「私の受信能力はxxxです」というかんじ</li>\n</ul>\n</li>\n<li>チェックサム(2)</li>\n<li>緊急ポインタ(2)：なぞ</li>\n<li>オプション：任意項目，今回は関係ない</li>\n<li>データ：ペイロード．HTTPリクエストなど</li>\n</ul>\n<p>Linuxのプロトコルスタック「『シーケンス同期したいです，初期シーケンス番号はこちらです（SYN）』っと……．送信！」</p>\n<p>〜〜〜</p>\n<p>TAP「フレーム来たで」</p>\n<p>intr「シグナルで起こされました」</p>\n<p>ether_tapデバイスドライバ「tap0にフレームが来たで」</p>\n<p>ether「フレームを解析するで．プロトコルタイプは<code class=\"language-text\">0x0800</code>」</p>\n<p>net「登録されているプロトコルの中で<code class=\"language-text\">0x0806</code>はIP君やな」</p>\n<p>ip「IPパケットを解析するやで．<a href=\"https://www.rfc-editor.org/rfc/rfc791\">RFC 791</a>によると以下のような構造になってるで」</p>\n<ul>\n<li>バージョン(4ビット)：IPv4は4</li>\n<li>ヘッダ長(4ビット)：ヘッダの長さ．4オクテット単位．拡張情報が無いなら5</li>\n<li>サービス種別(1)：<a href=\"https://ja.wikipedia.org/wiki/Quality_of_Service\">QoS</a>機能？今回はとりあえず0</li>\n<li>全長(2)：IPヘッダを含むパケット全体の長さ</li>\n<li>識別子(2)：フラグメントの制御に使われる．割愛</li>\n<li>フラグ(3ビット)：フラグメントの制御に使われる．割愛</li>\n<li>断片位置(13ビット)：フラグメントの制御に使われる．割愛</li>\n<li>生存時間(1)：パケットの生存期間\n<ul>\n<li>ルータを通るたびにデクリメントされ，0になると破棄される．パケットがネットワーク上を無限ループするのを防ぐ</li>\n</ul>\n</li>\n<li>プロトコル(1)：上位のプロトコル番号．<a href=\"https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E7%95%AA%E5%8F%B7%E4%B8%80%E8%A6%A7\">TCPは6</a></li>\n<li>チェックサム(2)</li>\n<li>送信元アドレス(4)</li>\n<li>宛先アドレス(4)</li>\n<li>拡張情報：なぞ</li>\n<li>データ</li>\n</ul>\n<p>ip「ふむふむ，IPv4で拡張情報とフラグメントは無し，チェックサムは……よし一致するな．問題なさそうや．宛先は<code class=\"language-text\">192.168.70.2</code>やな．受信デバイス（tap0）に同じアドレスが付いとる，間違いなさそうや．上位のプロトコル番号は6か．ワイに登録されているプロトコルの中でこの番号なのは……TCPさんや（いうて今回はTCPさんしかおらんけど……）」</p>\n<p>ip「tcpさん，セグメントきたで」</p>\n<p>tcp「お，了解やで．まずセグメントのチェックサムを計算して……問題なさそうや．」</p>\n<p>tcp「宛先に対応するPCBは……1つあるわ．状態はLISTEN，接続を待っとるな．<a href=\"https://datatracker.ietf.org/doc/html/rfc9293#section-3.10.7.2\">RFC 9293の節3.10.7.2</a>のとおりに処理を進めていくで」</p>\n<p>tcp「まず，RSTフラグは……よし立ってないな．接続してないのに切断しようとするやつやったら無視しとったところや」</p>\n<p>tcp「次にACKフラグ……も立ってないな．ワイらはまだ何も送信してないのに『受信しました！』とか言われたらおかしいもんな」</p>\n<p>tcp「ではSYNフラグは……しっかり立っとるな！接続まちのワイに初期シーケンス番号を教えとるんや」</p>\n<p>tcp「ここで，LISTEN状態でSYNを受け取ったので，SYN_RECEIVED状態に移行する必要がある」</p>\n<p>tcp「PCBは一種のステートマシンになっていて，その状態遷移は以下の図で表されるんや」</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 582px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 108.93470790378008%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'436\\'%20viewBox=\\'0%200%20400%20436\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20218v218h401V0H0v218m381-81l-1%2024-1%2024c-1%202%201%203%203%202%202%200%202-1%201-1l-1-26-1-23\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/b5ad7/state_diagram.webp 582w\"\n              sizes=\"(max-width: 582px) 100vw, 582px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png 582w\"\n            sizes=\"(max-width: 582px) 100vw, 582px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n            alt=\"TCP接続の状態遷移図\"\n            title=\"TCP接続の状態遷移図\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<blockquote>\n<p>出典：Figure 5: TCP Connection State Diagram, <a href=\"https://datatracker.ietf.org/doc/html/rfc9293\">RFC 9293</a></p>\n</blockquote>\n<p>tcp「この図の以下のような表記は，上の条件が満たされたら下を実行して状態遷移しろってことみたいやな」</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  rcv SYN\n-----------\nsnd SYN,ACK</code></pre></div>\n<p>tcp「つまり，LISTEN状態でSYNを受け取ったら，SYN, ACKを送信してSYN_RECEIVED状態に移行しろって書いてあるわけや」</p>\n<p>tcp「というわけで，まずはSYN, ACK応答を最優先で行ってしまうで．PCBに必要な情報を突っ込んで」</p>\n<ul>\n<li>local（自分のアドレス）：受信セグメントの送信先</li>\n<li>foreign（相手のアドレス）：受信セグメントの送信元</li>\n<li>rcv.wnd（受信ウインドウ）：65535．自分のバッファは空だから</li>\n<li>rcv.nxt（次に受信するシーケンス番号）：受信セグメントのシーケンス番号 + 1\n<ul>\n<li>セグメントのシーケンス番号までは受信済み</li>\n<li>相手は今回のSYNでシーケンス番号を1消費したから，次回は，+1のシーケンスを送ってくるはず</li>\n</ul>\n</li>\n<li>irs（初期受信シーケンス番号）：受信セグメントのシーケンス番号</li>\n<li>iss（初期送信シーケンス番号）：ランダム値</li>\n</ul>\n<p>tcp「送信セグメントのヘッダの必要な部分を埋めて，チェックサムなども計算する．セグメントの意味は『先程のSYNを受信しました（ACK），ワイらの初期シーケンス番号はこちらです（SYN）』ってかんじやな．そしたらあとはIPさんおねがいやで」</p>\n<p>ip「了解や．まずはどのデバイスから送信するかを決めなあかんな，えーっと，ルーティングテーブルは……」</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">network</th>\n<th align=\"center\">netmask</th>\n<th align=\"center\">nexthop</th>\n<th align=\"center\">デバイス</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">192.168.70.0</td>\n<td align=\"center\">255.255.255.0</td>\n<td align=\"center\">255.255.255.255</td>\n<td align=\"center\">tap0</td>\n</tr>\n</tbody>\n</table>\n<p>ip「こうなっとるな．今回の宛先は<code class=\"language-text\">192.168.70.1</code>やから……<code class=\"language-text\">192.168.70.0/255.255.255.0</code>の行にヒットするな．しかもこれ，<code class=\"language-text\">nexthop</code>が<code class=\"language-text\">255.255.255.255</code>やから直接接続のルートや．したがって送信先アドレスは<code class=\"language-text\">nexthop</code>ではなく<code class=\"language-text\">192.168.0.1</code>にしとくで」</p>\n<p>ip「あとはIPヘッダの必要な部分埋めて……あ，送信先ハードウェアアドレスの部分やけど，arpさん，<code class=\"language-text\">192.168.70.1</code>のハードウェアアドレス知らんか？」</p>\n<p>arp「あ，それならARPキャッシュにあるな．<code class=\"language-text\">xx:xx:xx:xx:xx:xx</code>やで」</p>\n<p>ip「ありがとな，これで送信できる．netさん，お願いやで」</p>\n<p>net「デバイスの送信処理呼ぶで」</p>\n<p>ether_tapデバイスドライバ「etherさん，Ethernetフレームの構築を頼みます」</p>\n<p>ether「ether_tapさん．フレームできたで」</p>\n<p>ether_tap「よし，TAPに送信するで」</p>\n<p>TAP「おｋやで」</p>\n<p>tcp「これでSYN, ACKの応答完了や．最後にPCBの更新を忘れないようにするで」</p>\n<ul>\n<li>snd.nxt（次に送信すべきシーケンス番号）：iss + 1\n<ul>\n<li>さっきSYNを送信したのでシーケンス番号を1消費</li>\n</ul>\n</li>\n<li>snd.una（送信したが受信を確認していない最も古いシーケンス番号）：iss\n<ul>\n<li>さっき送信したSYN + ACK応答のこと</li>\n</ul>\n</li>\n<li>state（状態）：SYN_RECEIVED</li>\n</ul>\n<p>tcp「これで完了や」</p>\n<p>〜〜〜</p>\n<p>Linuxのプロトコルスタック「お！さっきのSYN要求にACKが返ってきた！加えて，相手の初期シーケンス番号もSYNで送られてきた．PCBにメモして，受信できたことをACKで応答しよう」</p>\n<p>Linuxのプロトコルスタック「SYN_SENT状態でSYN, ACKを受け取ったから，ESTABLISHED状態に移行できるね」</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 582px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 108.93470790378008%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'436\\'%20viewBox=\\'0%200%20400%20436\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20218v218h401V0H0v218m381-81l-1%2024-1%2024c-1%202%201%203%203%202%202%200%202-1%201-1l-1-26-1-23\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/b5ad7/state_diagram.webp 582w\"\n              sizes=\"(max-width: 582px) 100vw, 582px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png 582w\"\n            sizes=\"(max-width: 582px) 100vw, 582px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n            alt=\"TCP接続の状態遷移図\"\n            title=\"TCP接続の状態遷移図\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>〜〜〜</p>\n<p>TAP「フレーム来た（ｒｙ」</p>\n<p>intr「シグナルで起こされ（ｒｙ」</p>\n<p>ether_tapデバイスドライバ「tap0にフレームが（ｒｙ」</p>\n<p>ether「フレームを解析（ｒｙ」</p>\n<p>net「登録されているプロトコルの中で0x0806は（ｒｙ」</p>\n<p>ip「tcpさん，セグメントきた（ｒｙ」</p>\n<p>※今後ip以下は同じなので省略します</p>\n<p>tcp「お，さっきのSYN, ACKのACKが来たで．ここからは<a href=\"https://datatracker.ietf.org/doc/html/rfc9293#section-3.10.7.4\">RFC 9293の3.10.7.4節</a>にしたがうで」</p>\n<p>tcp「まずはシーケンス番号をチェックするで．ここでは主に，セグメントを受け入れ可能かを以下の条件でテストする」</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 501px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/3d8726ffbb19b7499ea1d53c99315e61/40bb7/seg_acceptability_test.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 75.64870259481037%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'303\\'%20viewBox=\\'0%200%20400%20303\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20152v151h401V0H0v152m0%200\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/3d8726ffbb19b7499ea1d53c99315e61/2484b/seg_acceptability_test.webp 501w\"\n              sizes=\"(max-width: 501px) 100vw, 501px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/3d8726ffbb19b7499ea1d53c99315e61/40bb7/seg_acceptability_test.png 501w\"\n            sizes=\"(max-width: 501px) 100vw, 501px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/3d8726ffbb19b7499ea1d53c99315e61/40bb7/seg_acceptability_test.png\"\n            alt=\"セグメントを受け入れ可能かテストする条件の表．RFC 9293のTable 6: Segment Acceptability Tests\"\n            title=\"セグメントを受け入れ可能かテストする条件の表．RFC 9293のTable 6: Segment Acceptability Tests\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<blockquote>\n<p>出典：Table 6: Segment Acceptability Tests, <a href=\"https://datatracker.ietf.org/doc/html/rfc9293\">RFC 9293</a></p>\n</blockquote>\n<p>tcp「今回は単なるACK応答やからセグメント長（データ長）は0，そして受信ウインドウは満タンや．したがって，『次に受信するべきシーケンス番号 &#x3C;= 受信したセグメントのシーケンス番号 &#x3C; 次に受信するべきシーケンス番号 + 受信ウインドウ』をテストする」</p>\n<p>tcp「要するに，届いたシーケンス番号が過去に巻き戻っておらず，それを受け入れるだけのウインドウがあるってことやな．今回は良さそうや」</p>\n<p>tcp「次に，ACKフラグがあるか確認するで．TCPでは初期の通信以外には常にACKをつけるはずや．よし，ちゃんと立ってるな」</p>\n<p>tcp「最後に次の条件をテストするで．『送信したが受信を確認していない最も古いシーケンス番号 &#x3C; 受信セグメントのack番号（相手が次に要求するシーケンス番号） &#x3C;= 次に送信すべきシーケンス番号』」</p>\n<p>tcp「つまり，『送信したが受信を確認していない最も古いシーケンス番号』が確認されて，かつ相手が要求するシーケンス番号がこちらの想定するそれを追い越していないってことやで」</p>\n<p>tcp「ここまで確認したらESTABLISHEDに入れるな．コネクション確立やで！」</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 582px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 108.93470790378008%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'436\\'%20viewBox=\\'0%200%20400%20436\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20218v218h401V0H0v218m381-81l-1%2024-1%2024c-1%202%201%203%203%202%202%200%202-1%201-1l-1-26-1-23\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/b5ad7/state_diagram.webp 582w\"\n              sizes=\"(max-width: 582px) 100vw, 582px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png 582w\"\n            sizes=\"(max-width: 582px) 100vw, 582px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n            alt=\"TCP接続の状態遷移図\"\n            title=\"TCP接続の状態遷移図\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>tcp「このPCBを使ってる各所に<code class=\"language-text\">ctx</code>で通知したろ」</p>\n<p>〜〜〜</p>\n<p>さっき一旦眠っていたtcp「はっ……！PCBの状態が変わったみたいやな．お！コネクション確立しとるやんけ．TCP OPEN完了やで〜」</p>\n<h3 id=\"step-2-tcp-receive-call\" style=\"position:relative;\"><a href=\"#step-2-tcp-receive-call\" aria-label=\"step 2 tcp receive call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: TCP RECEIVE Call</h3>\n<p>ユーザープログラム「さっきのソケットでTCP RECEIVE Callするよ」</p>\n<p>tcp「了解やで．えーと，現状の受信ウインドウは65535，これは満タンやから受信バッファには何も入ってないな．なにか入ってくるまで<code class=\"language-text\">ctx</code>で眠るで……」</p>\n<p>〜〜〜</p>\n<p>Firefox「コネクション確立したからHTTPリクエスト送るよ」</p>\n<p>〜〜〜</p>\n<p>tcp「おっ，セグメントが来たで」</p>\n<p>tcp「まずはチェックサムを確認するで」</p>\n<p>tcp「次に例のシーケンス番号確認や」</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 501px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/3d8726ffbb19b7499ea1d53c99315e61/40bb7/seg_acceptability_test.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 75.64870259481037%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'303\\'%20viewBox=\\'0%200%20400%20303\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20152v151h401V0H0v152m0%200\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/3d8726ffbb19b7499ea1d53c99315e61/2484b/seg_acceptability_test.webp 501w\"\n              sizes=\"(max-width: 501px) 100vw, 501px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/3d8726ffbb19b7499ea1d53c99315e61/40bb7/seg_acceptability_test.png 501w\"\n            sizes=\"(max-width: 501px) 100vw, 501px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/3d8726ffbb19b7499ea1d53c99315e61/40bb7/seg_acceptability_test.png\"\n            alt=\"セグメントを受け入れ可能かテストする条件の表．RFC 9293のTable 6: Segment Acceptability Tests\"\n            title=\"セグメントを受け入れ可能かテストする条件の表．RFC 9293のTable 6: Segment Acceptability Tests\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>tcp「今回はデータがあって受信ウインドウは満タンやから，以下のどちらかを満たせばええ」</p>\n<ol>\n<li>次に受信すべきシーケンス番号 &#x3C;= 受信セグメントのシーケンス番号 &#x3C; 次に受信すべきシーケンス番号 + 受信ウインドウ</li>\n<li>次に受信すべきシーケンス番号 &#x3C;= 受信セグメントのシーケンス番号 + 受信セグメントのデータサイズ - 1 &#x3C; 次に受信すべきシーケンス番号 + 受信ウインドウ</li>\n</ol>\n<p>tcp「結局のところ，シーケンス番号が巻き戻っておらず，それを受信できるだけのウインドウがあるってことやな．本質的にはさっきと同じや」</p>\n<p>tcp「次に，ACKがセットされていることを確認するで」</p>\n<p>tcp「そして，次の条件をテストするで．『送信したが受信を確認していない最も古いシーケンス番号 &#x3C; 受信セグメントのack番号（相手が次に要求しているシーケンス番号） &#x3C;= 次に送信すべきシーケンス番号』」</p>\n<p>tcp「これはさっきも出てきた条件やな．『送信したが受信を確認していない最も古いシーケンス番号』が確認されて，かつ相手が要求するシーケンス番号がこちらの想定するそれを追い越していない」</p>\n<p>tcp「これを確認したら，<code class=\"language-text\">snd.una</code>（送信したが受信を確認していない最も古いシーケンス番号）を，受信セグメントのACK番号で更新するで．受信セグメントのACK番号は，言い換えれば相手が期待している次のシーケンス番号，つまりこのセグメントに対してワイらが後で送信するACK応答のシーケンス番号となるから，<code class=\"language-text\">snd.una</code>の定義と一致するで」</p>\n<p>tcp「次に，相手さんの受信ウインドウ（つまりこちらの送信ウインドウ）の更新を行うで．更新は以下どちらかが真なら行うで」</p>\n<ol>\n<li>直近のウインドウ更新でのシーケンス番号 &#x3C; 受信セグメントのシーケンス番号</li>\n<li>直近のウインドウ更新でのシーケンス番号 == 受信セグメントのシーケンス番号 &#x26;&#x26; 直近のウインドウ更新での確認番号 &#x3C; 受信セグメントの確認番号</li>\n</ol>\n<p>tcp「要は過去のセグメントでウインドウの更新を行わないための条件やな．今回は新しいセグメントやからPCBの値を次のように更新や」</p>\n<ul>\n<li>snd.wnd（送信ウインドウ，相手の受信ウインドウ）：受信セグメントのウインドウ値</li>\n<li>snd.wl1（ウインドウ更新でのシーケンス番号）：受信セグメントのシーケンス番号</li>\n<li>snd.wl2（ウインドウ更新での確認番号）：受信セグメントの確認番号</li>\n</ul>\n<p>tcp「ここでいったん<code class=\"language-text\">ctx</code>で関係者を起こすで．もし相手の受信ウインドウが足りずに送信を待っている処理があれば，ここでそれが回復したかもしれんからな．伝えてあげなあかんで」</p>\n<p>〜〜〜</p>\n<p>さっき眠っていたtcp「はっ……！起こされた，けど受信バッファにまだ何も入っとらんやんけ．また寝るわ」</p>\n<p>〜〜〜</p>\n<p>tcp「そしたら，いよいよデータを受信バッファへコピーするで」</p>\n<p>tcp「無事にデータを移したので，PCBを次のように更新するやで」</p>\n<ul>\n<li>rcv.nxt（次に受信すべきシーケンス番号）：セグメントのシーケンス番号 + データサイズ\n<ul>\n<li>つまり，現状のデータの位置 + データサイズが，次に受け取るべきデータの位置となるわけやな</li>\n</ul>\n</li>\n<li>rcv.wnd（受信ウインドウ）：rcv.wnd（受信ウインドウ） - データサイズ\n<ul>\n<li>バッファが埋まった分，受信能力が減少したわけや</li>\n</ul>\n</li>\n</ul>\n<p>tcp「そしてACK応答するで」</p>\n<p>tcp「最後に，<code class=\"language-text\">ctx</code>で関係者を起こさなアカンな．受信バッファの変化を待っている処理がおるかもしれんし」</p>\n<p>〜〜〜</p>\n<p>さっき眠っていたtcp「はっ……！お，今度は受信バッファになんか入っとるな．こいつをユーザープログラムの領域にコピーするで〜」</p>\n<p>tcp「今回はリングバッファなどを実装していないから，読み込んだ領域を切り詰めてっと……」</p>\n<p>tcp「最後に，読み出した分のデータサイズを受信ウインドウに加算するで．こうして受信能力が回復するわけやな」</p>\n<h3 id=\"step-3-tcp-send-call\" style=\"position:relative;\"><a href=\"#step-3-tcp-send-call\" aria-label=\"step 3 tcp send call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: TCP SEND Call</h3>\n<p>ユーザープログラム「さっきのソケットでTCP SEND Callするよ．内容は<code class=\"language-text\">HTTP/1.1 200 OK\\r\\n\\r\\n&lt;html>&lt;head>&lt;title>hello&lt;/title>&lt;/head>&lt;body>world&lt;/body>&lt;/html></code>」</p>\n<p>tcp「まずは相手さんが受信できるかどうか確認するやで．相手さんの受信能力は，『snd.wnd - (snd.nxt - snd.una)』となるんや」</p>\n<p>tcp「相手さんの受信能力は基本的に送信ウインドウからわかるんやけど，これは『相手さんが申告してきた量』や．つまり，相手からの申告が追いついていない分は差し引いて送ってやる必要がある．例えば，こちらの送信したデータがまだネットワークの途中にある場合，それらを送信ウインドウから引いた量しか送れないってわけや．それが『(snd.nxt - snd.una)』の部分で，送信したけど受信を確認していないデータの量や」</p>\n<p>tcp「今回の場合はデータも短いし，送信ウインドウも満タンやから即座に送信して終わりや．ここでもし送信できる量が0やったり，一部しか送信できなかったり，Ethernetのmtuで通信を分割しなければならなかったりする場合は，<code class=\"language-text\">ctx</code>で眠る必要がある」</p>\n<p>〜〜〜</p>\n<p>Firefox「うわ，雑なHTTPレスポンスきた．Content-Lengthが無いからもう少しコンテンツが続くのかな……？」</p>\n<h3 id=\"step-4-tcp-close-call\" style=\"position:relative;\"><a href=\"#step-4-tcp-close-call\" aria-label=\"step 4 tcp close call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: TCP CLOSE Call</h3>\n<p>ユーザープログラム「TCP CLOSE Callで通信ブチ切るよ」</p>\n<p>tcp「というわけでACK, FIN要求送るやで」</p>\n<p>tcp「FINでシーケンス番号を1消費したから，<code class=\"language-text\">snd.nxt</code>をインクリメントするで」</p>\n<p>tcp「状態を<code class=\"language-text\">FIN_WAIT1</code>に移行するやで」</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 582px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 108.93470790378008%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'436\\'%20viewBox=\\'0%200%20400%20436\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20218v218h401V0H0v218m381-81l-1%2024-1%2024c-1%202%201%203%203%202%202%200%202-1%201-1l-1-26-1-23\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/b5ad7/state_diagram.webp 582w\"\n              sizes=\"(max-width: 582px) 100vw, 582px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png 582w\"\n            sizes=\"(max-width: 582px) 100vw, 582px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/e8ec508cdc89b36080dd85dff26b2df6/f86ec/state_diagram.png\"\n            alt=\"TCP接続の状態遷移図\"\n            title=\"TCP接続の状態遷移図\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>〜〜〜</p>\n<p>Linuxのプロトコルスタック「あ，FIN要求だ．ACKを送信して<code class=\"language-text\">CLOSE_WAIT</code>に移行するか．Firefoxさん，接続切られました」</p>\n<p>Firefox「なるほど，コンテンツはここで終わりなのね．じゃあ画面にページを表示するか」</p>\n<p>ぼく「ページが表示された！キャッキャ！」</p>\n<p>Firefox「こっちも接続をCLOSEします」</p>\n<p>Linuxのプロトコルスタック「じゃあこちらもFINを送信して<code class=\"language-text\">LAST_ACK</code>状態に遷移します」</p>\n<p>〜〜〜</p>\n<p>tcp「お，FINのACKが来たな．チェックサムやシーケンス番号の検査などはさっきと同様やから割愛するで」</p>\n<p>tcp「受信セグメントの確認番号が，次に送信すべきシーケンス番号と一致することを確認したら<code class=\"language-text\">FIN_WAIT2</code>に移行できる」</p>\n<p>tcp「おお，続けてFINが来たな」</p>\n<p>tcp「そしたらFINに対するACKを応答するか」</p>\n<p>tcp「最後に，<code class=\"language-text\">TIME_WAIT</code>に移行して終了や．本来はここから時間が経つとPCBが削除されてCLOSEDになるんやけど，今回の実装では割愛や」</p>\n<p>〜〜〜</p>\n<p>Linuxのプロトコルスタック「さっきのFINにACKが来たので<code class=\"language-text\">CLOSED</code>状態に移行して終了です」</p>\n<h2 id=\"3-プロトコルスタックの終了処理\" style=\"position:relative;\"><a href=\"#3-%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%81%AE%E7%B5%82%E4%BA%86%E5%87%A6%E7%90%86\" aria-label=\"3 プロトコルスタックの終了処理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. プロトコルスタックの終了処理</h2>\n<p>先程は割愛しましたが，Webサーバーの終了後に以下のような終了処理を行っていました．</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// プロトコルスタックの終了</span>\n<span class=\"token function\">net_shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>特に難しいことはしていません．まず，すべてのネットワークデバイスの終了処理を実行します．ここでTAPデバイスのファイルディスクリプタもcloseされます．</p>\n<p>最後に，intrのシグナル用スレッドを終了して終わりです．</p>\n<p>おつかれさまでした．</p>\n<h2 id=\"おまけもう少し実用的なwebサーバーに改良してみた\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91%E3%82%82%E3%81%86%E5%B0%91%E3%81%97%E5%AE%9F%E7%94%A8%E7%9A%84%E3%81%AAweb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AB%E6%94%B9%E8%89%AF%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F\" aria-label=\"おまけもう少し実用的なwebサーバーに改良してみた permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おまけ：もう少し実用的なWebサーバーに改良してみた</h2>\n<p>このブログを配信できるようにしてみました．</p>\n<p>まず，リクエストのたびにコネクションを切っていてはPCBがいくつあっても足りないので，ちゃんと<code class=\"language-text\">Content-Length</code>を返すようにしてコネクションを使いまわし，Keep-Aliveっぽい動作にしました． <strong>っぽい</strong> と言っているのには理由があって，このサーバーはTCP RECEIVE Callごとに1つのリクエストしか処理しません．セグメントをまたいだリクエストは無視する雑な実装です．</p>\n<p>次に，ブラウザは6並列で接続してくるので，こちらも並列で受け付けるようにpthreadを使いました．</p>\n<p>また，URLのパースも行いました．Getパラメタを削除したり，<code class=\"language-text\">/</code>で終わっているときに<code class=\"language-text\">index.html</code>を補完したり，URIデコードを自前で行ったり……</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/ukYzd1mUQJI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>文字がたくさん流れててかっこいいですね．</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// URIデコード処理</span>\n<span class=\"token class-name\">size_t</span> <span class=\"token function\">uri_decode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> srclen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">http_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> soc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>reqbuf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> reqsize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// URLをパースする</span>\n  <span class=\"token comment\">// ファイルを開く</span>\n  <span class=\"token comment\">// ファイルを読んでレスポンスする</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">tcp_send</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Worker</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">worker_thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 通信が切れたら再度接続を待つ</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> soc <span class=\"token operator\">=</span> <span class=\"token function\">tcp_open_rfc793</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 接続が切れるまで同じソケットで通信する</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">http_handler</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">tcp_close</span><span class=\"token punctuation\">(</span>soc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// プロトコルスタックを初期化</span>\n\n  <span class=\"token class-name\">pthread_t</span> thread<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 16並列で受け付ける</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// プロトコルスタックを終了</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/sititou70/klab-protocol-stack-tutorial/blob/work/src/test/static-http-server.c\">改良したWebサーバーのすべてのコード</a></p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Webページが表示されるまでを，プロトコルスタックの観点から追いかけてみました．今回の例は，名前解決もTLSも無しという最も単純なものでしたが，それでも1つずつ追いかけていくと結構な分量になりました．</p>\n<p>今回触れた内容はプロトコルスタックが持つ機能の一部にすぎません．例えばカスサーバーを動かした時の<code class=\"language-text\">tcp.c</code>のカバレッジを取ってみると</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 665px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/6ce4d677b6aebb97969ee6476a93de9c/be677/tcp_cov.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 38.195488721804516%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'153\\'%20viewBox=\\'0%200%20400%20153\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M97%208c-4%205-2%2012%204%2010%205-1%208-7%206-10-3-3-7-2-10%200m70%200l-2%201c-2%200-6%202-6%204l-1-1c-3-5-9-3-10%202-2%205%204%206%208%202l2-1c0%203%202%204%206%203%203%200%204-1%205-6V6l-2%202m82%203c-3%203-2%206%201%207%202%201%202%201-1%201-3%201-2%202%200%203%203%200%207-2%207-7l2-4c0-3-7-2-9%200m28-1l-2%204c0%205%202%206%204%201%201-4%204-4%204-1%200%204%203%205%207%204l3-1-4-1-3-1h3c3%200%205-2%203-5-2-2-5-1-7%201h-2c1-1%200-2-3-2l-3%201M4%2029c-1%201%2065%201%20196%201l198-1H4m342%2023v6h51V45h-51v7M50%2065c0%204%202%205%205%203%202-2%202-2%202%200%201%202%206%201%206-2%200-2%200-2%201%200%200%202%203%204%204%202h1c2%202%205%201%205-2%200-2-3-4-4-2-1%201-2%200-3-1-1-2-2-2-3-1s-2%202-4%201c-1%200-2%200-2%202h-1c-3-6-7-5-7%200M3%2078l198%201a7378%207378%200%20000-2L3%2078m21%2023v7h76V93H24v8m77%200v7h74l-1%206v7h108V93H101v8m182%200v7h95V93h-95v8m-177%2014v4h62v-8h-62v4m36%200v3h25v-6h-25v3M3%20134l198%201a7378%207378%200%20000-2L3%20134\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/6ce4d677b6aebb97969ee6476a93de9c/5659d/tcp_cov.webp 665w\"\n              sizes=\"(max-width: 665px) 100vw, 665px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/6ce4d677b6aebb97969ee6476a93de9c/be677/tcp_cov.png 665w\"\n            sizes=\"(max-width: 665px) 100vw, 665px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/6ce4d677b6aebb97969ee6476a93de9c/be677/tcp_cov.png\"\n            alt=\"tcp.cのカバレッジレポート．約58％の機能しか実行されていない\"\n            title=\"tcp.cのカバレッジレポート．約58％の機能しか実行されていない\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>約58％の機能しか実行されていません．</p>\n<p>また，今回のプロトコルスタックは学習用のものなのでシンプルな方です．例えば，実装した<code class=\"language-text\">tcp.c</code>は約1,000行しかありませんが，Linux 6.0の<code class=\"language-text\">net/ipv4/tcp.c</code>は約4,800行あり，関連ファイル全体（<code class=\"language-text\">net/ipv4/tcp*</code>）では <strong>約30,700行</strong> あります．こういうプログラムを書けるすごい人たちのおかげでインターネットを使えていると思うと，頭が上がりませんね……．</p>\n<p>実際，プロトコルスタックを書くのはとても大変です．通信は，その一部が間違っているだけで全体がおかしくなります．そのたびに<code class=\"language-text\">printf</code>デバッグしたり，Wiresharkと見つめ合ったまま休日が終わっちゃったり，プロトコルを間違って理解していることが判明し，潔くRFCを読んだりしてました．</p>\n<p>しかし，普段隠れている仕組みがわかるというのは，それらの苦労を上回るくらいとっても楽しいものです．</p>\n<p>最後になりますが，コンパクトな実装と丁寧な学習資料が無ければ，今回の勉強は確実に挫折していたと言えます．<a href=\"https://twitter.com/pandax381\">@pandax381</a>さん，素晴らしい資料をありがとうございました．</p>\n<p>ネットワーク初心者なので，プロトコルの理解や関西弁の使い方に間違いがあればマサカリをお願いします．</p>\n<p>読んでいただきありがとうございました．</p>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">今回も<a href=\"https://qiita.com/Yametaro\">無職 やめ太郎（本名）さん</a>構文リスペクトで行きます．登場人物が多いので最適かと思いました．苦手な方にはすみません．<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","frontmatter":{"title":"プロトコルスタックを写経してネットワークを完全に理解したかった日記","date":"2022/10/16"},"fields":{"slug":"/プロトコルスタックを写経してネットワークを完全に理解したかった日記/"},"id":"4d43646f-8aa6-52b6-b0b6-5160f0be2b05"},"firstImage":{"imageFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/1ed3223e44a9aea52daac185130e5f3c/e4357/simple_page.png","srcSet":"/static/1ed3223e44a9aea52daac185130e5f3c/2db04/simple_page.png 69w,\n/static/1ed3223e44a9aea52daac185130e5f3c/e240f/simple_page.png 139w,\n/static/1ed3223e44a9aea52daac185130e5f3c/e4357/simple_page.png 277w","sizes":"(min-width: 277px) 277px, 100vw"},"sources":[{"srcSet":"/static/1ed3223e44a9aea52daac185130e5f3c/815ee/simple_page.webp 69w,\n/static/1ed3223e44a9aea52daac185130e5f3c/34965/simple_page.webp 139w,\n/static/1ed3223e44a9aea52daac185130e5f3c/ab4c6/simple_page.webp 277w","type":"image/webp","sizes":"(min-width: 277px) 277px, 100vw"}]},"width":277,"height":204}}}},"relatedMarkdownRemarks":{"posts":[{"id":"75696ec6-74a3-5046-8a3c-f39b36d92311","frontmatter":{"draft":null}},{"id":"a091877c-69b8-59f9-8963-1af334fd573c","frontmatter":{"draft":null}},{"id":"63f3c7ad-6c59-52b5-9816-78fd348955ff","frontmatter":{"draft":true}},{"id":"0116f663-28d1-507a-b5ab-b189801dd408","frontmatter":{"draft":true}},{"id":"3b696b96-130d-50de-a673-dc1367f32387","frontmatter":{"draft":null}},{"id":"2f30c3f1-0d66-590b-8dba-7836df701d46","frontmatter":{"draft":null}},{"id":"1162dccb-e1bf-576d-a5c6-0993394feb0a","frontmatter":{"draft":true}},{"id":"e4fb8478-b1ad-59eb-95e8-8c5e0500d3f4","frontmatter":{"draft":null}},{"id":"f5a25ce1-67a6-51b2-9bf1-f9fbacb41ad1","frontmatter":{"draft":true}},{"id":"0c5568c9-6d87-56ed-ab0e-caeb9c1aafa4","frontmatter":{"draft":null}},{"id":"7a8fc278-a847-5b68-8b74-a83193ba3f55","frontmatter":{"draft":null}},{"id":"ebae7878-c4ee-505e-81e2-3d3fc47ea826","frontmatter":{"draft":null}},{"id":"01deffb8-0d62-54c6-9e41-20832cbc3c6e","frontmatter":{"draft":null}},{"id":"067a602f-4581-5707-b896-73190dd8c889","frontmatter":{"draft":null}},{"id":"1086a735-7173-58cc-a813-c540a563aedf","frontmatter":{"draft":false}},{"id":"12222bfa-2e8e-51ee-99d8-8a19902351f5","frontmatter":{"draft":null}},{"id":"1509de3c-7308-5e40-a885-f5ebdb089774","frontmatter":{"draft":null}},{"id":"2239c111-61d9-556e-9045-9e3707553db4","frontmatter":{"draft":true}},{"id":"27f10a38-0ecb-539f-a717-7e40a41bbd10","frontmatter":{"draft":null}},{"id":"29b79017-f96d-5b04-8d01-5b8ee761ebed","frontmatter":{"draft":null}},{"id":"2cfd9e33-b4e1-53e4-884d-d8a6760f3387","frontmatter":{"draft":true}},{"id":"3908aafc-c8d3-5c67-821f-0866592449f2","frontmatter":{"draft":true}},{"id":"3a3c4125-9986-53bb-8b96-ae29936c96ab","frontmatter":{"draft":null}},{"id":"46a22c41-5455-557c-85d4-973a6e2220ee","frontmatter":{"draft":null}},{"id":"48c65a15-67ca-57d0-9edc-ebcb868f7ad2","frontmatter":{"draft":true}},{"id":"49cf25c1-03f6-575e-8c2f-638ccd6198ea","frontmatter":{"draft":null}},{"id":"4ed3b747-2001-54f4-9661-3acab89ce275","frontmatter":{"draft":null}},{"id":"4edc1b46-b395-5783-af6a-818b8fc9c2dc","frontmatter":{"draft":null}},{"id":"50951bb1-eb92-5663-a3d8-8f35f73a1322","frontmatter":{"draft":null}},{"id":"50d3cc2a-de7a-5b9a-a8d8-754415fe4d94","frontmatter":{"draft":null}},{"id":"5888c50d-8414-5e8f-b0dc-28a31b29053d","frontmatter":{"draft":null}},{"id":"69a4aa90-b728-522c-b34f-abee49825c45","frontmatter":{"draft":true}},{"id":"73ab4455-f04d-5320-bf3a-90b9f7441d13","frontmatter":{"draft":null}},{"id":"73d6ab42-b3e6-5663-a175-b1f3d69c29e1","frontmatter":{"draft":null}},{"id":"75550af2-8134-5467-a07d-abbb5a4f6b7c","frontmatter":{"draft":true}},{"id":"7778d041-a5bf-536a-a36f-c0dbc5e08ac7","frontmatter":{"draft":true}},{"id":"78349b16-6e41-5fef-ae38-bcdc5ff297ef","frontmatter":{"draft":true}},{"id":"7d6499d9-277c-5f07-b8b1-98ae40c50c42","frontmatter":{"draft":null}},{"id":"7d79eb4b-cd4a-5621-a67a-91d9a24dce05","frontmatter":{"draft":null}},{"id":"82d43655-ea2a-52cd-97a3-16b7b28ad150","frontmatter":{"draft":null}},{"id":"871ac696-39ea-5c64-94f3-5dc4b73b5770","frontmatter":{"draft":true}},{"id":"8b3e46c2-1a1e-5af0-8900-7972c7285d15","frontmatter":{"draft":null}},{"id":"8f7b1b24-7738-5b97-bfb6-fd763f11a664","frontmatter":{"draft":true}},{"id":"961ec1e6-3f2b-59d9-a33f-dad76cf67f47","frontmatter":{"draft":null}},{"id":"97f01467-e3a1-58e1-b2a4-db77354cc1a3","frontmatter":{"draft":null}},{"id":"9f02de74-61a0-5daf-a048-1c1022e08fe4","frontmatter":{"draft":null}},{"id":"9f24363b-ee3e-54bf-8a18-46ea3b269bea","frontmatter":{"draft":null}},{"id":"a190aac4-0483-5e02-b1d3-261f3b5f313a","frontmatter":{"draft":null}},{"id":"a6c64123-b824-5224-8027-90eb12040396","frontmatter":{"draft":null}},{"id":"b4251348-b618-5b5b-a2c8-e4c6b2431b83","frontmatter":{"draft":true}},{"id":"be594923-185e-5cca-95b6-5267b3c9fc8c","frontmatter":{"draft":null}},{"id":"bfee69af-7d7f-5d87-9680-d2e9b60f8416","frontmatter":{"draft":null}},{"id":"c2249b7b-b97e-5cf4-8ea9-8024e96851b7","frontmatter":{"draft":true}},{"id":"c2db052c-95c6-5094-935b-9eb39f5c762a","frontmatter":{"draft":null}},{"id":"c5e2431a-cf05-5024-b833-e1c69f680d44","frontmatter":{"draft":null}},{"id":"c6def021-b8da-5dbe-ad3e-811d9286424d","frontmatter":{"draft":true}},{"id":"c7a5adfb-149b-5469-ba35-7421e2101951","frontmatter":{"draft":null}},{"id":"cbdf3192-973c-5d87-9cf1-bb9110e9a169","frontmatter":{"draft":null}},{"id":"d29b4513-0609-5cfc-af49-817467dbed1f","frontmatter":{"draft":null}},{"id":"d4d1afa4-f2f9-5942-ae36-2826fb938af5","frontmatter":{"draft":null}},{"id":"db26c6b9-37b4-5cc4-b1ec-c61dc667863e","frontmatter":{"draft":null}},{"id":"dd0c41cf-0a03-5b89-b5a2-f64859aeae63","frontmatter":{"draft":null}},{"id":"e322eac2-bd89-5347-b20d-d050d303a6be","frontmatter":{"draft":null}},{"id":"e376b2d4-df91-5b82-af7a-a8d02763e922","frontmatter":{"draft":true}},{"id":"e83330dc-2312-5ae6-95fa-53e86909f42b","frontmatter":{"draft":true}},{"id":"eba9aa6a-6e21-5f1b-a0eb-7b6bfb1e04f1","frontmatter":{"draft":null}},{"id":"ed7af7f9-75f5-59be-9063-de564576eed7","frontmatter":{"draft":true}},{"id":"f06a6ae0-e961-504c-8dab-a60489c0557a","frontmatter":{"draft":true}},{"id":"f49ce388-e81c-5425-af59-9902f125c20f","frontmatter":{"draft":null}},{"id":"fd6eab68-17d3-5395-8b2b-54a6efe43ebb","frontmatter":{"draft":null}}]}},"pageContext":{"id":"4d43646f-8aa6-52b6-b0b6-5160f0be2b05"}},"staticQueryHashes":["1530353647","2576926420","63159454"]}