{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/Zコンビネータを思いつきたい/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sititou70.github.io"}},"markdownRemark":{"excerpt":"友達とラムダ計算の話をしていて、Z…","html":"<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 660px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/6646350335213f6d52c5f982263a1329/07911/top.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 62.272727272727266%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'249\\'%20viewBox=\\'0%200%20400%20249\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20125v124h401V0H0v125m332-89c-3%200-2%202%200%203l1%202c-1%201-5-1-5-2l-2-1-2%201h-1c-1-2-13-1-15%201s-2%202-3%200c-2-2-6-2-6%200l-2%201-3-1-2-1-3%201c0%202-4%202-6%201h-8l-3%201c1%202%201%202-1%202-2-1-4%200-7%201l-9%203-5%203-2%201c-2%200-4%202-2%203%202%202%201%203-1%202-2-2-6-2-6%200l-1%202h-2l-2%201-2%203-1%201c-2-2-4%200-4%202%201%202%200%202-1%201l-2%201v1c-2%200-11%2010-11%2012l-1%206-2%205h-10c-9%200-9%200-9%203l-1%202c-2%200-14%205-16%207-3%202%200%203%205%202%207-3%207-2%200%201-5%203-7%205-5%206l6-1c7-3%209-2%206%200-1%202-1%202%201%202l4-1%201-1c-1-1%207-7%209-7s1%202-1%204c-5%204-1%202%207-3%208-7%2010-7%204-1-4%204-3%205%202%202l3-2v5l-2%207-2%203%202%201c2%201%201%201-3%201l-6-1c1-1-1-1-10%201-2%200-3%201-3%203v2l-4-3c-5-5-7-5-9%201l-1%206-2%201c-2%201-3%205-1%205l6-1c7-3%208-2%201%201-6%202-8%203-8%205s0%202%206%200h9c-2%202%203%201%208-3%206-4%206-4%208-2%202%203%2012-6%2012-11%200-4%200-4%202%203l2%203%201%201%201%204%201%203%206-2c4-1%207-2%208-1l-2%201-3%202h7c0-2%208-1%2011%201l3%201c5-3%207-2%2010%202%204%205%203%205%2010%202%205-2%206-2%205-4%200-3%202-4%2010-5%203-1%203-1%203%201-1%202%202%202%202%200l4-1c2%201%209-1%209-3-1-3%203-5%205-2%201%202%202%202%207%200l6-4h8c5-2%205-3%205-5l-1-2%202%202c2%202%202%202%2012-1%201-1%201-2-1-5-2-4-2-4-6-4h-3l2-2c2-2%205-4%208-4%206-3%208-4%2010-11%203-8%202-15-2-21a494%20494%200%2001-7-16v-5c-1%201-1%201-1-1%200-5-7-13-13-17h-6m-176%2069c-2%200-2%200%200%203s2%205%202%2011c-1%2011-3%2011-4%201v-5h-4c-9%200-9%200-9%2011l1%205%203%201c3%203%204%202%204%200l-1-2c-2%201-3-5-2-9%202-3%203-4%203-2l-1%202v1l1%203c0%202%200%203%202%203s4%202%203%204l2%207c3%207%201%2023-2%2017l-1-6c1-6-1-8-7-6-4%202-4%202-4%200v-1c-1%200-2%203-3%2013l1%206%205%202c3%201%203%201%203-1l-1-2c-2%201-3-7-2-10l2-3c2%200%202%202%201%203l-1%201%201%201c1-1%201%200%201%202%200%203%200%204%202%204%203%200%205%203%203%205-2%201%203%202%205%200%201-1%201-1%201%201-1%203%200%203%202-1%203-4%203-6%200-3s-3%201%200-7c2-7%202-13-1-17-2-2-2-3-1-3l3-3c1-3%201-4-1%200-3%204-3%202%200-6s3-14-2-18l-4-2m-18%206l-2%203-2%203-1%203-1%206c-2%207-2%207%200%206l1%201%202%204c2%203%202%204%200%204l-1%202c1%201%200%202-1%203l-2%203v6c-2%204-2%2012-1%2014v-4c0-4%200-5%201-2%201%205%203%207%207%209%204%201%205%201%202-3-6-7-6-21%201-28v-4c-6-5-5-19%201-25%202-2%200-3-4-1m-7%203l-4%206c-2%203-3%205-5%205s-5%201-10%206v8l-1%202c-1%201-1%202-2%201l-1%201%201%204h14c1-2%201-3-1-2-1%201-1%201-1-3%201-5%202-6%204-2l2%203c2%200%201%201-1%204l-3%206c0%201-1%202-2%201-6-1-14%208-12%2012%201%203%201%206-1%206l-2%201v1l1%202c-1%203%204%204%207%202s5-1%205%201%202%201%203-2v-2h-2c-1-7%201-11%202-6%202%204%207%207%2010%207h1l1%201c3%200%202-1-1-5-2-2-2-2-1%200%201%203-1%202-4-2-4-7-2-22%204-27v-1c-6-3-5-22%201-27%202-1%201-2-2-1m65%2039l-5%203-2-2c-3-2-5-2-7-1-2%200-5%207-4%208l13-4%204%203%203%202%205-4%204-3-3-3c-3-4-3-4-8%201m-106%209c-1%201%201%202%205%202h4l-3%202c-1%201-2%202-1%203h-2v3l2%201c-2%202%200%201%203-1l4-2%202-7c-1-2-13-3-14-1m-5%2019l-4%204-5%203c-3%201-3%206%200%207l2%201%202%203c6%207%2020%202%2020-6l1-4c2-1-6-8-8-8h-8\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/6646350335213f6d52c5f982263a1329/6576e/top.webp 660w\"\n              sizes=\"(max-width: 660px) 100vw, 660px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/6646350335213f6d52c5f982263a1329/07911/top.png 660w\"\n            sizes=\"(max-width: 660px) 100vw, 660px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/6646350335213f6d52c5f982263a1329/07911/top.png\"\n            alt=\"(g) =&gt; ((h) =&gt; g((n) =&gt; h(h)(n)))((h) =&gt; g((n) =&gt; h(h)(n)))\"\n            title=\"(g) =&gt; ((h) =&gt; g((n) =&gt; h(h)(n)))((h) =&gt; g((n) =&gt; h(h)(n)))\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>友達とラムダ計算の話をしていて、Zコンビネータを天下り的に与えられるのが納得できなかったので、導出を追いかけようと思います。</p>\n<h2 id=\"普通の再帰関数\" style=\"position:relative;\"><a href=\"#%E6%99%AE%E9%80%9A%E3%81%AE%E5%86%8D%E5%B8%B0%E9%96%A2%E6%95%B0\" aria-label=\"普通の再帰関数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>普通の再帰関数</h2>\n<p><code class=\"language-text\">n</code>の階乗を求める関数<code class=\"language-text\">f</code>を、再帰を使って普通に書いてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>今回の目標は、代入を使わずに<code class=\"language-text\">f</code>を実装することです。上記のコードは<code class=\"language-text\">const f = </code>と書いているのでダメです。</p>\n<h2 id=\"代入を使わずに再帰する\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E5%85%A5%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%9A%E3%81%AB%E5%86%8D%E5%B8%B0%E3%81%99%E3%82%8B\" aria-label=\"代入を使わずに再帰する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代入を使わずに再帰する</h2>\n<p>代入が使えないということで、とりあえず<code class=\"language-text\">const f = </code>を削除してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>このコードは動きません。<code class=\"language-text\">f</code>がどこにもないからです。</p>\n<p>ラムダ計算という関数しかない世界で、<code class=\"language-text\">f</code>をどこかからもらってくるには、引数で受け取るしかないはずです。<code class=\"language-text\">(f) => </code>を先頭に追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>この新しい関数を<code class=\"language-text\">g</code>と呼ぶことにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gの定義：\n  (f) => (n) => n === 0 ? 1 : n * f(n - 1)</code></pre></div>\n<p><code class=\"language-text\">g</code>は、<code class=\"language-text\">f</code>を受け取って<code class=\"language-text\">f</code>を返す関数です。引数はそのまま<code class=\"language-text\">f</code>であり、戻り値である<code class=\"language-text\">(n) => n === 0 ? 1 : n * f(n - 1)</code>もまた<code class=\"language-text\">f</code>の実装そのものだからです。</p>\n<p>以下のようにして、<code class=\"language-text\">g</code>に名前を付けて扱いやすくします。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> g\n<span class=\"token comment\">// ^ gを受け取る</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// gを渡す</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">(g) => g</code>は<code class=\"language-text\">g</code>をそのまま返しているので、上記のコードを評価すると<code class=\"language-text\">g</code>になります。目標は<code class=\"language-text\">f</code>を実装することなので、ここでなんとかして<code class=\"language-text\">f</code>を返せないか考えます。</p>\n<p><code class=\"language-text\">g</code>は、<code class=\"language-text\">f</code>を受け取って<code class=\"language-text\">f</code>を返す関数でした。なので<code class=\"language-text\">g(f)</code>とすれば<code class=\"language-text\">f</code>が得られます。しかし、ここには<code class=\"language-text\">f</code>が無いので無理です。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//         ^ fはないのでダメ</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// g</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ここにあるのは<code class=\"language-text\">g</code>だけです。うーん、なんとか<code class=\"language-text\">g(g)</code>みたいな感じで<code class=\"language-text\">f</code>が得られるようにできないかな？と考えます。</p>\n<p>そういう都合の良い関数<code class=\"language-text\">h</code>の定義を考えてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">hの定義（不完全）：\n  (h) => (n) => n === 0 ? 1 : n * ???(n - 1)</code></pre></div>\n<p><code class=\"language-text\">h</code>は、<code class=\"language-text\">h</code>を受け取って<code class=\"language-text\">f</code>を返す関数です。</p>\n<p><code class=\"language-text\">???</code>の部分が問題です。以前は<code class=\"language-text\">f</code>と書いていましたが、ここには<code class=\"language-text\">f</code>はありません。</p>\n<p>しかし<code class=\"language-text\">h</code>はあるので、<code class=\"language-text\">h(h)</code>とすることで<code class=\"language-text\">f</code>が得られると気づきます。そのように<code class=\"language-text\">h</code>を定義したからです。</p>\n<p>したがって、<code class=\"language-text\">h</code>は以下のように定義できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">hの定義：\n  (h) => (n) => n === 0 ? 1 : n * h(h)(n - 1)</code></pre></div>\n<p>これを使って先程のコードの<code class=\"language-text\">g</code>を<code class=\"language-text\">h</code>に置き換えます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//       ^^^^ fを返せた！</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// h</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これは実際に動きます。以下のコードは<code class=\"language-text\">120</code>に評価されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// h</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 120に評価される</span></code></pre></div>\n<p>すごい！</p>\n<h3 id=\"リファクタリング\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0\" aria-label=\"リファクタリング permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リファクタリング</h3>\n<p>現時点でも目標は達成なのですが、もうちょっとリファクタリングしてみます。</p>\n<p>というのも、<code class=\"language-text\">(n) => n === 0 ? 1 : n * h(h)(n - 1)</code>の中で<code class=\"language-text\">h(h)</code>しているのが嫌です。階乗のロジックの中に再帰の都合のコードが混ざっている感じがするからです。</p>\n<p>というわけで、<code class=\"language-text\">h</code>を受け取った直後を関数でくるんで、<code class=\"language-text\">h(h)</code>と階乗のロジックを分離します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// リファクタ中のh</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//    ^ fを受け取る</span>\n<span class=\"token comment\">//                                   ^ 単にfと書ける</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//   ^^^^ fを生成して渡す *1</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>残念ながらこれは関数呼び出しが無限に発生してしまい動作しません。</p>\n<p>JavaScriptでは引数部分が適用よりも前に評価されます（適用順序、作用的順序）。リファクタ中の<code class=\"language-text\">h</code>に<code class=\"language-text\">h</code>を渡すと、まず引数である<code class=\"language-text\">*1</code>部分の<code class=\"language-text\">h(h)</code>が評価されます。しかしその<code class=\"language-text\">h(h)</code>もまた<code class=\"language-text\">h</code>に<code class=\"language-text\">h</code>を渡しているので、内部の<code class=\"language-text\">h(h)</code>が評価されて……というように無限に続いてしまいます。</p>\n<p>これを回避するために、<code class=\"language-text\">*1</code>部分を関数でくるんで、評価を遅延させます。</p>\n<p>くるんだ後もこれは<code class=\"language-text\">f</code>として振る舞ってほしいです。なのでまず引数は<code class=\"language-text\">n</code>です。次に戻り値については、階乗の計算結果<code class=\"language-text\">f(n)</code>であるべきで、<code class=\"language-text\">h(h)</code>が<code class=\"language-text\">f</code>なので、<code class=\"language-text\">h(h)(n)</code>と書けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// *2</span>\n<span class=\"token comment\">//                                   ^ ここでfを適用するまで↓のh(h)の評価が遅延される</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//          ^^^^ hの定義よりf</span>\n<span class=\"token comment\">//   ^^^^^^^^^^^^^^ (n) => f(n)、つまりfと同じ</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ここで、<code class=\"language-text\">*2</code>の部分が<code class=\"language-text\">g</code>の定義と同じだと気づきます。これを外側から与えてやるようにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n<span class=\"token comment\">// ^ gを受け取る</span>\n    <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//       ^ 単にgと書ける *3</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// gを渡す</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">*3</code>付近の無駄なカッコを消して整理します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n    <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token comment\">// *4</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// *5</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// g</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">*4</code>と<code class=\"language-text\">*5</code>の行は見た目が似ていることに気づきます。実際、これらはどちらも<code class=\"language-text\">h</code>を受け取って<code class=\"language-text\">f</code>を返すという、同じことをしています。</p>\n<p><code class=\"language-text\">*4</code>については<code class=\"language-text\">h(h)</code>を返しているため、<code class=\"language-text\">h</code>の定義より自明ですね。<code class=\"language-text\">*5</code>については、まず<code class=\"language-text\">(n) => h(h)(n)</code>が<code class=\"language-text\">f</code>となるように先程作ったことを思い出します。そしてそれを<code class=\"language-text\">g</code>に与えているため、<code class=\"language-text\">g</code>の定義より<code class=\"language-text\">f</code>を返しているとわかります。</p>\n<p>というわけで、<code class=\"language-text\">*4</code>を<code class=\"language-text\">*5</code>で書き換えても大丈夫そうです。そのほうが長くなってしまいますが、対称性があってきれいなのでそうしてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Z</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n    <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// g</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これでZコンビネータが現れました。</p>\n<p><a href=\"https://ja.wikipedia.org/wiki/%E4%B8%8D%E5%8B%95%E7%82%B9%E3%82%B3%E3%83%B3%E3%83%93%E3%83%8D%E3%83%BC%E3%82%BF#Z.E3.82.B3.E3.83.B3.E3.83.93.E3.83.8D.E3.83.BC.E3.82.BF\">Wikipediaに書かれてるZコンビネータ</a>と比べると、引数の名前が違うだけで等価であるとわかります。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 今回求めたZコンビネータ</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Wikipediaのやつ</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>階乗に限らず、再帰したい関数を<code class=\"language-text\">g</code>の形で実装し、それに<code class=\"language-text\">(g) => ((h) => g((n) => h(h)(n)))((h) => g((n) => h(h)(n)))</code>を適用すれば、関数だけで再帰し放題なので勝ちです。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Zコンビネータを思いついてみました。ウソです。</p>\n<p>実際はいろいろな資料を参考にした上で、めちゃくちゃ噛み砕いた説明を自分なりにまとめただけでした。</p>\n<p>これを無から生成しちゃう人がいるってやばいっすね。</p>\n<h3 id=\"参考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"参考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考資料</h3>\n<ul>\n<li><a href=\"http://daretoku-unix.blogspot.com/2015/01/y.html\">誰得UNIX: Yコンビネータを導出してみる</a>\n<ul>\n<li>完全には理解できていないですが、多分今回の説明と同じ流れのことをやっているようで大変参考になりました。</li>\n</ul>\n</li>\n<li><a href=\"https://kazu-yamamoto.hatenablog.jp/entry/20090408/1239172437\">チョウゲンボウとホシムクドリから賢人鳥を導出する</a>\n<ul>\n<li>まったく理解できていないですが、いつかは僕も<a href=\"https://www.morikita.co.jp/books/mid/001901\">鳥を愛でたい</a>なと思いました。</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Zコンビネータを思いつきたい","date":"2024/01/22"},"fields":{"slug":"/Zコンビネータを思いつきたい/"},"id":"fc7ce496-d3b3-5f39-a04e-8e2dfb960626"},"firstImage":{"imageFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#483838","images":{"fallback":{"src":"/static/6646350335213f6d52c5f982263a1329/a207a/top.png","srcSet":"/static/6646350335213f6d52c5f982263a1329/0a822/top.png 165w,\n/static/6646350335213f6d52c5f982263a1329/4c296/top.png 330w,\n/static/6646350335213f6d52c5f982263a1329/a207a/top.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/6646350335213f6d52c5f982263a1329/9e852/top.webp 165w,\n/static/6646350335213f6d52c5f982263a1329/4ff1e/top.webp 330w,\n/static/6646350335213f6d52c5f982263a1329/e9b47/top.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":411}}}},"relatedMarkdownRemarks":{"posts":[{"id":"3d71b3f9-8d6b-58a4-b6cb-8293daf99d74","frontmatter":{"draft":null}},{"id":"f49ce388-e81c-5425-af59-9902f125c20f","frontmatter":{"draft":null}},{"id":"84bf9a79-dd68-55d1-a1b3-60ffd3784554","frontmatter":{"draft":null}},{"id":"5dba01b8-593d-5295-b135-16df1c6295e5","frontmatter":{"draft":null}},{"id":"29b79017-f96d-5b04-8d01-5b8ee761ebed","frontmatter":{"draft":null}},{"id":"2cfd9e33-b4e1-53e4-884d-d8a6760f3387","frontmatter":{"draft":true}},{"id":"75696ec6-74a3-5046-8a3c-f39b36d92311","frontmatter":{"draft":null}},{"id":"89ddbcc0-ed71-5a69-9d55-9677eab3e6cf","frontmatter":{"draft":null}},{"id":"1162dccb-e1bf-576d-a5c6-0993394feb0a","frontmatter":{"draft":true}},{"id":"f920a8a8-f5fe-57c9-8792-95c93d2b74eb","frontmatter":{"draft":null}},{"id":"871ac696-39ea-5c64-94f3-5dc4b73b5770","frontmatter":{"draft":true}},{"id":"c2db052c-95c6-5094-935b-9eb39f5c762a","frontmatter":{"draft":null}},{"id":"49cf25c1-03f6-575e-8c2f-638ccd6198ea","frontmatter":{"draft":null}},{"id":"3a3c4125-9986-53bb-8b96-ae29936c96ab","frontmatter":{"draft":null}},{"id":"a091877c-69b8-59f9-8963-1af334fd573c","frontmatter":{"draft":null}},{"id":"82d43655-ea2a-52cd-97a3-16b7b28ad150","frontmatter":{"draft":null}},{"id":"3c14921d-1ba3-5a7a-93a2-757f3a03ee3a","frontmatter":{"draft":null}},{"id":"0116f663-28d1-507a-b5ab-b189801dd408","frontmatter":{"draft":true}},{"id":"01deffb8-0d62-54c6-9e41-20832cbc3c6e","frontmatter":{"draft":null}},{"id":"067a602f-4581-5707-b896-73190dd8c889","frontmatter":{"draft":null}},{"id":"0c5568c9-6d87-56ed-ab0e-caeb9c1aafa4","frontmatter":{"draft":null}},{"id":"1086a735-7173-58cc-a813-c540a563aedf","frontmatter":{"draft":false}},{"id":"12222bfa-2e8e-51ee-99d8-8a19902351f5","frontmatter":{"draft":null}},{"id":"1509de3c-7308-5e40-a885-f5ebdb089774","frontmatter":{"draft":null}},{"id":"27f10a38-0ecb-539f-a717-7e40a41bbd10","frontmatter":{"draft":null}},{"id":"2f30c3f1-0d66-590b-8dba-7836df701d46","frontmatter":{"draft":null}},{"id":"3908aafc-c8d3-5c67-821f-0866592449f2","frontmatter":{"draft":true}},{"id":"3b696b96-130d-50de-a673-dc1367f32387","frontmatter":{"draft":null}},{"id":"46a22c41-5455-557c-85d4-973a6e2220ee","frontmatter":{"draft":null}},{"id":"48c65a15-67ca-57d0-9edc-ebcb868f7ad2","frontmatter":{"draft":true}},{"id":"4d43646f-8aa6-52b6-b0b6-5160f0be2b05","frontmatter":{"draft":null}},{"id":"4ed3b747-2001-54f4-9661-3acab89ce275","frontmatter":{"draft":null}},{"id":"4edc1b46-b395-5783-af6a-818b8fc9c2dc","frontmatter":{"draft":null}},{"id":"50951bb1-eb92-5663-a3d8-8f35f73a1322","frontmatter":{"draft":null}},{"id":"50d3cc2a-de7a-5b9a-a8d8-754415fe4d94","frontmatter":{"draft":null}},{"id":"5888c50d-8414-5e8f-b0dc-28a31b29053d","frontmatter":{"draft":null}},{"id":"63f3c7ad-6c59-52b5-9816-78fd348955ff","frontmatter":{"draft":true}},{"id":"69a4aa90-b728-522c-b34f-abee49825c45","frontmatter":{"draft":true}},{"id":"73ab4455-f04d-5320-bf3a-90b9f7441d13","frontmatter":{"draft":null}},{"id":"73d6ab42-b3e6-5663-a175-b1f3d69c29e1","frontmatter":{"draft":null}},{"id":"75550af2-8134-5467-a07d-abbb5a4f6b7c","frontmatter":{"draft":true}},{"id":"7778d041-a5bf-536a-a36f-c0dbc5e08ac7","frontmatter":{"draft":true}},{"id":"78349b16-6e41-5fef-ae38-bcdc5ff297ef","frontmatter":{"draft":true}},{"id":"7a8fc278-a847-5b68-8b74-a83193ba3f55","frontmatter":{"draft":null}},{"id":"7d6499d9-277c-5f07-b8b1-98ae40c50c42","frontmatter":{"draft":null}},{"id":"7d79eb4b-cd4a-5621-a67a-91d9a24dce05","frontmatter":{"draft":null}},{"id":"8b3e46c2-1a1e-5af0-8900-7972c7285d15","frontmatter":{"draft":null}},{"id":"8f7b1b24-7738-5b97-bfb6-fd763f11a664","frontmatter":{"draft":true}},{"id":"961ec1e6-3f2b-59d9-a33f-dad76cf67f47","frontmatter":{"draft":null}},{"id":"97f01467-e3a1-58e1-b2a4-db77354cc1a3","frontmatter":{"draft":null}},{"id":"9f02de74-61a0-5daf-a048-1c1022e08fe4","frontmatter":{"draft":null}},{"id":"9f24363b-ee3e-54bf-8a18-46ea3b269bea","frontmatter":{"draft":null}},{"id":"a190aac4-0483-5e02-b1d3-261f3b5f313a","frontmatter":{"draft":null}},{"id":"a6c64123-b824-5224-8027-90eb12040396","frontmatter":{"draft":null}},{"id":"b4251348-b618-5b5b-a2c8-e4c6b2431b83","frontmatter":{"draft":true}},{"id":"be594923-185e-5cca-95b6-5267b3c9fc8c","frontmatter":{"draft":null}},{"id":"bfee69af-7d7f-5d87-9680-d2e9b60f8416","frontmatter":{"draft":null}},{"id":"c2249b7b-b97e-5cf4-8ea9-8024e96851b7","frontmatter":{"draft":true}},{"id":"c5e2431a-cf05-5024-b833-e1c69f680d44","frontmatter":{"draft":null}},{"id":"c6def021-b8da-5dbe-ad3e-811d9286424d","frontmatter":{"draft":true}},{"id":"c7a5adfb-149b-5469-ba35-7421e2101951","frontmatter":{"draft":null}},{"id":"cbdf3192-973c-5d87-9cf1-bb9110e9a169","frontmatter":{"draft":null}},{"id":"d29b4513-0609-5cfc-af49-817467dbed1f","frontmatter":{"draft":null}},{"id":"d4d1afa4-f2f9-5942-ae36-2826fb938af5","frontmatter":{"draft":null}},{"id":"db26c6b9-37b4-5cc4-b1ec-c61dc667863e","frontmatter":{"draft":null}},{"id":"dd0c41cf-0a03-5b89-b5a2-f64859aeae63","frontmatter":{"draft":null}},{"id":"e322eac2-bd89-5347-b20d-d050d303a6be","frontmatter":{"draft":null}},{"id":"e376b2d4-df91-5b82-af7a-a8d02763e922","frontmatter":{"draft":true}},{"id":"e4fb8478-b1ad-59eb-95e8-8c5e0500d3f4","frontmatter":{"draft":true}},{"id":"e83330dc-2312-5ae6-95fa-53e86909f42b","frontmatter":{"draft":true}},{"id":"eba9aa6a-6e21-5f1b-a0eb-7b6bfb1e04f1","frontmatter":{"draft":null}},{"id":"ebae7878-c4ee-505e-81e2-3d3fc47ea826","frontmatter":{"draft":true}},{"id":"ed7af7f9-75f5-59be-9063-de564576eed7","frontmatter":{"draft":true}},{"id":"f06a6ae0-e961-504c-8dab-a60489c0557a","frontmatter":{"draft":true}},{"id":"f5a25ce1-67a6-51b2-9bf1-f9fbacb41ad1","frontmatter":{"draft":true}},{"id":"fd6eab68-17d3-5395-8b2b-54a6efe43ebb","frontmatter":{"draft":null}}]}},"pageContext":{"id":"fc7ce496-d3b3-5f39-a04e-8e2dfb960626"}},"staticQueryHashes":["1530353647","2576926420","63159454"]}