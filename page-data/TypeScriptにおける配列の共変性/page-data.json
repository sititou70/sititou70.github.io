{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/TypeScriptにおける配列の共変性/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sititou70.github.io"}},"markdownRemark":{"excerpt":"突然ですが，ここに型と型があります それぞれ，次のような具体的な値を持ちます． ここで，です． という記号は2つの型のあいだに書いて，「左の型が右の型のサブタイプである」と読みます． TypeScriptのサブタイプ関係は型の構造上に直接定義され，構造的です．…","html":"<p>突然ですが，ここに<code class=\"language-text\">Animal</code>型と<code class=\"language-text\">Dog</code>型があります</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  animal<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Dog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  animal<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  dog<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>それぞれ，次のような具体的な値を持ちます．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> animal<span class=\"token operator\">:</span> Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  animal<span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dog<span class=\"token operator\">:</span> Dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  animal<span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n  dog<span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ここで，<code class=\"language-text\">Dog &lt;: Animal</code>です．</p>\n<p><code class=\"language-text\">&lt;:</code>という記号は2つの型のあいだに書いて，「左の型が右の型のサブタイプである」と読みます．</p>\n<p>TypeScriptのサブタイプ関係は型の構造上に直接定義され，構造的です．</p>\n<p>2つのオブジェクトがサブタイプ関係にあるには，<strong>それらに共通するプロパティについてもまた，サブタイプ関係である必要があります．</strong></p>\n<p>今回の例では，<code class=\"language-text\">Dog</code>と<code class=\"language-text\">Animal</code>に共通する<code class=\"language-text\">animal</code>プロパティについて<code class=\"language-text\">string &lt;: string</code>が成立するのでOKです．</p>\n<p>いま，<code class=\"language-text\">Dog &lt;: Animal</code>なので，<strong><code class=\"language-text\">Animal</code>型の変数に<code class=\"language-text\">Dog</code>型の値を代入できます</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> animalVariable<span class=\"token operator\">:</span> Animal <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">;</span></code></pre></div>\n<p>ここまではJavaの教科書にでも書いてありそうな話ですね．</p>\n<h2 id=\"問題\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C\" aria-label=\"問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題</h2>\n<p>ここで，<strong><code class=\"language-text\">Animal[]</code>型の変数に<code class=\"language-text\">Dog[]</code>型の値を代入できるでしょうか？</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dogArray<span class=\"token operator\">:</span> Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// これはできる？</span>\n<span class=\"token keyword\">const</span> animalArray<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogArray<span class=\"token punctuation\">;</span></code></pre></div>\n<p>―――――――――</p>\n<p>――――――</p>\n<p>―――</p>\n<p>答え：TypeScriptでは<strong>できます</strong>（共変性がある）</p>\n<h2 id=\"できて良いんだっけ\" style=\"position:relative;\"><a href=\"#%E3%81%A7%E3%81%8D%E3%81%A6%E8%89%AF%E3%81%84%E3%82%93%E3%81%A0%E3%81%A3%E3%81%91\" aria-label=\"できて良いんだっけ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>……できて良いんだっけ？</h2>\n<p>いっしょに考えてみましょう．</p>\n<p><code class=\"language-text\">Animal[]</code>型の変数に<code class=\"language-text\">Dog[]</code>型の値を代入するためには，<code class=\"language-text\">Dog[] &lt;: Animal[]</code>である必要があります．</p>\n<p>したがって，先ほどと同じように<strong>2つの配列に共通するすべてのプロパティについてもまた，サブタイプ関係にある必要があります．</strong></p>\n<p>配列の型は以下のような<code class=\"language-text\">lib.es5.d.ts</code>によって定義されています．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n   */</span>\n  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * Returns a string representation of an array.\n   */</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n   */</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ここで，<code class=\"language-text\">indexOf</code>プロパティに着目してみましょう．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token comment\">/**\n   * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n   * @param searchElement The value to locate in the array.\n   * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n   */</span>\n  <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> fromIndex<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>つまり，<code class=\"language-text\">(searchElement: Dog, fromIndex?: number) => number &lt;: (searchElement: Animal, fromIndex?: number) => number</code>である必要があるということですが，これは成り立たないように見えます．</p>\n<p><strong><code class=\"language-text\">Animal</code>の入力を期待する関数</strong>を<strong>Dogの入力を期待する関数</strong>で置き換えられないからです．（反変性）</p>\n<p>以上を踏まえると，以下のようないたずらができます．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dogArray<span class=\"token operator\">:</span> Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dogArrayのindexOfを独自の関数に置き換える</span>\ndogArray<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">indexOf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dog<span class=\"token operator\">:</span> Dog<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Dog型の値をうけとり，Animal型にはないプロパティをわざと触る</span>\n  dog<span class=\"token punctuation\">.</span>dog<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 適当に返す</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// この関数の置き換え自体は問題ない</span>\n<span class=\"token comment\">// dogArray.indexOfでDogの入力を期待することは正当</span>\n\n<span class=\"token comment\">// 問題はこの行．dogArrayをanimalArrayに代入できるなら……</span>\n<span class=\"token keyword\">const</span> animalArray<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogArray<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// そのあと例のindexOfにanimalを渡せてしまう</span>\nanimalArray<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>このコードはtscによる型検査をパスします</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npx tsc\n$ <span class=\"token comment\"># パス！</span></code></pre></div>\n<p>しかし，ランタイムで落ちます</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ <span class=\"token function\">node</span> index.js\n/home/sititou70/ts-array-variant/index.js:11\n    dog.dog.charAt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ^\n\nTypeError: Cannot <span class=\"token builtin class-name\">read</span> properties of undefined <span class=\"token punctuation\">(</span>reading <span class=\"token string\">'charAt'</span><span class=\"token punctuation\">)</span>\n    at dogArray.indexOf <span class=\"token punctuation\">(</span>/home/sititou70/ts-array-variant/index.js:11:13<span class=\"token punctuation\">)</span>\n    at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/home/sititou70/ts-array-variant/index.js:15:13<span class=\"token punctuation\">)</span>\n    at Module._compile <span class=\"token punctuation\">(</span>node:internal/modules/cjs/loader:1159:14<span class=\"token punctuation\">)</span>\n    at Module._extensions<span class=\"token punctuation\">..</span>js <span class=\"token punctuation\">(</span>node:internal/modules/cjs/loader:1213:10<span class=\"token punctuation\">)</span>\n    at Module.load <span class=\"token punctuation\">(</span>node:internal/modules/cjs/loader:1037:32<span class=\"token punctuation\">)</span>\n    at Module._load <span class=\"token punctuation\">(</span>node:internal/modules/cjs/loader:878:12<span class=\"token punctuation\">)</span>\n    at Function.executeUserEntryPoint <span class=\"token punctuation\">[</span>as runMain<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>node:internal/modules/run_main:81:12<span class=\"token punctuation\">)</span>\n    at node:internal/main/run_main_module:23:47</code></pre></div>\n<p>これが，TypeScriptが型安全な言語でない，または型システムが健全でないと言われる理由の1つです．</p>\n<p>しかしこれは，わざとこのような設計になっています．<a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals\">TypeScript Design Goals</a>によれば，</p>\n<blockquote>\n<p>Non-goals</p>\n<ol start=\"3\">\n<li>健全な、あるいは「証明できるほど正しい」型システムを適用する。その代わり、正しさと生産性のバランスをとること。</li>\n</ol>\n<p>出典：<a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals\">TypeScript Design Goals</a>，翻訳はDeepLによる</p>\n</blockquote>\n<p>とあります．この気持ちはよくわかります．</p>\n<h2 id=\"配列の共変性はどう実現されているか\" style=\"position:relative;\"><a href=\"#%E9%85%8D%E5%88%97%E3%81%AE%E5%85%B1%E5%A4%89%E6%80%A7%E3%81%AF%E3%81%A9%E3%81%86%E5%AE%9F%E7%8F%BE%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B\" aria-label=\"配列の共変性はどう実現されているか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配列の共変性はどう実現されているか</h2>\n<p>配列が共変扱いなのはわかりました．では，それはTS自身の型システム内でどのように実現されているのでしょうか？</p>\n<h3 id=\"メソッド記法の使用\" style=\"position:relative;\"><a href=\"#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E8%A8%98%E6%B3%95%E3%81%AE%E4%BD%BF%E7%94%A8\" aria-label=\"メソッド記法の使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メソッド記法の使用</h3>\n<p>簡単のために，<code class=\"language-text\">indexOf</code>しかプロパティを持たない<code class=\"language-text\">MyArray</code>を作ってみます．</p>\n<p>以下の，2種類の<code class=\"language-text\">MyArray</code>をみてください</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyArray1<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyArray2<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">indexOf</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一方はメソッド記法，他方はメンバに関数型を割り当てるような記法で書かれています．書き方は少し違いますが，どちらも同じようなことを書いていますね．</p>\n<p>しかし，以下のように挙動が異なります．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// これはできる</span>\n<span class=\"token keyword\">const</span> myDogArray1<span class=\"token operator\">:</span> MyArray1<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myAnimalArray1<span class=\"token operator\">:</span> MyArray1<span class=\"token operator\">&lt;</span>Animal<span class=\"token operator\">></span> <span class=\"token operator\">=</span> myDogArray1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// これは型エラー</span>\n<span class=\"token keyword\">const</span> myDogArray2<span class=\"token operator\">:</span> MyArray2<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myAnimalArray2<span class=\"token operator\">:</span> MyArray2<span class=\"token operator\">&lt;</span>Animal<span class=\"token operator\">></span> <span class=\"token operator\">=</span> myDogArray2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    ^^^^^^^^^^^^^^</span>\n<span class=\"token comment\">// 型 'MyArray2&lt;Dog>' を型 'MyArray2&lt;Animal>' に割り当てることはできません。</span>\n<span class=\"token comment\">//   プロパティ 'dog' は型 'Animal' にありませんが、型 'Dog' では必須です。ts(2322)</span></code></pre></div>\n<p>メソッド記法を使うと，引数の型が双変として扱われるようになるそうです．双変とは，共変または反変といった感じで，詳しくはbivarianceHackと検索してみてください．</p>\n<p>恥ずかしながら，私はこの挙動を半年くらい前まで知らなかったのですが，当時はだいぶ驚きました．</p>\n<p>さて，思い返してみると，ライブラリの型定義はほとんどメソッド記法で書かれており，</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n   */</span>\n  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * Returns a string representation of an array.\n   */</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n   */</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>配列に限らず，これらのメソッドの引数はゆるめに扱われます．</p>\n<p>その結果，配列の共変性にも一役買っているというわけです．</p>\n<h3 id=\"配列専用の型付け規則\" style=\"position:relative;\"><a href=\"#%E9%85%8D%E5%88%97%E5%B0%82%E7%94%A8%E3%81%AE%E5%9E%8B%E4%BB%98%E3%81%91%E8%A6%8F%E5%89%87\" aria-label=\"配列専用の型付け規則 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配列専用の型付け規則</h3>\n<p>メソッド記法と変性の関係についてわかったところで，さっそく<code class=\"language-text\">lib.es5.d.ts</code>に次のようないたずらをしてみます．</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> /**\n<span class=\"token prefix unchanged\"> </span>  * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n<span class=\"token prefix unchanged\"> </span>  * @param searchElement The value to locate in the array.\n<span class=\"token prefix unchanged\"> </span>  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n<span class=\"token prefix unchanged\"> </span>  */\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>  indexOf(searchElement: T, fromIndex?: number): number;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  indexOf: (searchElement: T, fromIndex?: number) => number;</span></code></pre></div>\n<p>これで先ほどのコードが型検査で失敗するようになるはずです．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dogArray<span class=\"token operator\">:</span> Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> animalArray<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogArray<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npx tsc\n$ <span class=\"token comment\"># パス？？？</span></code></pre></div>\n<p>しかしパスしてしまいました．これが今回気づいたことです．</p>\n<p>原因を確かめるために，TypeScriptのコードを読んでみます．</p>\n<p>型検査器のコードは<a href=\"https://github.com/microsoft/TypeScript\">microsoft/TypeScript</a>の<code class=\"language-text\">src/compiler/checker.ts</code>にあるのですが，これはソースファイルの中で最大です．現時点で47,206行あり（！？），2.6MBあり，GitHubがプレビューを拒否します．</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 514px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/3540b49804f143fd51a5694c94584880/93650/checkerts_preview.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 99.80544747081711%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'399\\'%20viewBox=\\'0%200%20400%20399\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20200v199h401V0H0v200M39%2059c-3%203%200%209%204%207h7l2-1c1%203%206%202%206%200h1c2%203%205%202%205-1s-2-4-4-2c-2%201-2%201-2-1l-1-3-1%202-1%201-2%201h-2c0-2-3-2-5%201-4%203-6%203-6-1%200-2%200-2%203-2h1c-1-2-3-2-5-1M27%20183c-5%203-6%2011-2%2014%202%202%209%202%2010%201h1c2%202%205-3%205-7%200-7-8-11-14-8m62%2045c0%201-1%202-2%201-3%200-3%200-3%204%200%202%200%203%201%202%201-5%201-5%202-2l1%204v-3c0-3%200-3%201-1%201%203%204%204%206%201h1l2%202c2%200%203-1%203-3l1-3v3c0%203%202%205%202%202h1c2%202%204%201%205-1%200-3-2-6-4-4-1%201-2%201-2-1h-4l-1%202c0%204-2%204-2%200%200-2%200-2-1%200h-1l-3-2-1-1-1-1-1%201m-47%202h3l-1%202c-3%201-2%204%201%204l2-1h1c3%202%205%200%205-2v-2l1%202c0%202%201%203%203%203%203%200%202-7-1-8l-2%201h-1c-2-2-5-1-5%201v3l-1-3c-1-2-5-3-5%200m38%200H67c-1-2-4%200-4%203%200%202%202%204%204%202h8c1%201%201%201%201-1l1-3%201%203c0%203%201%202%202-1%201-2%201-2%201%200l1%203v-8l-2%202m-48%2012l-2%204-1%203v1l1%203c0%202%200%202-1%201l-2%201%202%201c1-1%202%200%203%201v1l1%201c1%202%206%200%206-2l1-3%201-5c1-4%200-5-2-6-3-2-5-2-7-1m54%201c3%201%204%203%203%205h-1l-4-1c-3%200-4%200-4%202l-1%202%201%205c2%204%207%206%209%202l1-1h2c3-3%203-10-1-13l-5-3c-2%200-2%200%200%202m19-1c-4%202-6%207-4%2012s4%206%205%202c1-3%203-3%202%200h2l3-1h3c2-1%203-1%203-4%200-7-7-12-14-9m52%202c-1%202-2%202-4%202-2-1-2-1-3%202%200%204%200%207%202%207v-1c0-2%201-2%203-2l1-2c0-2%202-3%202%200h2c1-1%202-1%203%201%202%201%202%201%203-1%204-4%201-7-5-8-3-1-3-1-4%202m96%200c-2%202-3%203-3%206%200%206%202%208%205%206%201-2%201-2%201%200s2%203%205%203l3-4%203-4c2-2%201-5-1-8-4-3-9-3-13%201m51-1c-3%201-5%207-4%2010%202%207%2011%209%2016%204%207-8-2-20-12-14m-173%200c-4%203-2%2012%202%2015%202%201%203%201%205-3%205-7%200-16-7-12m47%201c-3%203-3%204%202%205%206%201%207%202%201%201-6%200-6%200-6%202l6%201c6%200%209%201%209%204h1v-7c0-4%200-4-3-4-2%201-3-1-1-2%203-1%201-2-3-2l-6%202M78%20354c0%203%200%204-1%202%200-4-3-5-4-3v1c2-1%203%200%200%201l-1%203c1%202%203%201%202%200l1-2%201%201c-1%202%205%203%206%201h6l2-1%203%202c2%200%202-1%202-4%200-2%200-3-1-1%200%204-2%205-2%202l-1-3c-1-1-1%200-1%201l-1-1h-4c-2%201-5%200-6-2-1-1-1%201-1%203\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/3540b49804f143fd51a5694c94584880/592f2/checkerts_preview.webp 514w\"\n              sizes=\"(max-width: 514px) 100vw, 514px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/3540b49804f143fd51a5694c94584880/93650/checkerts_preview.png 514w\"\n            sizes=\"(max-width: 514px) 100vw, 514px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/3540b49804f143fd51a5694c94584880/93650/checkerts_preview.png\"\n            alt=\"checker.tsファイルのプレビューをGitHubが拒否しているスクリーンショット\"\n            title=\"checker.tsファイルのプレビューをGitHubが拒否しているスクリーンショット\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>というわけで，大いに迷いながら読んでいくと配列専用の型付け規則を見つけました</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getVariances</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> GenericType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> VarianceFlags<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Arrays and tuples are known to be covariant, no need to spend time computing this.</span>\n  <span class=\"token keyword\">return</span> type <span class=\"token operator\">===</span> globalArrayType <span class=\"token operator\">||</span>\n    type <span class=\"token operator\">===</span> globalReadonlyArrayType <span class=\"token operator\">||</span>\n    type<span class=\"token punctuation\">.</span>objectFlags <span class=\"token operator\">&amp;</span> ObjectFlags<span class=\"token punctuation\">.</span>Tuple\n    <span class=\"token operator\">?</span> arrayVariances\n    <span class=\"token operator\">:</span> <span class=\"token function\">getVariancesWorker</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span>typeParameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> arrayVariances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>VarianceFlags<span class=\"token punctuation\">.</span>Covariant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>コメントには「配列やタプルは共変（Covariant）なので変性を計算する必要はない」的なことが書いてあります．変性を計算する対象である<code class=\"language-text\">type</code>が配列やタプルの場合，<code class=\"language-text\">arrayVariances</code>という固定値を返しているようです．それ以外の場合は<code class=\"language-text\">getVariancesWorker</code>という関数を呼び出して頑張って計算している感じがしますね．これは，実質的に配列専用の型付け規則です．</p>\n<p>というわけで，<code class=\"language-text\">node_modules/typescript/lib/tsc.js</code>を以下のようにいじってみました．</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">function getVariances(type) {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> return type === globalArrayType || type === globalReadonlyArrayType || type.objectFlags &amp; 8 ?\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> return false ?\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   arrayVariances :\n<span class=\"token prefix unchanged\"> </span>   getVariancesWorker(type.symbol, type.typeParameters);\n</span>}</code></pre></div>\n<p>「配列だろうが頑張って変性を計算しろ！」というかんじですね．これで再度型検査してみると……</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npx tsc\nindex.ts:20:7 - error TS2322: Type <span class=\"token string\">'Dog[]'</span> is not assignable to <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'Animal[]'</span><span class=\"token builtin class-name\">.</span>\n  Types of property <span class=\"token string\">'indexOf'</span> are incompatible.\n    Type <span class=\"token string\">'(searchElement: Dog, fromIndex?: number | undefined) => number'</span> is not assignable to <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'(searchElement: Animal, fromIndex?: number | undefined) => number'</span><span class=\"token builtin class-name\">.</span>\n      Types of parameters <span class=\"token string\">'searchElement'</span> and <span class=\"token string\">'searchElement'</span> are incompatible.\n        Type <span class=\"token string\">'Animal'</span> is not assignable to <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'Dog'</span><span class=\"token builtin class-name\">.</span>\n\n<span class=\"token number\">20</span> const animalArray: Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogArray<span class=\"token punctuation\">;</span>\n         ~~~~~~~~~~~\n\n\nFound <span class=\"token number\">1</span> error <span class=\"token keyword\">in</span> index.ts:20</code></pre></div>\n<p>ちゃんと落ちました！いいですね！</p>\n<h2 id=\"おまけflowではデフォルトでエラー\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91flow%E3%81%A7%E3%81%AF%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC\" aria-label=\"おまけflowではデフォルトでエラー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おまけ：Flowではデフォルトでエラー</h2>\n<p>今回のような代入は，Flowではデフォルトでエラーになります．</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npx flow check\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ index.js:22:31\n\nCannot assign dogArray to animalArray because property dog is missing <span class=\"token keyword\">in</span> Animal <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> but exists <span class=\"token keyword\">in</span> Dog <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> array\nelement. <span class=\"token punctuation\">[</span>prop-missing<span class=\"token punctuation\">]</span>\n\n     <span class=\"token number\">19</span>│ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token number\">20</span>│\n <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token number\">21</span>│ const dogArray: Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">22</span>│ const animalArray: Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogArray<span class=\"token punctuation\">;</span>\n     <span class=\"token number\">23</span>│\n\n\n\nFound <span class=\"token number\">1</span> error</code></pre></div>\n<p>Flowでは，より健全性を重視するように見えますね．</p>\n<p>AltJSに限らなければ，世の中の大抵の静的型付け言語ではエラーになるのが一般的らしいです．Javaとかもエラーになるって聞きました．試してないですけど．</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>TypeScriptの配列には共変性があります．これは，配列の型定義がメソッド記法で書かれていることと，型検査器に配列専用の型付け規則があることで実現されます．</p>\n<p>今回，TypeScriptのコードを初めて読んでみました．VS Codeでファイルを開いただけでPCのファンが回りだしたのでヤバかったです．</p>\n<p>TypeScriptは健全性よりも利便性を重視しています．FlowはTSに比べてより健全性を重視しているように感じました．</p>\n<p>そもそもTAPLによれば</p>\n<blockquote>\n<p>型検査を考慮して設計されていない言語に型システムを組み込むのは困難な問題である。</p>\n<p>出典：<a href=\"https://www.amazon.co.jp/%E5%9E%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E5%85%A5%E9%96%80-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%A8%E5%9E%8B%E3%81%AE%E7%90%86%E8%AB%96-%EF%BC%A2%EF%BD%85%EF%BD%8E%EF%BD%8A%EF%BD%81%EF%BD%8D%EF%BD%89%EF%BD%8E%EF%BC%A3%EF%BC%8E%EF%BC%B0%EF%BD%89%EF%BD%85%EF%BD%92%EF%BD%83%EF%BD%85-ebook/dp/B07CBB69SS\">型システム入門 プログラミング言語と型の理論</a>，p.7</p>\n</blockquote>\n<p>とあり，TypeScriptやFlowはとても難しいことをやってくれているわけです．後からJSに型システムを導入するにあたって，その方向性にバリエーションが生まれるのは，そりゃそうだよなぁという感じです．</p>\n<p>あとどうでもいいのですが，「反変」ってなんて読むのが正しいんですかね？私は過去「はんぺん」と読んでいたのですが，ある日知り合いから「おでんかよｗｗｗ」ってバカにされたのが悔しくて「はんへん」に頑張って矯正したんです．だけどさっきWikipediaを見たら「はんぺん」って書いてあるじゃないですか．もう何がなんだか……．</p>\n<p>TAPLには読み方書いてなかったし，Wikipedia以外の情報もあまり出てこなくて詰んでいます．ご存知の方がいましたら助けてください．</p>\n<p>最後に，本記事は<a href=\"https://adventar.org/calendars/7972\">Recruit Engineers Advent Calendar 2022</a>の15日目の記事でした．あまりぱっとしたネタが思いつかず，n番煎じみたいな記事になってしまいすみません．昨日は<a href=\"https://twitter.com/takepepe\">@Takepepe</a>さんのxxxでした．明日は加納さんがxxxを書いてくれるそうです．楽しみですね．</p>","frontmatter":{"title":"TypeScriptにおける配列の共変性","date":"2022/12/10"},"fields":{"slug":"/TypeScriptにおける配列の共変性/"},"id":"84bf9a79-dd68-55d1-a1b3-60ffd3784554"},"firstImage":{"imageFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181828","images":{"fallback":{"src":"/static/3540b49804f143fd51a5694c94584880/db49f/checkerts_preview.png","srcSet":"/static/3540b49804f143fd51a5694c94584880/68010/checkerts_preview.png 129w,\n/static/3540b49804f143fd51a5694c94584880/1b325/checkerts_preview.png 257w,\n/static/3540b49804f143fd51a5694c94584880/db49f/checkerts_preview.png 514w","sizes":"(min-width: 514px) 514px, 100vw"},"sources":[{"srcSet":"/static/3540b49804f143fd51a5694c94584880/f6a08/checkerts_preview.webp 129w,\n/static/3540b49804f143fd51a5694c94584880/862a9/checkerts_preview.webp 257w,\n/static/3540b49804f143fd51a5694c94584880/448ac/checkerts_preview.webp 514w","type":"image/webp","sizes":"(min-width: 514px) 514px, 100vw"}]},"width":514,"height":513}}}},"relatedMarkdownRemarks":{"posts":[{"id":"29b79017-f96d-5b04-8d01-5b8ee761ebed","frontmatter":{"draft":null}},{"id":"3a3c4125-9986-53bb-8b96-ae29936c96ab","frontmatter":{"draft":null}},{"id":"82d43655-ea2a-52cd-97a3-16b7b28ad150","frontmatter":{"draft":null}},{"id":"f49ce388-e81c-5425-af59-9902f125c20f","frontmatter":{"draft":null}},{"id":"50d3cc2a-de7a-5b9a-a8d8-754415fe4d94","frontmatter":{"draft":null}},{"id":"be594923-185e-5cca-95b6-5267b3c9fc8c","frontmatter":{"draft":null}},{"id":"c2db052c-95c6-5094-935b-9eb39f5c762a","frontmatter":{"draft":null}},{"id":"75696ec6-74a3-5046-8a3c-f39b36d92311","frontmatter":{"draft":null}},{"id":"871ac696-39ea-5c64-94f3-5dc4b73b5770","frontmatter":{"draft":true}},{"id":"69a4aa90-b728-522c-b34f-abee49825c45","frontmatter":{"draft":true}},{"id":"50951bb1-eb92-5663-a3d8-8f35f73a1322","frontmatter":{"draft":null}},{"id":"1162dccb-e1bf-576d-a5c6-0993394feb0a","frontmatter":{"draft":true}},{"id":"73d6ab42-b3e6-5663-a175-b1f3d69c29e1","frontmatter":{"draft":null}},{"id":"0116f663-28d1-507a-b5ab-b189801dd408","frontmatter":{"draft":true}},{"id":"01deffb8-0d62-54c6-9e41-20832cbc3c6e","frontmatter":{"draft":null}},{"id":"067a602f-4581-5707-b896-73190dd8c889","frontmatter":{"draft":null}},{"id":"0c5568c9-6d87-56ed-ab0e-caeb9c1aafa4","frontmatter":{"draft":null}},{"id":"1086a735-7173-58cc-a813-c540a563aedf","frontmatter":{"draft":false}},{"id":"12222bfa-2e8e-51ee-99d8-8a19902351f5","frontmatter":{"draft":null}},{"id":"1509de3c-7308-5e40-a885-f5ebdb089774","frontmatter":{"draft":null}},{"id":"2239c111-61d9-556e-9045-9e3707553db4","frontmatter":{"draft":true}},{"id":"27f10a38-0ecb-539f-a717-7e40a41bbd10","frontmatter":{"draft":null}},{"id":"2cfd9e33-b4e1-53e4-884d-d8a6760f3387","frontmatter":{"draft":true}},{"id":"2f30c3f1-0d66-590b-8dba-7836df701d46","frontmatter":{"draft":null}},{"id":"3908aafc-c8d3-5c67-821f-0866592449f2","frontmatter":{"draft":true}},{"id":"3b696b96-130d-50de-a673-dc1367f32387","frontmatter":{"draft":null}},{"id":"46a22c41-5455-557c-85d4-973a6e2220ee","frontmatter":{"draft":null}},{"id":"48c65a15-67ca-57d0-9edc-ebcb868f7ad2","frontmatter":{"draft":true}},{"id":"49cf25c1-03f6-575e-8c2f-638ccd6198ea","frontmatter":{"draft":null}},{"id":"4d43646f-8aa6-52b6-b0b6-5160f0be2b05","frontmatter":{"draft":null}},{"id":"4ed3b747-2001-54f4-9661-3acab89ce275","frontmatter":{"draft":null}},{"id":"4edc1b46-b395-5783-af6a-818b8fc9c2dc","frontmatter":{"draft":null}},{"id":"5888c50d-8414-5e8f-b0dc-28a31b29053d","frontmatter":{"draft":null}},{"id":"63f3c7ad-6c59-52b5-9816-78fd348955ff","frontmatter":{"draft":true}},{"id":"73ab4455-f04d-5320-bf3a-90b9f7441d13","frontmatter":{"draft":null}},{"id":"75550af2-8134-5467-a07d-abbb5a4f6b7c","frontmatter":{"draft":true}},{"id":"7778d041-a5bf-536a-a36f-c0dbc5e08ac7","frontmatter":{"draft":true}},{"id":"78349b16-6e41-5fef-ae38-bcdc5ff297ef","frontmatter":{"draft":true}},{"id":"7a8fc278-a847-5b68-8b74-a83193ba3f55","frontmatter":{"draft":null}},{"id":"7d6499d9-277c-5f07-b8b1-98ae40c50c42","frontmatter":{"draft":null}},{"id":"7d79eb4b-cd4a-5621-a67a-91d9a24dce05","frontmatter":{"draft":null}},{"id":"8b3e46c2-1a1e-5af0-8900-7972c7285d15","frontmatter":{"draft":null}},{"id":"8f7b1b24-7738-5b97-bfb6-fd763f11a664","frontmatter":{"draft":true}},{"id":"961ec1e6-3f2b-59d9-a33f-dad76cf67f47","frontmatter":{"draft":null}},{"id":"97f01467-e3a1-58e1-b2a4-db77354cc1a3","frontmatter":{"draft":null}},{"id":"9f02de74-61a0-5daf-a048-1c1022e08fe4","frontmatter":{"draft":null}},{"id":"9f24363b-ee3e-54bf-8a18-46ea3b269bea","frontmatter":{"draft":null}},{"id":"a091877c-69b8-59f9-8963-1af334fd573c","frontmatter":{"draft":null}},{"id":"a190aac4-0483-5e02-b1d3-261f3b5f313a","frontmatter":{"draft":null}},{"id":"a6c64123-b824-5224-8027-90eb12040396","frontmatter":{"draft":null}},{"id":"b4251348-b618-5b5b-a2c8-e4c6b2431b83","frontmatter":{"draft":true}},{"id":"bfee69af-7d7f-5d87-9680-d2e9b60f8416","frontmatter":{"draft":null}},{"id":"c2249b7b-b97e-5cf4-8ea9-8024e96851b7","frontmatter":{"draft":true}},{"id":"c5e2431a-cf05-5024-b833-e1c69f680d44","frontmatter":{"draft":null}},{"id":"c6def021-b8da-5dbe-ad3e-811d9286424d","frontmatter":{"draft":true}},{"id":"c7a5adfb-149b-5469-ba35-7421e2101951","frontmatter":{"draft":null}},{"id":"cbdf3192-973c-5d87-9cf1-bb9110e9a169","frontmatter":{"draft":null}},{"id":"d29b4513-0609-5cfc-af49-817467dbed1f","frontmatter":{"draft":null}},{"id":"d4d1afa4-f2f9-5942-ae36-2826fb938af5","frontmatter":{"draft":null}},{"id":"db26c6b9-37b4-5cc4-b1ec-c61dc667863e","frontmatter":{"draft":null}},{"id":"dd0c41cf-0a03-5b89-b5a2-f64859aeae63","frontmatter":{"draft":null}},{"id":"e322eac2-bd89-5347-b20d-d050d303a6be","frontmatter":{"draft":null}},{"id":"e376b2d4-df91-5b82-af7a-a8d02763e922","frontmatter":{"draft":true}},{"id":"e4fb8478-b1ad-59eb-95e8-8c5e0500d3f4","frontmatter":{"draft":null}},{"id":"e83330dc-2312-5ae6-95fa-53e86909f42b","frontmatter":{"draft":true}},{"id":"eba9aa6a-6e21-5f1b-a0eb-7b6bfb1e04f1","frontmatter":{"draft":null}},{"id":"ebae7878-c4ee-505e-81e2-3d3fc47ea826","frontmatter":{"draft":null}},{"id":"ed7af7f9-75f5-59be-9063-de564576eed7","frontmatter":{"draft":true}},{"id":"f06a6ae0-e961-504c-8dab-a60489c0557a","frontmatter":{"draft":true}},{"id":"f5a25ce1-67a6-51b2-9bf1-f9fbacb41ad1","frontmatter":{"draft":true}},{"id":"fd6eab68-17d3-5395-8b2b-54a6efe43ebb","frontmatter":{"draft":null}}]}},"pageContext":{"id":"84bf9a79-dd68-55d1-a1b3-60ffd3784554"}},"staticQueryHashes":["1530353647","2576926420","63159454"]}