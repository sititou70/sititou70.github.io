{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/ECMA-262を読んだ日/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sititou70.github.io"}},"markdownRemark":{"excerpt":"お仕事でJavaScriptを書いています．sititou70です． 人生ではじめてECMA-262を読んだので，記念的日記を残したいと思います． いきさつ ある日のお仕事で，「ユーザーが入力した文字列の コードポイント数 を数えたい」という場面がありました． さっそく「mdn string codepoint…","html":"<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 714px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/f1d363e6774ac2ddb43d9766816d8995/78392/top.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 47.47899159663865%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'190\\'%20viewBox=\\'0%200%20400%20190\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%2095v95h401V0H0v95m158-19c2%202%201%203-1%202-5-3-12%200-15%207-2%204-2%205-2%2015%201%2015%202%2017%2010%2015l10-1c13%200%2020-7%2020-20%200-10-7-18-18-19-4%200-5%200-4%201M44%2097l1%2016h4l5-1c0-2-1-2-4-2h-3V97l1-12%203-1c5%200%204-2-2-2h-5v15m164-14l4%201h3v26h-3c-3%200-4%200-4%202l5%201h5V82h-5l-5%201m133%2013c0%2010%200%2012%202%2012l1-6c0-7%201-10%204-10s4%203%204%209%200%207%202%207c1%200%202-11%200-15-2-3-6-4-9-2-1%201-1%201-1-3l-1-5c-2%200-2%202-2%2013m-14-10l-1%202-2%202-2%201%202%201c2%200%202%201%202%207%200%205%201%207%202%208h8l-2-1c-4%200-5-2-5-8%200-5%201-6%204-6%204%200%203-2-1-2-3%200-3%200-3-2%200-3-1-4-2-2m-21%205c-8%206-2%2020%206%2016%202-1%202-1%202%201%200%203-3%205-7%204-2-1-3-1-3%201%200%201%206%202%209%201%203-2%204-5%204-15l-1-9-2%201h-2c-3-2-3-2-6%200m-40%201c-3%202-4%2010-1%2013%202%203%207%204%2010%203%204-1%204-3-1-2l-6-1c-4-4-2-5%204-5h7l-1-3c-1-7-7-9-12-5m18-1c-2%201-1%2017%201%2017l1-6c0-7%203-11%206-9%201%200%202%202%202%208%200%205%200%207%202%207l1-7c0-10-3-13-9-10h-4\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/f1d363e6774ac2ddb43d9766816d8995/a3824/top.webp 714w\"\n              sizes=\"(max-width: 714px) 100vw, 714px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/f1d363e6774ac2ddb43d9766816d8995/78392/top.png 714w\"\n            sizes=\"(max-width: 714px) 100vw, 714px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/f1d363e6774ac2ddb43d9766816d8995/78392/top.png\"\n            alt=\"トップ画像\"\n            title=\"トップ画像\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>お仕事でJavaScriptを書いています．sititou70です．</p>\n<p>人生ではじめてECMA-262を読んだので，記念的日記を残したいと思います．</p>\n<h2 id=\"いきさつ\" style=\"position:relative;\"><a href=\"#%E3%81%84%E3%81%8D%E3%81%95%E3%81%A4\" aria-label=\"いきさつ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>いきさつ</h2>\n<p>ある日のお仕事で，「ユーザーが入力した文字列の <strong>コードポイント数</strong> を数えたい」という場面がありました．</p>\n<p>さっそく「mdn string codepoint length」でググってみると，以下の情報が見つかりました．</p>\n<blockquote>\n<p><code class=\"language-text\">length</code> は文字数ではなくコードユニットの数を数えるため、文字数を知りたい場合はこのようなことをする必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCharacterLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/length\">String length - JavaScript | MDN</a></p>\n</blockquote>\n<p>な……なるほど？？？</p>\n<p><code class=\"language-text\">getCharacterLength</code>を使うことで <em>「文字数」</em> がわかると言っています．しかし，ここでの <em>「文字数」</em> って？</p>\n<p>ちょっとテストしてみます．</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 🤔 = 🤔(U+1F914)</span>\n<span class=\"token function\">getCharacterLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🤔\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// が = か(U+304B) + ゙(U+3099)</span>\n<span class=\"token function\">getCharacterLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"が\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 👨‍👩‍👧‍👦 = 👨(U+1F468) + ゼロ幅接合子(U+200D) + 👩(U+1F469) + (U+200D) + 👧(U+1F467) + (U+200D) + 👦(U+1F466)</span>\n<span class=\"token function\">getCharacterLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"👨‍👩‍👧‍👦\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span></code></pre></div>\n<p>あ，なんかコードポイント数を返す <strong>っぽい</strong></p>\n<p>ですが，そのようにキッパリと言及されているわけではないので，多少モヤモヤしますね．もしかしたら，「コードポイントを数える <strong>っぽい</strong> 動作」なだけで，上記のテストではわからない例外があるのかもしれません．</p>\n<p>MDNの本文には，これ以上の情報はなさそうです．しかし，「仕様書」というセクションにECMA-262へのリンクがありました．</p>\n<p>良い機会なので，ECMA-262を雰囲気で読んでみましょう．</p>\n<h2 id=\"スプレッド構文を調べる\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E6%A7%8B%E6%96%87%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B\" aria-label=\"スプレッド構文を調べる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スプレッド構文を調べる</h2>\n<p>なにはともあれ，<a href=\"https://tc39.es/ecma262/\">https://tc39.es/ecma262/</a> にアクセスします．こちらのHTMLファイルですが，なんと <strong>6.5MBもある</strong> ので開くだけでなんだか一仕事終えた気になれます．</p>\n<p>さて，どこから読んでいこうかとなるわけですが，私は「スプレッド構文」が内部でどのように処理されているのか？というところからよくわかっていませんでした．</p>\n<p>ページを開くと，いきなり検索ボックスが設置されていますので，</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 262px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/c0325e069cb9646b857c4414fd3ee81d/0c8ca/search_box.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 43.89312977099236%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'176\\'%20viewBox=\\'0%200%20400%20176\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M10%2010c-3%203-3%2035%200%2037%203%203%20390%203%20390%201s-22-2-194-2c-106%200-193%200-192-1l1-6c0-5%200-5%202-4%202%203%209%202%2011%200%204-4%202-7-5-9-5-2-7-4-5-6%203-1%205-1%208%201s4%200%201-2c-4-3-10-2-11%202-1%201-1%200-1-3l-1-4c-1%201-2%205-2%2016l-1%2015V30l1-16c0-2%2018-2%20194-2%20193%200%20194%200%20194-2s-1-2-194-2S12%208%2010%2010m77%208c-2%201-1%2019%201%2019l1-6c0-6%200-6%203-7%203%200%203%200%204%207%200%208%202%208%202%200s-1-10-6-9c-3%201-3%201-3-1%200-3-1-4-2-3m-52%205c-3%202-3%2012%201%2013%202%201%206%201%207-1%201-1%201-1-2-1-3%201-6%200-6-3l5-1c3%200%205-1%205-2%201-4-6-8-10-5m15%200l-1%202h3c2-2%205-1%205%201s-1%202-3%202c-4%200-6%202-6%206%201%203%205%204%207%202h2c2%203%204%201%203-4%200-9-4-12-10-9M15%2066l1%202h2l2-1%201%206-1%205-1%201%204%201%204-1-1-1V67l2%201c2%202%203%201%203-1s-1-3-8-3c-6%200-7%200-8%202m21%202l-2%206-1%204c-2%201-1%202%201%202s3%200%202-2c0-2%200-2%203-2%202%200%202%201%202%202%200%202%201%202%204%202l3-1-4-10c-3-6-5-7-8-1m16-4v16h5l7-1c2-1%202-5%201-6s-2-2-1-3c2-3-1-6-7-6h-5m18%208v8h6c7%200%207%200%207-2%200-3-2-4-3-1l-3%201c-2%200-2%200-2-6l1-6%201-1-4-1h-3v8m17-7v1l-1%2012c0%202%201%202%207%202s7%200%207-2l-1-2-1%201-3%201c-2%200-3%200-3-2s0-2%203-2c2%201%202%201%202-1s0-2-3-1c-2%200-2%200-2-3%201-3%204-4%205-1%201%202%203%201%203-1s-1-3-7-3l-6%201m28%201c-5%206-1%2014%206%2014%205%200%208-3%208-8%200-7-9-11-14-6m19%206v8h3l4-1-1-1-1-2c0-2%200-2%203-1%202%200%202%200%202-2s-2-4-2-2c-2%202-3%201-3-1s1-3%203-3l2%201%201%201%201-2c0-2-1-3-6-3h-6v8m26-6c-3%203-4%206-2%2010%202%205%2013%206%2014%201%200-2-1-3-3%200-3%203-7%200-7-5s3-6%206-4%205%201%203-2c-1-3-8-3-11%200m18%200c-5%206-1%2014%206%2014%206%200%208-2%208-8%200-7-8-11-14-6m19-2v16h2c3%200%203%200%201-7%200-3%201-2%205%203s5%205%205-2l1-8c2-1-1-3-4-2v2l1%204c0%202-1%202-3-2-2-3-4-4-6-4h-2m18%201v4l2-1%202-1v11l-1%201%204%201%204-1-1-1-1-5c0-5%200-6%202-6l2%201%201%201%201-2c0-2-1-3-8-3l-7%201m19%207v8h6l7-1c0-2-2-3-2-2-2%202-6%201-6-1s1-3%203-1h2c1-3-1-6-2-4-2%202-3%201-3-1s1-3%202-3l2%201%202%201%201-2c0-2-1-3-6-3h-6v8m17-7v14c-1%201-1%201%202%201l3-1-1-1-1-4v-4l3%203%204%205%202%202c2%200%202-1%202-6l1-8c0-2%200-2-2-2-3%200-5%201-3%202v5l-3-3c-2-4-6-5-7-3m18%202l1%202%201-1%202-1%201%206-1%205-1%201%205%201%204-1-1-1-1-5%201-6%202%201h2c3-2%200-4-7-4-8%200-8%200-8%203m20-1c-3%203-2%206%203%208l3%203h-5c-2-3-3-2-3%200%201%204%2010%204%2011%200%202-3%201-5-4-7l-3-2c0-2%203-2%204%200%202%202%203%201%203-1-1-3-7-4-9-1M89%20116c-4%205-1%2011%204%2011%204%200%205-2%205-7%200-6-6-8-9-4m21%2048c0%2010%200%2010%202%2010s2%200%201-1c-2-1-1-4%202-5%204%200%206-3%206-7s-2-6-7-6h-4v9\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/c0325e069cb9646b857c4414fd3ee81d/7dec2/search_box.webp 262w\"\n              sizes=\"(max-width: 262px) 100vw, 262px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/c0325e069cb9646b857c4414fd3ee81d/0c8ca/search_box.png 262w\"\n            sizes=\"(max-width: 262px) 100vw, 262px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/c0325e069cb9646b857c4414fd3ee81d/0c8ca/search_box.png\"\n            alt=\"検索ボックスの画像\"\n            title=\"検索ボックスの画像\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>「spread」と入力して雑に一番上の結果へ飛んでみました．</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 339px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/da7eeb446f01753b27765711662c6b56/12f7a/spread_search_result.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 53.09734513274337%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'212\\'%20viewBox=\\'0%200%20400%20212\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M7%2023v15h394l-197-1H8V8h196l197-1H7v16m64-8c0%201-1%202-3%202-4%201-6%205-4%209%201%203%201%203%205%203h5v-8l-1-8-2%202m-59%203c-2%201-1%205%202%206%204%201%204%202%200%202h-4c0%203%208%204%2010%201%201-1%201-1%201%203%200%205%203%206%204%201l2-2c4%200%205-2%205-6%200-5-1-6-7-6h-4v8l-2-2-3-2-2-1%202-1a3286%203286%200%2000-4-1m21%205c0%205%200%206%202%206l1-4c0-3%201-6%203-6l1%204%201%205c2%202%208%201%209-1%200-2%200-2-3-1-2%201-4%200-4-1l4-1c4%200%205-2%203-5-1-2-7-3-9-1h-1l-3-1h-4v6m19-4l1%202v2c-3%204-1%206%206%206%204%200%205%200%204-1l-1-6v-4l-5-1c-3%200-4%200-5%202m71%2028c0%203%200%203-2%203-3%200-5%202-5%206%200%203%202%205%206%205h3v-8c0-5-1-7-2-8v2M80%2057v7H33v-4c0-4%200-5%202-5l1%203c-1%203-1%204%201%201s0-5-3-5-3%200-3%205%200%205-3%205l-2%201c1%202%20173%203%20173%201s-7-2-58-2l-59-1c0-1%201-2%203-2%206-2%205-11-2-11h-3v7m208%2086c0%202%200%203-3%203-3%201-3%201-3%205s1%205%205%205h4v-7c0-7%200-8-2-8-1%200-2%201-1%202m14%205c0%207%201%208%203%208%204%200%206-2%206-6%200-3-3-6-5-4l-1-2c0-2-1-3-2-3l-1%207m46-6c-3%202-3%2011%200%2013%202%202%208%201%209-1l2-5-2-6c-1-2-7-3-9-1m1%202c-3%206%202%2014%207%2010%203-3%200-12-3-12l-4%202M80%20174c-2%201-3%209-1%2011%203%205%208%203%209-3%200-6-4-11-8-8m101%206c0%207%201%208%203%208%204%200%206-2%206-5%200-4-2-6-4-6l-2-2-2-2-1%207m119%205l1%208%202-2c0-2%200-3%202-3%206-1%205-11-2-11-3%200-3%200-3%208\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/da7eeb446f01753b27765711662c6b56/dbe29/spread_search_result.webp 339w\"\n              sizes=\"(max-width: 339px) 100vw, 339px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/da7eeb446f01753b27765711662c6b56/12f7a/spread_search_result.png 339w\"\n            sizes=\"(max-width: 339px) 100vw, 339px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/da7eeb446f01753b27765711662c6b56/12f7a/spread_search_result.png\"\n            alt=\"「spread」の検索結果\"\n            title=\"「spread」の検索結果\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>すると，</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/168490cc147500443d00320dc1acf185/84fd7/array_init.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 92.85714285714286%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'371\\'%20viewBox=\\'0%200%20400%20371\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M90%205v4c0%202%200%202-1%200l-3-2v2c-2%201-3-1-2-3l-1-1-1%201-2%201c-1%200-2%200-2%202-1%202-1%202-1-1l-1-3-1%201-2%201c-3%200-3%200-3%202%200%204%202%204%202%201l1-2v2c0%202%200%202%2015%202l15-1v-1h1l2%202v-1l2-3c1-1%201-1-3-1l-5%201h-1l-3-1h-2c0-2-4-3-4-2m39%2028c0%202%202%203%202%201l2-1%201%201v1l1-1%201-2%201%203c0%202%200%202%202%201l2-1%201-1c0-2%200-2%202%200l2%201c-1-1%200-2%201-2l1%201c-1%202%202%202%206%201h6l1-1%201-1%201%202%201-2c-1-2-10-3-10%200h-1v-1l-12-1c-11%200-12%200-12%202m0%209l-1%201-2%201c-1%201%200%204%201%204l1-1v-1l1%201%202%201%202-1%201-1%201%201c0%202%204%201%204-1h1l2%202%202-1v-1l1%201h10l-1-1-1-2-11-1-11-1-1-1-1%201M31%2067c1%202%200%202-1%202l-2%201%201%201%203%201h8l1-1%201-2v2c0%202%200%202%202%201h3c1%201%206%201%206-1h3v-2l-11-1-12-1-1-1-1%201m243%201c0%203%202%205%202%203h1c2%201%202%201%203-2l1-2v3c0%203%200%203%201%201s1-2%201%200l2%202%202-1%201-1c1-1%201%200%201%201l1-1c1-2%201-2%201%200s0%202%203%201c2-2%203-2%203-1h3l2%202%201-1v-1c1-1%201%200%201%201%200%202%202%201%202-2%201-2%200-2-3-2l-4%202-1-1-7-1c-5%201-8%200-9-1-1-2-3-1-3%201h-4l-1-2v2m-87%2013h-4c-1%202%200%204%201%204l1-1v-1l1%201%202%201%202-1%201-1%201%201c0%202%204%201%204-1h1l2%202%202-1v-1l1%201%203%201c2%200%203-1%203-3s0-2-9-2l-10%201h-1l-1-2v2m-61%20139h-7c-6%200-7%200-7%202h-1l-1-2-2%202h-1c0-2-3-3-3-1h-2l-1%201-1-1-2-1c-3%200-4%201-2%203h3c0%201%201%202%203%201%203%200%203%200%202%201v1c2%200%204-2%205-4h1l1%202%202-2c1-1%201-1%201%201v2l1-2%201-1c0%202%203%203%203%201h2l3%201c3%200%203%200%203-2v-3l-1%201m95%2047l-6%201-6%201h-1l-1-1-2%201h-2l-2-1%201%202c2%201%201%202-1%201l-1%201%203%201h3l3-1%201-2%201%201%202%202v-1c0-3%201-2%203%200h10l-1-1%201-1v-1c-1-1-1-1%201-1l1-1c0-3-4-1-4%202v3l-1-3c0-2-1-2-2-2M25%20343v7h50v-14H25v7\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/168490cc147500443d00320dc1acf185/f4a91/array_init.webp 728w,\n/static/168490cc147500443d00320dc1acf185/574d6/array_init.webp 882w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/168490cc147500443d00320dc1acf185/beb58/array_init.png 728w,\n/static/168490cc147500443d00320dc1acf185/84fd7/array_init.png 882w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/168490cc147500443d00320dc1acf185/beb58/array_init.png\"\n            alt=\"13.2.4 Array Initializerのスクリーンショット\"\n            title=\"13.2.4 Array Initializerのスクリーンショット\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p><a href=\"https://tc39.es/ecma262/#prod-SpreadElement\">13.2.4 Array InitializerのSpreadElement</a>にドンピシャ飛ばされました．魔法の検索ボックスかな？</p>\n<p>13.2.4は以下のような構成になっています．</p>\n<ul>\n<li>13.2.4 Array Initializer\n<ul>\n<li>Syntax</li>\n<li>13.2.4.1 Runtime Semantics: ArrayAccumulation</li>\n<li>13.2.4.2 Runtime Semantics: Evaluation</li>\n</ul>\n</li>\n</ul>\n<p>なーるほど，配列の初期化に関する <strong>文法と意味</strong> を定義しているんですね．</p>\n<p>ひとまずSyntax節を見てみますと</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SpreadElement:\n  ... AssignmentExpression</code></pre></div>\n<p>とあります．「<code class=\"language-text\">...</code>に続けて<code class=\"language-text\">AssignmentExpression</code>を書く」と定義されていますので，今回は<code class=\"language-text\">AssignmentExpression</code>の部分が文字列リテラルに相当するみたいです．</p>\n<details>\n<summary>\n  ホントかどうか，AssignmentExpression\n  の定義を追って文字列リテラルが出てくるのを確かめてみます\n</summary>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AssignmentExpression:\n  ConditionalExpression\n  ...その他の定義...\n\nConditionalExpression:\n  ShortCircuitExpression\n  ...その他の定義...\n\nShortCircuitExpression:\n  LogicalORExpression\n  ...その他の定義...\n\nLogicalORExpression:\n  LogicalANDExpression\n  ...その他の定義...\n\nLogicalANDExpression:\n  BitwiseORExpression\n  ...その他の定義...\n\nBitwiseORExpression:\n  BitwiseXORExpression\n  ...その他の定義...\n\nBitwiseXORExpression:\n  BitwiseANDExpression\n  ...その他の定義...\n\nBitwiseANDExpression:\n  EqualityExpression\n  ...その他の定義...\n\nEqualityExpression:\n  RelationalExpression\n  ...その他の定義...\n\nRelationalExpression:\n  ShiftExpression\n  ...その他の定義...\n\nShiftExpression:\n  AdditiveExpression\n  ...その他の定義...\n\nAdditiveExpression:\n  MultiplicativeExpression\n  ...その他の定義...\n\nMultiplicativeExpression:\n  ExponentiationExpression\n  ...その他の定義...\n\nExponentiationExpression:\n  UnaryExpression\n  ...その他の定義...\n\nUnaryExpression:\n  UpdateExpression\n  ...その他の定義...\n\nUpdateExpression:\n  LeftHandSideExpression\n  ...その他の定義...\n\nLeftHandSideExpression:\n  NewExpression\n  CallExpression\n  OptionalExpression\n  ...その他の定義...\n\nOptionalExpression:\n  MemberExpression\n  ...その他の定義...\n\nMemberExpression:\n  PrimaryExpression\n  ...その他の定義...\n\nPrimaryExpression:\n  this\n  IdentifierReference\n  Literal\n  ...その他の定義...\n\nLiteral:\n  NullLiteral\n  BooleanLiteral\n  NumericLiteral\n  StringLiteral（あった）\n\nStringLiteral:\n  \" DoubleStringCharactersopt \"\n  ' SingleStringCharactersopt '</code></pre></div>\n<p><strong>長っげ！</strong></p>\n<p>遭難するかと思った</p>\n</details>\n<p>次に，<a href=\"https://tc39.es/ecma262/#sec-runtime-semantics-arrayaccumulation\">13.2.4.1 Runtime Semantics: ArrayAccumulation</a>節を見てみます．</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 712px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/01983b57b4ed0cf86d5449365523069a/b707a/spreadelement_semantics.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 41.71348314606742%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'167\\'%20viewBox=\\'0%200%20400%20167\\'%20preserveAspectRatio=\\'none\\'/%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/01983b57b4ed0cf86d5449365523069a/37f43/spreadelement_semantics.webp 712w\"\n              sizes=\"(max-width: 712px) 100vw, 712px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/01983b57b4ed0cf86d5449365523069a/b707a/spreadelement_semantics.png 712w\"\n            sizes=\"(max-width: 712px) 100vw, 712px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/01983b57b4ed0cf86d5449365523069a/b707a/spreadelement_semantics.png\"\n            alt=\"SpreadElementのセマンティクス\"\n            title=\"SpreadElementのセマンティクス\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>SpreadElementの意味は，このような<a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions\">独特の表現</a>で定義されていました．</p>\n<p>ちょっと分かりづらいので，JavaScript風に書き直して読んでみます．</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> array<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 現在初期化している配列</span>\n<span class=\"token keyword\">let</span> nextIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 次に値を追加すべきインデックス</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SpreadElementのセマンティクス</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">AssignmentExpression</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let spreadRef be the result of evaluating AssignmentExpression.</span>\n  <span class=\"token comment\">// 今回の評価結果は文字列リテラルそのもの</span>\n  <span class=\"token keyword\">let</span> spreadRef <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">AssignmentExpressionを評価した結果</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Let spreadObj be ? GetValue(spreadRef).</span>\n  <span class=\"token comment\">// GetValue: リファレンスを解決して値を得る</span>\n  <span class=\"token comment\">// 今回の場合は，文字列リテラル（をGetしたCompletion Record）がspreadObjに入る</span>\n  <span class=\"token keyword\">let</span> spreadObj <span class=\"token operator\">=</span> <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>spreadRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Let iteratorRecord be ? GetIterator(spreadObj).</span>\n  <span class=\"token comment\">// GetIterator: イテレータレコードを得る</span>\n  <span class=\"token comment\">// イテレータレコードとは，{ [[Iterator]]: iterator, [[NextMethod]]: nextMethod, [[Done]]: false } みたいなやつ</span>\n  <span class=\"token keyword\">let</span> iteratorRecord <span class=\"token operator\">=</span> <span class=\"token function\">GetIterator</span><span class=\"token punctuation\">(</span>spreadObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. Repeat,</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// a. Let next be ? IteratorStep(iteratorRecord).</span>\n    <span class=\"token comment\">// IteratorStep: イテレータから次の結果を得る．イテレータが完了していればfalseを得る</span>\n    <span class=\"token comment\">// 結果とは，{value: value, done: boolean} みたいなやつ</span>\n    <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token function\">IteratorStep</span><span class=\"token punctuation\">(</span>iteratorRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// b. If next is false, return nextIndex.</span>\n    <span class=\"token comment\">// イテレータが完了していればループを終了する</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nextIndex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// c. Let nextValue be ? IteratorValue(next).</span>\n    <span class=\"token comment\">// IteratorValue: 結果から値を得る．実質valueプロパティを参照しているだけ</span>\n    <span class=\"token keyword\">let</span> nextValue <span class=\"token operator\">=</span> <span class=\"token function\">IteratorValue</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// d. Perform ! CreateDataPropertyOrThrow(array, ! ToString(𝔽(nextIndex)), nextValue).</span>\n    <span class=\"token comment\">// CreateDataPropertyOrThrow: オブジェクトにプロパティを生やす</span>\n    <span class=\"token comment\">// 今回は，arrayのnextIndex番地にnextValueの値を設定している</span>\n    <span class=\"token comment\">// 𝔽: 仕様書内で扱っているような抽象的な数値を，ECMAScriptのNumberの範囲へ変換する</span>\n    <span class=\"token comment\">// ToString: numberやbooleanなど，様々なタイプの値を文字列に変換する</span>\n    <span class=\"token function\">CreateDataPropertyOrThrow</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">𝔽</span><span class=\"token punctuation\">(</span>nextIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> nextValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// e. Set nextIndex to nextIndex + 1.</span>\n    nextIndex <span class=\"token operator\">=</span> nextIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<details>\n<summary>更に詳細な説明</summary>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 補足：'?'ショートハンド（ReturnIfAbrupt）は，前の操作結果がabrupt completionであるときそれをreturnする．</span>\n<span class=\"token comment\">// 本記事では簡単のため省略</span>\n<span class=\"token comment\">//// abrupt completion: TypeフィールドがnormalでないCompletion Record</span>\n<span class=\"token comment\">//// Completion Record: 各セマンティクスの実行結果を表すような，仕様書の中でのみ使われるレコード型</span>\n<span class=\"token comment\">//// Typeフィールド: 実行がどのように完了したかを表す．値は次のうちのどれか: normal, break, continue, return, throw</span>\n<span class=\"token comment\">//// see: https://tc39.es/ecma262/#sec-completion-record-specification-type</span>\n\n<span class=\"token comment\">// 補足：'!'ショートハンドは，前の操作結果がabrupt completionでないことを前提として，その値を即座に取り出す</span>\n<span class=\"token comment\">// 失敗しない操作を簡単に扱うためにあるっぽい</span>\n<span class=\"token comment\">// see: https://tc39.es/ecma262/#sec-completion-record-specification-type</span>\n\n<span class=\"token comment\">// Vのリファレンスを解決して値を取り出してくれる抽象操作……らしい（よくわかってない）</span>\n<span class=\"token comment\">// see: https://qiita.com/uhyo/items/39750a5359629b3fee05</span>\n<span class=\"token comment\">//// 抽象操作: 仕様書の中でのみ使われる手続きのようなもの</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">V</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ReturnIfAbrupt(V).</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">V</span><span class=\"token punctuation\">.</span>Type <span class=\"token operator\">!==</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Completion</span><span class=\"token punctuation\">(</span>spreadObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. If V is not a Reference Record, return V.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">VがReference Recordタイプではない</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 今回はVがリファレンスでないので，ここで返るっぽい</span>\n\n  <span class=\"token comment\">// 3. If IsUnresolvableReference(V) is true, throw a ReferenceError exception.</span>\n  <span class=\"token comment\">// 4. If IsPropertyReference(V) is true, then</span>\n  <span class=\"token comment\">// a. Let baseObj be ? ToObject(V.[[Base]]).</span>\n  <span class=\"token comment\">// b. If IsPrivateReference(V) is true, then</span>\n  <span class=\"token comment\">// i. Return ? PrivateGet(baseObj, V.[[ReferencedName]]).</span>\n  <span class=\"token comment\">// c. Return ? baseObj.[[Get]](V.[[ReferencedName]], GetThisValue(V)).</span>\n  <span class=\"token comment\">// 5. Else,</span>\n  <span class=\"token comment\">// a. Let base be V.[[Base]].</span>\n  <span class=\"token comment\">// b. Assert: base is an Environment Record.</span>\n  <span class=\"token comment\">// c. Return ? base.GetBindingValue(V.[[ReferencedName]], V.[[Strict]]) (see 9.1).</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// objからイテレータレコードを得る</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">GetIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> hint<span class=\"token punctuation\">,</span> method</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// If hint is not present, set hint to sync.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hint <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> hint <span class=\"token operator\">=</span> <span class=\"token string\">\"sync\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 今回はhintを指定していないのでhintは\"syncになる\"</span>\n\n  <span class=\"token comment\">// 2. If method is not present, then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hint <span class=\"token operator\">===</span> <span class=\"token string\">\"async\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// a. If hint is async, then</span>\n      <span class=\"token comment\">//     i. Set method to ? GetMethod(obj, @@asyncIterator).</span>\n      <span class=\"token comment\">//     ii. If method is undefined, then</span>\n      <span class=\"token comment\">//         1. Let syncMethod be ? GetMethod(obj, @@iterator).</span>\n      <span class=\"token comment\">//         2. Let syncIteratorRecord be ? GetIterator(obj, sync, syncMethod).</span>\n      <span class=\"token comment\">//         3. Return CreateAsyncFromSyncIterator(syncIteratorRecord).</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 今回はこちらに入る</span>\n      <span class=\"token comment\">// b. Otherwise, set method to ? GetMethod(obj, @@iterator).</span>\n      <span class=\"token keyword\">let</span> method <span class=\"token operator\">=</span> <span class=\"token function\">GetMethod</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"@@iterator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3. Let iterator be ? Call(method, obj).</span>\n  <span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// クロージャからイテレータが作成されて返る（後述）</span>\n\n  <span class=\"token comment\">// 4. If Type(iterator) is not Object, throw a TypeError exception.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> iterator <span class=\"token operator\">!==</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">\"TypeError exception\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 5. Let nextMethod be ? GetV(iterator, \"next\").</span>\n  <span class=\"token keyword\">let</span> nextMethod <span class=\"token operator\">=</span> <span class=\"token function\">GetV</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token string\">\"next\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 6. Let iteratorRecord be the Iterator Record { [[Iterator]]: iterator, [[NextMethod]]: nextMethod, [[Done]]: false }.</span>\n  <span class=\"token keyword\">let</span> iteratorRecord <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">Iterator</span><span class=\"token operator\">:</span> iterator<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">NextMethod</span><span class=\"token operator\">:</span> nextMethod<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">Done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 7. Return iteratorRecord.</span>\n  <span class=\"token keyword\">return</span> iteratorRecord<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// VからメソッドPを得る</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">GetMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let func be ? GetV(V, P).</span>\n  <span class=\"token keyword\">let</span> func <span class=\"token operator\">=</span> <span class=\"token function\">GetV</span><span class=\"token punctuation\">(</span><span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 今回は\"@@iterator\"プロパティにある関数オブジェクトが得られるはず</span>\n\n  <span class=\"token comment\">// 2. If func is either undefined or null, return undefined.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>func <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> func <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 今回は当てはまらない</span>\n\n  <span class=\"token comment\">// 3. If IsCallable(func) is false, throw a TypeError exception.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IsCallable</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">\"TypeError exception\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"@@iterator\"関数が呼び出し可能なので今回は該当しない</span>\n\n  <span class=\"token comment\">// 4. Return func.</span>\n  <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// VからプロパティPの値を得る</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">GetV</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let O be ? ToObject(V).</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=</span> <span class=\"token function\">ToObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">V</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Oには文字列が入るっぽい</span>\n\n  <span class=\"token comment\">// 2. Return ? O.[[Get]](P, V).</span>\n  <span class=\"token comment\">// String Exotic Objectsには[[Get]]の定義はなかったからOrdinary Objectの[[Get]]が適用されるはず</span>\n  <span class=\"token comment\">// see: https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver</span>\n  <span class=\"token comment\">//// Ordinary Object: 普通のオブジェクト</span>\n  <span class=\"token comment\">//// Exotic Object: 普通のオブジェクトを拡張・継承して定義される特別なオブジェクト．ArrayとかStringとか．</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// argumentをオブジェクトに変換する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ToObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">argument</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 今回はargumentの値はStringリテラル</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> argument<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Undefined\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// Throw a TypeError exception.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Null\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// Throw a TypeError exception.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Boolean\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// Return a new Boolean object whose [[BooleanData]] internal slot is set to argument. See 20.3 for a description of Boolean objects.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Number\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// Return a new Number object whose [[NumberData]] internal slot is set to argument. See 21.1 for a description of Number objects.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"String\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// ここに入る</span>\n\n      <span class=\"token comment\">// Return a new String object whose [[StringData]] internal slot is set to argument. See 22.1 for a description of String objects.</span>\n      <span class=\"token comment\">// [[StringData]]内部スロットは，Stringのデータ（UFT-16のデータ？）を保持するらしい……．よくわかっていないけど↓みたいなこと？</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Symbol\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// Return a new Symbol object whose [[SymbolData]] internal slot is set to argument. See 20.4 for a description of Symbol objects.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"BigInt\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// Return a new BigInt object whose [[BigIntData]] internal slot is set to argument. See 21.2 for a description of BigInt objects.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Object\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// Return argument.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> Receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">OrdinaryGet</span><span class=\"token punctuation\">(</span><span class=\"token constant\">O</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> Receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// この抽象操作以降の操作は深く追わないことにします</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">OrdinaryGet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">O</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> Receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let desc be ? O.[[GetOwnProperty]](P).</span>\n  <span class=\"token keyword\">let</span> desc <span class=\"token operator\">=</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Oの\"@@iterator\"プロパティをGetする</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>desc <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 自分がPを持っていなかったら親へプロトタイプチェーンをたどる操作．ここではStringが\"@@iterator\"を持っているので該当しない</span>\n    <span class=\"token comment\">// 2. If desc is undefined, then</span>\n    <span class=\"token comment\">//     a. Let parent be ? O.[[GetPrototypeOf]]().</span>\n    <span class=\"token comment\">//     b. If parent is null, return undefined.</span>\n    <span class=\"token comment\">//     c. Return ? parent.[[Get]](P, Receiver).</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 以下の処理では，Getしたい対象のものがdata propertyなのか，accessor propertyなのかによって処理を分けている</span>\n  <span class=\"token comment\">// data property: ふつうの値</span>\n  <span class=\"token comment\">// accessor property: アクセサ関数を通してGetすべき値．Getterとか？</span>\n  <span class=\"token comment\">//// 試しにgetterについてgetOwnPropertyDescriptorしたらget属性が得られたからたぶんそう</span>\n  <span class=\"token comment\">// see: https://tc39.es/ecma262/#sec-object-type</span>\n\n  <span class=\"token comment\">// 3. If IsDataDescriptor(desc) is true, return desc.[[Value]].</span>\n  <span class=\"token comment\">// descがdata propertyならそのValue（そのものの値）を返す．</span>\n  <span class=\"token comment\">// \"@@iterator\"は普通の関数オブジェクトでGetterではないからここで返るはず</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsDataDescriptor</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> desc<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 以下，descがaccessor propertyならそれを呼び出して得た値を返している</span>\n  <span class=\"token comment\">// 4. Assert: IsAccessorDescriptor(desc) is true.</span>\n  <span class=\"token comment\">// 5. Let getter be desc.[[Get]].</span>\n  <span class=\"token comment\">// 6. If getter is undefined, return undefined.</span>\n  <span class=\"token comment\">// 7. Return ? Call(getter, Receiver).</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// argumentが呼び出し可能か判定する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">IsCallable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">argument</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. If Type(argument) is not Object, return false.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> argument <span class=\"token operator\">!==</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. If argument has a [[Call]] internal method, return true.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">argumentが[[Call]]内部メソッドを持っている</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Return false.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 内部メソッドを呼び出すために使用される</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> argumentsList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. If argumentsList is not present, set argumentsList to a new empty List.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argumentsList <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> argumentsList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. If IsCallable(F) is false, throw a TypeError exception.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IsCallable</span><span class=\"token punctuation\">(</span><span class=\"token constant\">F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">\"TypeError exception\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Return ? F.[[Call]](V, argumentsList).</span>\n  <span class=\"token comment\">// Fが呼び出し可能だとわかったので，実際に呼び出しを行って結果を返す．</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span><span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> argumentsList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// イテレータの次の結果を得る</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">IteratorStep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iteratorRecord</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let result be ? IteratorNext(iteratorRecord).</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">IteratorNext</span><span class=\"token punctuation\">(</span>iteratorRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 値を得る</span>\n\n  <span class=\"token comment\">// 2. Let done be ? IteratorComplete(result).</span>\n  <span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token function\">IteratorComplete</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 完了状態を得る</span>\n\n  <span class=\"token comment\">// 3. If done is true, return false.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 既にイテレーターが完了していばfalseを返す</span>\n\n  <span class=\"token comment\">// 4. Return result.</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// イテレーターのNextを実行して結果を返す</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">IteratorNext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iteratorRecord<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. If value is not present, then</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 今回の呼び出しでは多くの場合こちら</span>\n    <span class=\"token comment\">// a. Let result be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]]).</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>iteratorRecord<span class=\"token punctuation\">.</span>NextMethod<span class=\"token punctuation\">,</span> iteratorRecord<span class=\"token punctuation\">.</span>Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NextMethodをIteratorで実行し，次の値を得る</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2. Else,</span>\n    <span class=\"token comment\">//     a. Let result be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], « value »).</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3. If Type(result) is not Object, throw a TypeError exception.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> argument <span class=\"token operator\">!==</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">\"TypeError exception\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. Return result.</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// イテレーターが完了しているか判定する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">IteratorComplete</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Return ToBoolean(? Get(iterResult, \"done\")).</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>iterResult<span class=\"token punctuation\">,</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// iterResultオブジェクトのdoneプロパティを得て，Booleanに変換して返す</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// イテレータの結果から値を得る</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">IteratorValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Return ? Get(iterResult, \"value\").</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>iterResult<span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">O</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Return ? O.[[Get]](P, O).</span>\n  <span class=\"token comment\">// Oの種類によって適切な[[Get]]が呼ばれる．</span>\n  <span class=\"token comment\">// 例えば，OがOrdinary Objectの場合は上述したObject.prototype.Getが呼ばれるはず</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// オブジェクトOにプロパティPを生やしてVをセットする．無理そうなら例外を投げる</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">CreateDataPropertyOrThrow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">O</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let success be ? CreateDataProperty(O, P, V).</span>\n  <span class=\"token keyword\">let</span> success <span class=\"token operator\">=</span> <span class=\"token function\">CreateDataProperty</span><span class=\"token punctuation\">(</span><span class=\"token constant\">O</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. If success is false, throw a TypeError exception.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">\"TypeError exception\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Return success.</span>\n  <span class=\"token keyword\">return</span> success<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CreateDataProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">O</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }.</span>\n  <span class=\"token comment\">// 新しいPropertyDescriptorを作成する．これはdata property用のDescriptor</span>\n  <span class=\"token keyword\">let</span> newDesc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">Value</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">Writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">Enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">Configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Return ? O.[[DefineOwnProperty]](P, newDesc).</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">.</span><span class=\"token function\">DefineOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> newDesc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// プロパティを登録．詳細は割愛</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// completionRecordがCompletion Recordタイプであることを強調する目的．</span>\n<span class=\"token comment\">// アサーションに失敗した時になにかしたいわけではない．</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Completion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">completionRecord</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Assert: completionRecord is a Completion Record.</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">completionRecordがCompletion Recordタイプであること</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 2. Return completionRecord.</span>\n  <span class=\"token keyword\">return</span> completionRecord<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>書き直してみて，かえって分かりづらくなっている気がしなくもないです．</p>\n<p>ともかくAssignmentExpressionのイテレータを得て，その結果を順に配列へ追加しているわけですねー</p>\n<h2 id=\"stringprototype--iterator---\" style=\"position:relative;\"><a href=\"#stringprototype--iterator---\" aria-label=\"stringprototype  iterator    permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String.prototype [ @@iterator ] ( )</h2>\n<p>では，文字列からはどのようなイテレータが得られるのでしょうか．</p>\n<p>というわけで，これまた検索ボックスに「string iterator」と入力すると，<a href=\"https://tc39.es/ecma262/#sec-string.prototype-@@iterator\">22.1.3.34 String.prototype [ @@iterator ] ( )</a>がしっかりとヒットしました．ホント優秀ですねこれ．</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 728px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/8aafba2c8f29179e3443a8f4d2dfbe36/e5cab/string_iterator.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 51.92307692307693%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'207\\'%20viewBox=\\'0%200%20400%20207\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M80%208H66l1%204c0%203%201%204%202%202%201-1%202-2%203-1%202%200%202%200%201-1l1-2%201%201%204%202c2%200%203-1%202-2%200-2%200-2%201-1%201%203%207%204%206%201l1-2%201%204c-1%203%201%203%202-1l1-2v2c0%203%201%204%203%201h3l2-1v-1c2-2%200-3-4-3l-5%201h-1l-4-1h-7m87%20129l-3%201c-2%200-2%201-2%202s1%202%205%202l4-1h16l2%201c2%200%202%200%201-1l-2-2%202-2h-1a3999%203999%200%2000-14%202l-1-3-1%201c0%202-3%202-4%200h-2m-94%2046l-3%201c-2%200-3%201-3%202h-1l-2-2c-2%200-2%201-2%202s2%202%208%202l7-1%201-1%201%201%205%201%205-1%201-1%201%201%203%201c2%200%203%200%202-1l-1-3c0-2-2-3-2-1-1%201-9%202-10%200h-4l-2%201-2-1-1-1-1%201m98%2011l-1%201v3l-1%201c1%201%206%200%206-2h1l1%202%201-2h1c0%202%201%202%203%202l3%201%202%201%202-1%203-1c2%200%202%200%202-3%200-1%200-2-1-1l-1-1c0-2-2-1-2%202%200%201%200%202-1%201%200-1-1-2-4-2l-5-1h-8l-1-1v1m44%200l-3%201a629%20629%200%2000-15%200c-2%200-3%203-1%205l1-1h1l2-1h15c1%201%201%201%203-1h2c0%202%202%203%202%201h1l7%201h7c0%201%201%201%202-1%201-1%201-1%201%201-1%202%200%203%202%201l3-1%202-2c0-2-1-2-5-2a52%2052%200%2001-8%200h-6c-2%201-7%200-8-1h-5\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/8aafba2c8f29179e3443a8f4d2dfbe36/f4a91/string_iterator.webp 728w,\n/static/8aafba2c8f29179e3443a8f4d2dfbe36/e0a22/string_iterator.webp 941w\"\n              sizes=\"(max-width: 728px) 100vw, 728px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/8aafba2c8f29179e3443a8f4d2dfbe36/beb58/string_iterator.png 728w,\n/static/8aafba2c8f29179e3443a8f4d2dfbe36/e5cab/string_iterator.png 941w\"\n            sizes=\"(max-width: 728px) 100vw, 728px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/8aafba2c8f29179e3443a8f4d2dfbe36/beb58/string_iterator.png\"\n            alt=\"22.1.3.34 String.prototype [ @@iterator ] ( )のスクリーンショット\"\n            title=\"22.1.3.34 String.prototype [ @@iterator ] ( )のスクリーンショット\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span></p>\n<p>冒頭を読んでみますと，</p>\n<blockquote>\n<p>When the @@iterator method is called it returns an Iterator object (27.1.1.2) that iterates over the code points of a String value, returning each code point as a String value.</p>\n<p>訳：@@iteratorが呼ばれると，文字列全体の各コードポイントを1つずつ反復するようなイテレータを返します</p>\n</blockquote>\n<p>とありますので，期待通りの挙動をしそうですね！</p>\n<p>念の為ステップも読んでみます</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">iterator</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let O be ? RequireObjectCoercible(this value).</span>\n  <span class=\"token comment\">// RequireObjectCoercible: 引数がオブジェクトに変換できるなら引数をそのまま返す．変換できないなら例外を投げる</span>\n  <span class=\"token comment\">// 今回の場合thisはStringなのでthisがそのまま返る</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=</span> <span class=\"token function\">RequireObjectCoercible</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Let s be ? ToString(O).</span>\n  <span class=\"token comment\">// ToString: booleanやnumberなど，様々なタイプの値を文字列に変換する</span>\n  <span class=\"token comment\">// 今回の場合Oは文字列なのでそのまま返る</span>\n  <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Let closure be a new Abstract Closure with no parameters that captures s and performs the following steps when called:</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">closure</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ここがイテレータロジックの本体です．</span>\n\n    <span class=\"token comment\">// a. Let position be 0.</span>\n    <span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// b. Let len be the length of s.</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// c. Repeat, while position &lt; len,</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// i. Let cp be CodePointAt(s, position).</span>\n      <span class=\"token comment\">// CodePointAt: sをUTF-16バイトシーケンスとして解釈し，そのpositionから始まる単一のコードポイントに関する情報を返す</span>\n      <span class=\"token comment\">// 注意: String.prototypeにも同じ名前のメソッドがあるが，こちらは抽象操作</span>\n      <span class=\"token comment\">// 返される情報:</span>\n      <span class=\"token comment\">//// [[CodePoint]]: コードポイントの値</span>\n      <span class=\"token comment\">//// [[CodeUnitCount]]: コードユニットの個数．サロゲートペアの場合は2，それ以外は1</span>\n      <span class=\"token comment\">//// [[IsUnpairedSurrogate]]: サロゲートペアの組み合わせがおかしい場合にtrue，それ以外はfalse</span>\n      <span class=\"token keyword\">let</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">CodePointAt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// ii. Let nextIndex be position + cp.[[CodeUnitCount]].</span>\n      <span class=\"token comment\">// サロゲートペアの場合はnextIndexが2進む</span>\n      <span class=\"token keyword\">let</span> nextIndex <span class=\"token operator\">=</span> position <span class=\"token operator\">+</span> cp<span class=\"token punctuation\">.</span>CodeUnitCount<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// iii. Let resultString be the substring of s from position to nextIndex.</span>\n      <span class=\"token comment\">// サロゲートペアも1文字として，現在の文字を取り出す</span>\n      <span class=\"token keyword\">let</span> resultString <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> nextIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// iv. Set position to nextIndex.</span>\n      position <span class=\"token operator\">=</span> nextIndex<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// v. Perform ? GeneratorYield(CreateIterResultObject(resultString, false)).</span>\n      <span class=\"token comment\">// CreateIterResultObject: (value, done)を受け取って{value: value, done: done}というオブジェクトを作る</span>\n      <span class=\"token comment\">// GeneratorYield: イテレータから値を返す．詳細は割愛</span>\n      <span class=\"token function\">GeneratorYield</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateIterResultObject</span><span class=\"token punctuation\">(</span>resultString<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// d. Return undefined.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. Return CreateIteratorFromClosure(closure, \"%StringIteratorPrototype%\", %StringIteratorPrototype%).</span>\n  <span class=\"token comment\">// CreateIteratorFromClosure: ジェネレータを作成する．引数の意味は以下の通り．詳細は割愛</span>\n  <span class=\"token comment\">//// closure: 引数を取らない抽象クロージャ．イテレータロジックの本体</span>\n  <span class=\"token comment\">//// generatorBrand: いろいろなジェネレータを区別するための内部スロット？よくわかっていない．</span>\n  <span class=\"token comment\">////// see: https://tc39.es/ecma262/#sec-properties-of-asyncgenerator-intances</span>\n  <span class=\"token comment\">//// generatorPrototype: イテレータが登録される場所，プロトタイプ</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">CreateIteratorFromClosure</span><span class=\"token punctuation\">(</span>\n    closure<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"%StringIteratorPrototype%\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>Iterator\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CodePointAt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> position</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Let size be the length of string.</span>\n  <span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Assert: position ≥ 0 and position &lt; size.</span>\n  <span class=\"token comment\">// 事前条件を強調する目的．アサーションが失敗したときになにかしたいわけではない</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> position <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Let first be the code unit at index position within string.</span>\n  <span class=\"token comment\">// positionの最初の文字を得る</span>\n  <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. Let cp be the code point whose numeric value is that of first.</span>\n  <span class=\"token comment\">// positionの最初の文字の数値を得る</span>\n  <span class=\"token keyword\">let</span> cp <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 5. If first is not a leading surrogate or trailing surrogate, then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">firstが上位サロゲートでない</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">||</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">firstが下位サロゲートでない</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// つまりBMPの文字．サロゲート関係ない</span>\n\n    <span class=\"token comment\">// a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: false }.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">CodePoint</span><span class=\"token operator\">:</span> cp<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">CodeUnitCount</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">IsUnpairedSurrogate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 6. If first is a trailing surrogate or position + 1 = size, then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">firstが下位サロゲート</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">||</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// positionが下位サロゲートを指してしまっている，または文字列が上位サロゲートで中途半端に終わっている</span>\n\n    <span class=\"token comment\">// a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.</span>\n    <span class=\"token comment\">// UnpairedSurrogateだ！</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">CodePoint</span><span class=\"token operator\">:</span> cp<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">CodeUnitCount</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">IsUnpairedSurrogate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ここまで来ると，</span>\n  <span class=\"token comment\">//// 1. 今回扱いたい文字はBMPでない</span>\n  <span class=\"token comment\">//// 2. firstの「次の文字」がある（position + 1 !== sizeである）</span>\n  <span class=\"token comment\">// したがって，次の文字は下位サロゲートに違いない (a)</span>\n\n  <span class=\"token comment\">// 7. Let second be the code unit at index position + 1 within string.</span>\n  <span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 8. If second is not a trailing surrogate, then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">secondが下位サロゲートでない</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// (a) なのに，secondが下位サロゲートでない！文字列がおかしいのでUnpairedSurrogateだ！</span>\n\n    <span class=\"token comment\">// a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">CodePoint</span><span class=\"token operator\">:</span> cp<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">CodeUnitCount</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">IsUnpairedSurrogate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ここまで来て，ようやく上位サロゲートと下位サロゲートが揃った</span>\n\n  <span class=\"token comment\">// 9. Set cp to UTF16SurrogatePairToCodePoint(first, second).</span>\n  <span class=\"token comment\">// UTF16SurrogatePairToCodePoint: 上位・下位サロゲートからコードポイントを得る</span>\n  cp <span class=\"token operator\">=</span> <span class=\"token function\">UTF16SurrogatePairToCodePoint</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 10. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 2, [[IsUnpairedSurrogate]]: false }.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">CodePoint</span><span class=\"token operator\">:</span> cp<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">CodeUnitCount</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">IsUnpairedSurrogate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UTF16SurrogatePairToCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lead<span class=\"token punctuation\">,</span> trail</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Assert: lead is a leading surrogate and trail is a trailing surrogate.</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">leadは上位サロゲート</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">trailは下位サロゲート</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Let cp be (lead - 0xD800) × 0x400 + (trail - 0xDC00) + 0x10000.</span>\n  <span class=\"token keyword\">let</span> cp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lead <span class=\"token operator\">-</span> <span class=\"token number\">0xd800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x400</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>trail <span class=\"token operator\">-</span> <span class=\"token number\">0xdc00</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Return the code point cp.</span>\n  <span class=\"token keyword\">return</span> cp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>前節でだいぶ疲れたので深追いはしていませんが，文字列のイテレータが思ったとおりの挙動であることを確かめられました！</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><code class=\"language-text\">[...\"文字列\"].length</code>によってコードポイント数がわかるのか，その詳細な挙動が知りたくてECMA-262を読みました．その結果，所望の結果が得られることを確かめられました．</p>\n<p>ところで後になって調べてみると，今回の結論を書いているブログをいくつも見つけました 🙃</p>\n<ul>\n<li><a href=\"https://blog.jxck.io/entries/2017-03-02/unicode-in-javascript.html\">JavaScriptにおける文字コードと「文字数」の数え方 | blog.jxck.io</a></li>\n<li><a href=\"https://jsprimer.net/basic/string-unicode/\">文字列とUnicode · JavaScript Primer #jsprimer</a></li>\n<li><a href=\"https://qiita.com/suin/items/3da4fb016728c024eaca\">JavaScript: 文字数を正確にカウントするには？</a></li>\n</ul>\n<p>ECMA-262より分かりやすい！😇</p>\n<p>最初からよくググって，こっちを見たほうが早かったですね．</p>\n<p>ともあれ，仕様書を読むことで周辺知識の理解が深まった気がします．</p>\n<p>ECMA-262初心者なので，間違いがあればご指摘ください．</p>\n<p>ありがとうございました</p>","frontmatter":{"title":"ECMA-262を読んだ日","date":"2022/06/10"},"fields":{"slug":"/ECMA-262を読んだ日/"},"id":"c2db052c-95c6-5094-935b-9eb39f5c762a"},"firstImage":{"imageFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/static/f1d363e6774ac2ddb43d9766816d8995/53437/top.png","srcSet":"/static/f1d363e6774ac2ddb43d9766816d8995/0abce/top.png 179w,\n/static/f1d363e6774ac2ddb43d9766816d8995/356f7/top.png 357w,\n/static/f1d363e6774ac2ddb43d9766816d8995/53437/top.png 714w","sizes":"(min-width: 714px) 714px, 100vw"},"sources":[{"srcSet":"/static/f1d363e6774ac2ddb43d9766816d8995/a7655/top.webp 179w,\n/static/f1d363e6774ac2ddb43d9766816d8995/2c1f1/top.webp 357w,\n/static/f1d363e6774ac2ddb43d9766816d8995/48cda/top.webp 714w","type":"image/webp","sizes":"(min-width: 714px) 714px, 100vw"}]},"width":714,"height":339}}}},"relatedMarkdownRemarks":{"posts":[{"id":"69a4aa90-b728-522c-b34f-abee49825c45","frontmatter":{"draft":true}},{"id":"961ec1e6-3f2b-59d9-a33f-dad76cf67f47","frontmatter":{"draft":null}},{"id":"50951bb1-eb92-5663-a3d8-8f35f73a1322","frontmatter":{"draft":null}},{"id":"d4d1afa4-f2f9-5942-ae36-2826fb938af5","frontmatter":{"draft":null}},{"id":"a190aac4-0483-5e02-b1d3-261f3b5f313a","frontmatter":{"draft":null}},{"id":"01deffb8-0d62-54c6-9e41-20832cbc3c6e","frontmatter":{"draft":null}},{"id":"75696ec6-74a3-5046-8a3c-f39b36d92311","frontmatter":{"draft":null}},{"id":"3a3c4125-9986-53bb-8b96-ae29936c96ab","frontmatter":{"draft":null}},{"id":"f920a8a8-f5fe-57c9-8792-95c93d2b74eb","frontmatter":{"draft":null}},{"id":"b4251348-b618-5b5b-a2c8-e4c6b2431b83","frontmatter":{"draft":true}},{"id":"89ddbcc0-ed71-5a69-9d55-9677eab3e6cf","frontmatter":{"draft":null}},{"id":"84bf9a79-dd68-55d1-a1b3-60ffd3784554","frontmatter":{"draft":null}},{"id":"3d71b3f9-8d6b-58a4-b6cb-8293daf99d74","frontmatter":{"draft":null}},{"id":"c6def021-b8da-5dbe-ad3e-811d9286424d","frontmatter":{"draft":true}},{"id":"f06a6ae0-e961-504c-8dab-a60489c0557a","frontmatter":{"draft":true}},{"id":"c5e2431a-cf05-5024-b833-e1c69f680d44","frontmatter":{"draft":null}},{"id":"c7a5adfb-149b-5469-ba35-7421e2101951","frontmatter":{"draft":null}},{"id":"a6c64123-b824-5224-8027-90eb12040396","frontmatter":{"draft":null}},{"id":"63f3c7ad-6c59-52b5-9816-78fd348955ff","frontmatter":{"draft":true}},{"id":"ed7af7f9-75f5-59be-9063-de564576eed7","frontmatter":{"draft":true}},{"id":"eba9aa6a-6e21-5f1b-a0eb-7b6bfb1e04f1","frontmatter":{"draft":null}},{"id":"82d43655-ea2a-52cd-97a3-16b7b28ad150","frontmatter":{"draft":null}},{"id":"e322eac2-bd89-5347-b20d-d050d303a6be","frontmatter":{"draft":null}},{"id":"7d79eb4b-cd4a-5621-a67a-91d9a24dce05","frontmatter":{"draft":null}},{"id":"e4fb8478-b1ad-59eb-95e8-8c5e0500d3f4","frontmatter":{"draft":true}},{"id":"e83330dc-2312-5ae6-95fa-53e86909f42b","frontmatter":{"draft":true}},{"id":"bfee69af-7d7f-5d87-9680-d2e9b60f8416","frontmatter":{"draft":null}},{"id":"3908aafc-c8d3-5c67-821f-0866592449f2","frontmatter":{"draft":true}},{"id":"1086a735-7173-58cc-a813-c540a563aedf","frontmatter":{"draft":false}},{"id":"49cf25c1-03f6-575e-8c2f-638ccd6198ea","frontmatter":{"draft":null}},{"id":"871ac696-39ea-5c64-94f3-5dc4b73b5770","frontmatter":{"draft":true}},{"id":"2f30c3f1-0d66-590b-8dba-7836df701d46","frontmatter":{"draft":null}},{"id":"0116f663-28d1-507a-b5ab-b189801dd408","frontmatter":{"draft":true}},{"id":"067a602f-4581-5707-b896-73190dd8c889","frontmatter":{"draft":null}},{"id":"0c5568c9-6d87-56ed-ab0e-caeb9c1aafa4","frontmatter":{"draft":null}},{"id":"1162dccb-e1bf-576d-a5c6-0993394feb0a","frontmatter":{"draft":true}},{"id":"12222bfa-2e8e-51ee-99d8-8a19902351f5","frontmatter":{"draft":null}},{"id":"1509de3c-7308-5e40-a885-f5ebdb089774","frontmatter":{"draft":null}},{"id":"27f10a38-0ecb-539f-a717-7e40a41bbd10","frontmatter":{"draft":null}},{"id":"29b79017-f96d-5b04-8d01-5b8ee761ebed","frontmatter":{"draft":null}},{"id":"2cfd9e33-b4e1-53e4-884d-d8a6760f3387","frontmatter":{"draft":true}},{"id":"3b696b96-130d-50de-a673-dc1367f32387","frontmatter":{"draft":null}},{"id":"3c14921d-1ba3-5a7a-93a2-757f3a03ee3a","frontmatter":{"draft":null}},{"id":"46a22c41-5455-557c-85d4-973a6e2220ee","frontmatter":{"draft":null}},{"id":"48c65a15-67ca-57d0-9edc-ebcb868f7ad2","frontmatter":{"draft":true}},{"id":"4d43646f-8aa6-52b6-b0b6-5160f0be2b05","frontmatter":{"draft":null}},{"id":"4ed3b747-2001-54f4-9661-3acab89ce275","frontmatter":{"draft":null}},{"id":"4edc1b46-b395-5783-af6a-818b8fc9c2dc","frontmatter":{"draft":null}},{"id":"50d3cc2a-de7a-5b9a-a8d8-754415fe4d94","frontmatter":{"draft":null}},{"id":"5888c50d-8414-5e8f-b0dc-28a31b29053d","frontmatter":{"draft":null}},{"id":"5dba01b8-593d-5295-b135-16df1c6295e5","frontmatter":{"draft":null}},{"id":"73ab4455-f04d-5320-bf3a-90b9f7441d13","frontmatter":{"draft":null}},{"id":"73d6ab42-b3e6-5663-a175-b1f3d69c29e1","frontmatter":{"draft":null}},{"id":"75550af2-8134-5467-a07d-abbb5a4f6b7c","frontmatter":{"draft":true}},{"id":"7778d041-a5bf-536a-a36f-c0dbc5e08ac7","frontmatter":{"draft":true}},{"id":"78349b16-6e41-5fef-ae38-bcdc5ff297ef","frontmatter":{"draft":true}},{"id":"7a8fc278-a847-5b68-8b74-a83193ba3f55","frontmatter":{"draft":null}},{"id":"7d6499d9-277c-5f07-b8b1-98ae40c50c42","frontmatter":{"draft":null}},{"id":"8b3e46c2-1a1e-5af0-8900-7972c7285d15","frontmatter":{"draft":null}},{"id":"8f7b1b24-7738-5b97-bfb6-fd763f11a664","frontmatter":{"draft":true}},{"id":"97f01467-e3a1-58e1-b2a4-db77354cc1a3","frontmatter":{"draft":null}},{"id":"9f02de74-61a0-5daf-a048-1c1022e08fe4","frontmatter":{"draft":null}},{"id":"9f24363b-ee3e-54bf-8a18-46ea3b269bea","frontmatter":{"draft":null}},{"id":"a091877c-69b8-59f9-8963-1af334fd573c","frontmatter":{"draft":null}},{"id":"be594923-185e-5cca-95b6-5267b3c9fc8c","frontmatter":{"draft":null}},{"id":"c2249b7b-b97e-5cf4-8ea9-8024e96851b7","frontmatter":{"draft":true}},{"id":"cbdf3192-973c-5d87-9cf1-bb9110e9a169","frontmatter":{"draft":null}},{"id":"d29b4513-0609-5cfc-af49-817467dbed1f","frontmatter":{"draft":null}},{"id":"db26c6b9-37b4-5cc4-b1ec-c61dc667863e","frontmatter":{"draft":null}},{"id":"dd0c41cf-0a03-5b89-b5a2-f64859aeae63","frontmatter":{"draft":null}},{"id":"e376b2d4-df91-5b82-af7a-a8d02763e922","frontmatter":{"draft":true}},{"id":"ebae7878-c4ee-505e-81e2-3d3fc47ea826","frontmatter":{"draft":true}},{"id":"f49ce388-e81c-5425-af59-9902f125c20f","frontmatter":{"draft":null}},{"id":"f5a25ce1-67a6-51b2-9bf1-f9fbacb41ad1","frontmatter":{"draft":true}},{"id":"fd6eab68-17d3-5395-8b2b-54a6efe43ebb","frontmatter":{"draft":null}}]}},"pageContext":{"id":"c2db052c-95c6-5094-935b-9eb39f5c762a"}},"staticQueryHashes":["1530353647","2576926420","63159454"]}